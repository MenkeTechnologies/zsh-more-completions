#compdef zstdcat

local arguments

arguments=(
  '-d[decompression]'
  '-D[use `file` as Dictionary]'
  '-o[result stored into `file` (only if 1 input file)]'
  '-f[overwrite output without prompting and (de)compress links]'
  '--rm[remove source file(s) after successful de/compression]'
  '-k[preserve source file(s) (default)]'
  '-h[/-H : display help/long help and exit]'
  '-V[display Version number and exit]'
  '-v[verbose mode; specify multiple times to increase verbosity]'
  '-q[suppress warnings; specify twice to suppress errors too]'
  '-c[force write to standard output, even if it is the console]'
  '-l[print information about zstd compressed files]'
  '--ultra[enable levels beyond 19, up to 22 (requires more memory)]'
  '--long[enable long distance matching with given window log (default: 27)]'
  '--fast[switch to ultra fast compression level (default: 1)]'
  '-T[# : spawns # compression threads (default: 1, 0==# cores)]'
  '-B[# : select size of each job (default: 0==automatic)]'
  '--no-dictID[dont write dictID into header (dictionary compression)]'
  '-r[operate recursively on directories]'
  '--format[compress files to the .zstd format (default)]'
  '--format[compress files to the .gz format]'
  '--format[compress files to the .xz format]'
  '--format[compress files to the .lzma format]'
  '--format[4 : compress files to the .lz4 format]'
  '--test[test compressed file integrity]'
  '-M[# : Set a memory usage limit for decompression]'
  '--train[create a dictionary from a training set of files]'
  '--train-cover[#,d=#,steps=#\] : use the cover algorithm with optional args]'
  '--train-legacy[#\] : use the legacy algorithm with selectivity (default: 9)]'
  '-o[`file` is dictionary name (default: dictionary)]'
  '--maxdict[limit dictionary to specified size (default: 112640)]'
  '--dictID[force dictionary ID to specified value (default: random)]'
  '-b[# : benchmark file(s), using # compression level (default: 3)]'
  '-e[# : test all compression levels from -bX to # (default: 1)]'
  '-i[# : minimum evaluation time in seconds (default: 3s)]'
  '-B[# : cut file into independent blocks of size # (default: no block)]'
  '--priority[set process priority to real-time]'
  '*:filename:_files'
)

_arguments -s $arguments
