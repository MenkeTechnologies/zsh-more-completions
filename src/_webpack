#compdef webpack

local arguments

arguments=(
  '--config[path to the config file]'
  {--config-register,-r}'[preload one or more modules before loading the webpack]'
  '--config-name[name of the config to use \[string\]]'
  '--env[environment passed to the config, when it is a function]'
  '--mode[enable production optimizations or development hints.]'
  '--context[the base directory (absolute path!) for resolving the `entry`]'
  '--entry[the entry point(s) of the compilation. \[string\]]'
  {--watch,-w}'[enter watch mode, which rebuilds on file change. \[boolean\]]'
  '--debug[switch loaders to debug mode \[boolean\]]'
  '--devtool[A developer tool to enhance debugging. \[string\]]'
  '-d[shortcut for --debug --devtool eval-cheap-module-source-map]'
  '--output-pathinfo[\[boolean\]]'
  '-p[shortcut for --optimize-minimize --define]'
  '--progress[print compilation progress in percentage \[boolean\]]'
  '--module-bind[bind an extension to a loader \[string\]]'
  '--module-bind-post[bind an extension to a post loader \[string\]]'
  '--module-bind-pre[bind an extension to a pre loader \[string\]]'
  {--output,-o}'[the output path and file for compilation assets]'
  '--output-path[the output directory as **absolute path**]'
  '--output-filename[specifies the name of each output file on disk.]'
  '--output-chunk-filename[the filename of non-entry chunks as relative]'
  '--output-source-map-filename[the filename of the SourceMaps for the]'
  '--output-public-path[the `publicPath` specifies the public URL]'
  '--output-jsonp-function[the JSONP function used by webpack for async]'
  '--output-pathinfo[include comments with information about the]'
  '--output-library[expose the exports of the entry point as library]'
  '--output-library-target[type of library]'
  '--records-input-path[store compiler state to a json file. \[string\]]'
  '--records-output-path[load compiler state from a json file. \[string\]]'
  '--records-path[store/Load compiler state from/to a json file. This]'
  '--define[define any free var in the bundle \[string\]]'
  '--target[environment to build for \[string\]]'
  '--cache[cache generated modules and chunks to improve]'
  {--watch-stdin,--stdin}'[stop watching when stdin stream has ended \[boolean\]]'
  '--watch-aggregate-timeout[delay the rebuilt after the first change. Value is]'
  '--watch-poll[enable polling mode for watching \[string\]]'
  '--hot[enables Hot Module Replacement \[boolean\]]'
  '--prefetch[prefetch this request (Example: --prefetch]'
  '--provide[provide these modules as free vars in all modules]'
  '--labeled-modules[enables labeled modules \[boolean\]]'
  '--plugin[load this plugin \[string\]]'
  '--bail[report the first error as a hard error instead of]'
  '--profile[capture timing information for each module.]'
  '--resolve-alias[redirect module requests \[string\]]'
  '--resolve-extensions[redirect module requests \[array\]]'
  '--resolve-loader-alias[setup a loader alias for resolving \[string\]]'
  '--optimize-max-chunks[try to keep the chunk count below a limit]'
  '--optimize-min-chunk-size[minimal size for the created chunk]'
  '--optimize-minimize[enable minimizing the output. Uses]'
  {--color,--colors}'[force colors on the console]'
  {--no-color,--no-colors}'[force no colors on the console \[boolean\]]'
  '--sort-modules-by[sorts the modules list by property in module]'
  '--sort-chunks-by[sorts the chunks list by property in chunk]'
  '--sort-assets-by[sorts the assets list by property in asset]'
  '--hide-modules[hides info about modules \[boolean\]]'
  '--display-exclude[exclude modules in the output \[string\]]'
  '--display-modules[display even excluded modules in the output]'
  '--display-max-modules[sets the maximum number of visible modules in]'
  '--display-chunks[display chunks in the output \[boolean\]]'
  '--display-entrypoints[display entry points in the output \[boolean\]]'
  '--display-origins[display origins of chunks in the output]'
  '--display-cached[display also cached modules in the output]'
  '--display-cached-assets[display also cached assets in the output]'
  '--display-reasons[display reasons about module inclusion in the]'
  '--display-depth[display distance from entry point for each]'
  '--display-used-exports[display information about used exports in]'
  '--display-provided-exports[display information about exports provided]'
  '--display-optimization-bailout[display information about why optimization]'
  '--display-error-details[display details about errors \[boolean\]]'
  '--display[select display preset]'
  '--verbose[show more details \[boolean\]]'
  '--info-verbosity[controls the output of lifecycle messaging]'
  '--build-delimiter[display custom text after build output\[string\]]'
  {--help,-h}'[show help \[boolean\]]'
  {--version,-v}'[show version number \[boolean\]]'
  '--silent[prevent output from being displayed in stdout \[boolean\]]'
  {--json,-j}'[prints the result as JSON. \[boolean\]]'
  '*:filename:_files'
)

_arguments -s $arguments
