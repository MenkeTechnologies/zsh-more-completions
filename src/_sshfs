#compdef sshfs

local arguments

arguments=(
  {-d,-o}'[enable debug output (implies -f)]'
  '-f[foreground operation]'
  '-s[disable multi-threaded operation]'
  '-o[allow access to other users]'
  '-o[allow access to root]'
  '-o[auto unmount on process termination]'
  '-o[allow mounts over non-empty file/dir]'
  '-o[enable permission checking by kernel]'
  '-o[NAME set filesystem name]'
  '-o[NAME set filesystem type]'
  '-o[issue large read requests (2.4 only)]'
  '-o[N set maximum size of read requests]'
  '-o[immediate removal (dont hide files)]'
  '-o[let filesystem set inode numbers]'
  '-o[try to fill in d_ino in readdir]'
  '-o[use direct I/O]'
  '-o[cache files in kernel]'
  '-o[enable caching based on modification times (off)]'
  '-o[M set file permissions (octal)]'
  '-o[N set file owner]'
  '-o[N set file group]'
  '-o[T cache timeout for names (1.0s)]'
  '-o[T cache timeout for deleted names (0.0s)]'
  '-o[T cache timeout for attributes (1.0s)]'
  '-o[T auto cache timeout for attributes (attr_timeout)]'
  '-o[never forget cached inodes]'
  '-o[T remember cached inodes for T seconds (0s)]'
  '-o[dont supply path if not necessary]'
  '-o[allow requests to be interrupted]'
  '-o[NUM signal to send on interrupt (10)]'
  '-o[M1\[names of modules to push onto filesystem stack]:M2...\]:'
  '-o[N set maximum size of write requests]'
  '-o[N set maximum readahead]'
  '-o[N set number of maximum background requests]'
  '-o[N set kernels congestion threshold]'
  '-o[perform reads asynchronously (default)]'
  '-o[perform reads synchronously]'
  '-o[enable atomic open+truncate support]'
  '-o[enable larger than 4kB writes]'
  '-o[disable remote file locking]'
  '-o[disable remote file locking (BSD)]'
  '-o[disable remove file locking (POSIX)]'
  '-o[use splice to write to the fuse device]'
  '-o[move data while splicing to the fuse device]'
  '-o[use splice to read from the fuse device]'
  '-o[CHARSET original encoding of file names (default: UTF-8)]'
  '-o[CHARSET new encoding of the file names (default: UTF-8)]'
  '-o[DIR prepend this directory to all paths (mandatory)]'
  '-o[transform absolute symlinks to relative]'
  '-o[\[opt...\] mount options]'
  '(- * :)'{-h,--help}'[print help]'
  {-V,--version}'[print version]'
  '-p[equivalent to -o port=PORT]'
  '-C[equivalent to -o compression=yes]'
  '-F[specifies alternative ssh configuration file]'
  '-1[equivalent to -o ssh_protocol=1]'
  '-o[reconnect to server]'
  '-o[delay connection to server]'
  '-o[synchronous writes]'
  '-o[synchronous reads (no speculative readahead)]'
  '-o[synchronous readdir]'
  '-o[print some debugging information]'
  '-o[BOOL enable caching {yes,no} (default: yes)]'
  '-o[N sets the maximum size of the cache (default: 10000)]'
  '-o[N sets timeout for caches in seconds (default: 20)]'
  '-o[N sets timeout for {stat,dir,link} cache]'
  '-o[N]'
  '-o[N]'
  '-o[LIST colon separated list of workarounds]'
  '-o[TYPE user/group ID mapping (default: none)]'
  '-o[FILE file containing username:remote_uid mappings]'
  '-o[FILE file containing groupname:remote_gid mappings]'
  '-o[TYPE with idmap=file, how to handle missing mappings]'
  '-o[CMD execute CMD instead of ssh]'
  '-o[N ssh protocol to use (default: 2)]'
  '-o[SERV path to sftp server or subsystem (default: sftp)]'
  '-o[PORT directly connect to PORT bypassing ssh]'
  '-o[communicate over stdin and stdout bypassing network]'
  '-o[link(2) will return with errno set to ENOSYS]'
  '-o[transform absolute symlinks to relative]'
  '-o[follow symlinks on the server]'
  '-o[dont check for existence of dir on server]'
  '-o[read password from stdin (only for pam_mount!)]'
  '-o[VAL ssh options (see man ssh_config)]'
  '*:filename:_files'
)

_arguments -s $arguments
