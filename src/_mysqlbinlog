#compdef mysqlbinlog

local arguments

arguments=(
  '--base64-output[determine when the output statements should be]'
  '--bind-address[IP address to bind to.]'
  '--character-sets-dir[directory for character set files.]'
  {-d,--database}'[list entries for just this database (local log only).]'
  '--rewrite-db[rewrite the row event to point so that it can be applied]'
  '--debug-check[this is a non-debug version. Catch this and exit.]'
  '--debug-info[this is a non-debug version. Catch this and exit.]'
  '--default-auth[default authentication client-side plugin to use.]'
  {-D,--disable-log-bin}'[disable binary log. This is useful, if you enabled]'
  '--to-last-log[are sending the output to the same]'
  {-F,--force-if-open}'[if binlog was not closed properly.]'
  {-f,--force-read}'[force reading unknown binlog events.]'
  {-H,--hexdump}'[augment output with hexadecimal and ASCII event dump.]'
  {-h,--host}'[get the binlog from server.]'
  {-i,--idempotent}'[notify the server to use idempotent mode before applying]'
  {-l,--local-load}'[prepare local temporary files for LOAD DATA INFILE in the]'
  {-o,--offset}'[skip the first N entries.]'
  {-p,--password}'[password to connect to remote server.]'
  '--plugin-dir[directory for client-side plugins.]'
  {-P,--port}'[port number to use for connection or 0 for default to, in]'
  '--protocol[the protocol to use for connection (tcp, socket, pipe]'
  {-R,--read-from-remote-server}'[read binary logs from a MySQL server. This is an alias]'
  '--read-from-remote-master[read binary logs from a MySQL server through the]'
  '--read-from-remote-master[is combined]'
  '--raw[requires -R. Output raw binlog data instead of SQL]'
  {-r,--result-file}'[direct output to a given file. With --raw this is a]'
  '--server-id[extract only binlog entries created by the server having]'
  '--server-id-bits[set number of significant bits in server-id]'
  '--set-charset[add SET NAMES character_set to the output.]'
  {-s,--short-form}'[just show regular queries: no extra info and no row-based]'
  {-S,--socket}'[the socket file to use for connection.]'
  '--server-public-key-path[file path to the server public RSA key in PEM format.]'
  '--get-server-public-key[get server public key]'
  '--ssl-mode[SSL connection mode.]'
  '--ssl-ca[CA file in PEM format.]'
  '--ssl-capath[CA directory.]'
  '--ssl-cert[X509 cert in PEM format.]'
  '--ssl-cipher[SSL cipher to use.]'
  '--ssl-key[X509 key in PEM format.]'
  '--ssl-crl[certificate revocation list.]'
  '--ssl-crlpath[certificate revocation list path.]'
  '--tls-version[TLS version to use, permitted values are: TLSv1, TLSv1.1]'
  '--ssl-fips-mode[SSL FIPS mode to use, permitted values are: OFF, ON]'
  '--start-datetime[start reading the binlog at first event having a datetime]'
  {-j,--start-position}'[start reading the binlog at position N. Applies to the]'
  '--stop-datetime[stop reading the binlog at first event having a datetime]'
  '--stop-never[wait for more data from the server instead of stopping at]'
  '--stop-never-slave-server-id[the slave server_id used for --read-from-remote-server]'
  '--stop-never[. This option cannot be used together with]'
  '--connection-server-id[the slave server_id used for --read-from-remote-server.]'
  '--stop-position[stop reading the binlog at position N. Applies to the]'
  {-t,--to-last-log}'[requires -R. Will not stop at the end of the requested]'
  {-u,--user}'[connect to the remote server as username.]'
  {-v,--verbose}'[reconstruct pseudo-SQL statements out of row events. -v]'
  '-v[comments on column data types.]'
  {-V,--version}'[print version and exit.]'
  '--open-files-limit[used to reserve file descriptors for use by this program.]'
  {-c,--verify-binlog-checksum}'[verify checksum binlog events.]'
  '--binlog-row-event-max-size[the maximum size of a row-based binary log event in]'
  '--skip-gtids[do not preserve Global Transaction Identifiers; instead]'
  '--include-gtids[print events whose Global Transaction Identifiers were]'
  '--exclude-gtids[print all events but those whose Global Transaction]'
  '--print-table-metadata[print metadata stored in Table_map_log_event]'
  '*:filename:_files'
)

_arguments -s $arguments
