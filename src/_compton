#compdef compton

local arguments

arguments=(
  '-d[which display should be managed.]'
  '-r[the blur radius for shadows. (default 12)]'
  '-o[the translucency for shadows. (default .75)]'
  '-l[the left offset for shadows. (default -15)]'
  '-t[the top offset for shadows. (default -15)]'
  '-I[opacity change between steps while fading in. (default 0.028)]'
  '-O[opacity change between steps while fading out. (default 0.03)]'
  '-D[the time between steps in a fade in milliseconds. (default 10)]'
  '-m[the opacity for menus. (default 1.0)]'
  '-c[enabled client-side shadows on windows.]'
  '-C[avoid drawing shadows on dock/panel windows.]'
  '-z[zero the part of the shadows mask behind the window.]'
  '-f[fade windows in/out when opening/closing and when opacity]'
  '-F[equals to -f. Deprecated.]'
  '-i[opacity of inactive windows. (0.1 - 1.0)]'
  '-e[opacity of window titlebars and borders. (0.1 - 1.0)]'
  '-G[dont draw shadows on DND windows]'
  '-b[daemonize process.]'
  '-S[enable synchronous operation (for debugging).]'
  '--show-all-xerrors[show all X errors (for debugging).]'
  '--config[look for configuration file at the path. Use /dev/null to avoid]'
  '--write-pid-path[write process ID to a file.]'
  '--shadow-red[red color value of shadow (0.0 - 1.0, defaults to 0).]'
  '--shadow-green[green color value of shadow (0.0 - 1.0, defaults to 0).]'
  '--shadow-blue[blue color value of shadow (0.0 - 1.0, defaults to 0).]'
  '--inactive-opacity-override[inactive opacity set by -i overrides value of _NET_WM_OPACITY.]'
  '--inactive-dim[dim inactive windows. (0.0 - 1.0, defaults to 0)]'
  '--active-opacity[default opacity for active windows. (0.0 - 1.0)]'
  '--mark-wmwin-focused[try to detect WM windows and mark them as active.]'
  '--shadow-exclude[exclude conditions for shadows.]'
  '--fade-exclude[exclude conditions for fading.]'
  '--mark-ovredir-focused[mark windows that have no WM frame as active.]'
  '--no-fading-openclose[do not fade on window open/close.]'
  '--no-fading-destroyed-argb[do not fade destroyed ARGB windows with WM frame. Workaround of bugs]'
  '--shadow-ignore-shaped[do not paint shadows on shaped windows. (Deprecated, use]'
  '--shadow-exclude[ or]'
  '--shadow-exclude[&& !rounded_corners instead.)]'
  '--detect-rounded-corners[try to detect windows with rounded corners and dont consider]'
  '--unredir-if-possible[and possibly others. You need to turn this]'
  '--detect-client-opacity[detect _NET_WM_OPACITY on client windows, useful for window]'
  '--refresh-rate[specify refresh rate of the screen. If not specified or 0, compton]'
  '--vsync[set VSync method. There are (up to) 5 VSync methods currently]'
  '--vsync-aggressive[attempt to send painting request before VBlank and do XFlush()]'
  '--alpha-step[X Render backend: Step for pregenerating alpha pictures.]'
  '--dbe[enable DBE painting mode, intended to use with VSync to]'
  '--paint-on-overlay[painting on X Composite overlay window.]'
  '--sw-opti[limit compton to repaint at most once every 1 / refresh_rate]'
  '--use-ewmh-active-win[use _NET_WM_ACTIVE_WINDOW on the root window to determine which]'
  '--respect-prop-shadow[respect _COMPTON_SHADOW. This a prototype-level feature, which]'
  '--unredir-if-possible[unredirect all windows if a full-screen opaque window is]'
  '--unredir-if-possible-delay[delay before unredirecting the window, in milliseconds.]'
  '--unredir-if-possible-exclude[conditions of windows that shouldnt be considered full-screen]'
  '--focus-exclude[specify a list of conditions of windows that should always be]'
  '--inactive-dim-fixed[use fixed inactive dim value.]'
  '--detect-transient[use WM_TRANSIENT_FOR to group windows, and consider windows in]'
  '--detect-client-leader[use WM_CLIENT_LEADER to group windows, and consider windows in]'
  '--blur-background[blur background of semi-transparent / ARGB windows. Bad in]'
  '--blur-background-frame[blur background of windows when the window frame is not opaque.]'
  '--blur-background-fixed[use fixed blur strength instead of adjusting according to window]'
  '--blur-kern[specify the blur convolution kernel, with the following format:]'
  '--blur-background-fixed[.]'
  '--blur-kern[7,7,0.000003,0.000102,0.000849,0.001723,0.000849,0.000102,0.000003,0.000102,0.003494,0.029143,0.059106,0.029143,0.003494,0.000102,0.000849,0.029143,0.243117,0.493069,0.243117,0.029143,0.000849,0.001723,0.059106,0.493069,0.493069,0.059106,0.001723,0.000849,0.029143,0.243117,0.493069,0.243117,0.029143,0.000849,0.000102,0.003494,0.029143,0.059106,0.029143,0.003494,0.000102,0.000003,0.000102,0.000849,0.001723,0.000849,0.000102,0.000003]'
  '--blur-background-exclude[exclude conditions for background blur.]'
  '--resize-damage[resize damaged region by a specific number of pixels. A positive]'
  '--invert-color-include[specify a list of conditions of windows that should be painted with]'
  '--opacity-rule[specify a list of opacity rules, in the format "PERCENT:PATTERN"]'
  '--shadow-exclude-reg[specify a X geometry that describes the region in which shadow]'
  '--xinerama-shadow-crop[crop shadow of a window fully on a particular Xinerama screen to the]'
  '--backend[choose backend. Possible choices are xrender, glx, and]'
  '--glx-no-stencil[GLX backend: Avoid using stencil buffer. Might cause issues]'
  '--glx-copy-from-front[GLX backend: Copy unmodified regions from front buffer instead of]'
  '--glx-use-copysubbuffermesa[GLX backend: Use MESA_copy_sub_buffer to do partial screen update.]'
  '--glx-no-rebind-pixmap[GLX backend: Avoid rebinding pixmap on window damage. Probably]'
  '--glx-swap-method[/copy/exchange/3/4/5/6/buffer-age]'
  '--glx-use-copysubbuffermesa[.]'
  '--glx-use-gpushader4[GLX backend: Use GL_EXT_gpu_shader4 for some optimization on blur]'
  '--xrender-sync[attempt to synchronize client applications draw calls with XSync()]'
  '--xrender-sync-fence[additionally use X Sync fence to sync clients draw calls. Needed]'
  '--glx-fshader-win[GLX backend: Use specified GLSL fragment shader for rendering window]'
  '--force-win-blend[force all windows to be painted with blending. Useful if you have a]'
  '--glx-fshader-win[could turn opaque pixels transparent.]'
  '--dbus[enable remote control via D-Bus. See the D-BUS API section in the]'
  '--benchmark[benchmark mode. Repeatedly paint until reaching the specified cycles.]'
  '--benchmark-wid[specify window ID to repaint in benchmark mode. If omitted or is 0]'
  '*:filename:_files'
)

_arguments -s $arguments
