#compdef dmd

local arguments

arguments=(
  '-allinst[generate code for all template instantiations]'
  '-betterC[omit generating some runtime information and helper functions]'
  '-boundscheck[bounds checks on, in @safe only, or off]'
  '-c[compile only, do not link]'
  '-check[\[on|off\]\]]'
  '-check[list information on all available checks]'
  '-checkaction[behavior on assert/boundscheck/finalswitch failure]'
  '-checkaction[list information on all available check actions]'
  '-color[turn colored console output on]'
  '-color[force colored console output on or off, or only when not redirected (default)]'
  '-conf[use config file at filename]'
  '-cov[do code coverage analysis]'
  '-cov[include code executed during CTFE in coverage report]'
  '-cov[require at least nnn% code coverage]'
  '-D[generate documentation]'
  '-Dd[<directory>    write documentation file to directory]'
  '-Df[<filename>     write documentation file to filename]'
  '-d[silently allow deprecated features and symbols]'
  '-de[issue an error when deprecated features or symbols are used (halt compilation)]'
  '-dw[issue a message when deprecated features or symbols are used (default)]'
  '-debug[compile in debug code]'
  '-debug[compile in debug code <= level]'
  '-debug[compile in debug code identified by ident]'
  '-debuglib[set symbolic debug library to name]'
  '-defaultlib[set default library to name]'
  '-deps[print module dependencies (imports/file/version/debug/lib)]'
  '-deps[write module dependencies to filename (only imports)]'
  '-extern-std[set C++ name mangling compatibility with <standard>]'
  '-extern-std[list all supported standards]'
  '-g[add symbolic debug info]'
  '-gdwarf[add DWARF symbolic debug info]'
  '-gf[emit debug info for all referenced types]'
  '-gs[always emit stack frame]'
  '-gx[add stack stomp code]'
  '-H[generate header file]'
  '-Hd[write header file to directory]'
  '-Hf[write header file to filename]'
  '-HC[generate C++ header file]'
  '-HC[list available modes for C++ header file generation]'
  '-HCd[write C++ header file to directory]'
  '-HCf[write C++ header file to filename]'
  '--help[print help and exit]'
  '-I[look for imports also in directory]'
  '-i[include imported modules in the compilation]'
  '-ignore[ignore unsupported pragmas]'
  '-inline[do function inlining]'
  '-J[look for string imports also in directory]'
  '-L[pass linkerflag to link]'
  '-lib[generate library rather than object files]'
  '-lowmem[enable garbage collection for the compiler]'
  '-m32[generate 32 bit code]'
  '-m64[generate 64 bit code]'
  '-main[add default main() (e.g. for unittesting)]'
  '-makedeps[print dependencies in Makefile compatible format to filename or stdout.]'
  '-man[open web browser on manual page]'
  '-map[generate linker .map file]'
  '-mcpu[generate instructions for architecture identified by id]'
  '-mcpu[list all architecture options]'
  '-mixin[expand and save mixins to file specified by <filename>]'
  '-mv[.module>=<filespec>]'
  '-noboundscheck[no array bounds checking (deprecated, use -boundscheck=off)]'
  '-O[optimize]'
  '-o-[do not write object file]'
  '-od[write object & library files to directory]'
  '-of[name output file to filename]'
  '-op[preserve source path for output files]'
  '-preview[enable an upcoming language change identified by name]'
  '-preview[list all upcoming language changes]'
  '-profile[profile runtime performance of generated code]'
  '-profile[profile runtime allocations]'
  '-release[compile release version]'
  '-revert[revert language change identified by name]'
  '-revert[list all revertable language changes]'
  '-run[compile, link, and run the program srcfile]'
  '-shared[generate shared library (DLL)]'
  '-target[use <triple> as <arch>-\[<vendor>-\]<os>\[-<cenv>\[-<cppenv\]\]]'
  '-transition[help with language change identified by name]'
  '-transition[list all language changes]'
  '-unittest[compile in unit tests]'
  '-v[verbose]'
  '-vcolumns[print character (column) numbers in diagnostics]'
  '-verror-style[set the style for file/line number annotations on compiler messages]'
  '-verrors[limit the number of error messages (0 means unlimited)]'
  '-verrors[show error messages with the context of the erroring source line]'
  '-verrors[show errors from speculative compiles such as __traits(compiles,...)]'
  '--version[print compiler version and exit]'
  '-version[compile in version code >= level]'
  '-version[compile in version code identified by ident]'
  '-vgc[list all gc allocations including hidden ones]'
  '-vtls[list all variables going into thread local storage]'
  '-vtemplates[list statistics on template instantiations]'
  '-w[warnings as errors (compilation will halt)]'
  '-wi[warnings as messages (compilation will continue)]'
  '-X[generate JSON file]'
  '-Xf[write JSON file to filename]'
  '-Xcc[pass driverflag to linker driver (cc)]'
  '*:filename:_files'
)

_arguments -s $arguments
