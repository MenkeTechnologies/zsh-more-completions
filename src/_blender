#compdef blender

local arguments

arguments=(
  {-b,--background}'[run in background (often used for UI-less rendering).]'
  {-a,--render-anim}'[render frames from start to end (inclusive).]'
  {-S,--scene}'[set the active scene <name> for rendering.]'
  {-f,--render-frame}'[render frame <frame> and save it.]'
  {-s,--frame-start}'[set start to frame <frame>, supports +/- for relative frames too.]'
  {-e,--frame-end}'[set end to frame <frame>, supports +/- for relative frames too.]'
  {-j,--frame-jump}'[set number of frames to step forward after each rendered frame.]'
  {-o,--render-output}'[set the render path and file name.]'
  {-E,--engine}'[specify the render engine.]'
  {-t,--threads}'[use amount of <threads> for rendering and other operations]'
  {-F,--render-format}'[set the render format.]'
  {-x,--use-extension}'[set option to add the file extension to the end of the file.]'
  '-a[<file(s)>]'
  '-p[<sy>]'
  '-m[read from disk (Do not buffer).]'
  '-f[<fps-base>]'
  '-j[set frame step to <frame>.]'
  '-s[play from <frame>.]'
  '-e[play until <frame>.]'
  '-c[amount of memory in megabytes to allow for caching images during playback.]'
  {-w,--window-border}'[force opening with borders.]'
  {-W,--window-fullscreen}'[force opening in fullscreen mode.]'
  {-p,--window-geometry}'[<sy> <w> <h>]'
  {-M,--window-maximized}'[force opening maximized.]'
  {-con,--start-console}'[start with the console window open (ignored if -b is set), (Windows only).]'
  '--no-native-pixels[do not use native pixel size, for high resolution displays (MacBook Retina).]'
  '--no-window-focus[open behind other windows and without taking focus.]'
  {-y,--enable-autoexec}'[enable automatic Python script execution.]'
  {-Y,--disable-autoexec}'[disable automatic Python script execution (pydrivers & startup scripts), (compiled as non-standard default).]'
  {-P,--python}'[run the given Python script file.]'
  '--python-text[run the given Python script text block.]'
  '--python-expr[run the given expression as a Python script.]'
  '--python-console[run Blender with an interactive console.]'
  '--python-exit-code[set the exit-code in \[0..255\] to exit if a Python exception is raised]'
  '--python-use-system-env[allow Python to use system environment variables such as PYTHONPATH and the user site-packages directory.]'
  '--addons[(s)>]'
  '--log[enable logging categories, taking a single comma separated argument.]'
  '--log-level[set the logging verbosity level (higher for more details) defaults to 1]'
  '--log-show-basename[only show file name in output (not the leading path).]'
  '--log-show-backtrace[show a back trace for each log message (debug builds only).]'
  '--log-show-timestamp[show a timestamp for each log message in seconds since start.]'
  '--log-file[set a file to output the log to.]'
  {-d,--debug}'[turn debugging on.]'
  '--debug-value[set debug value of <value> on startup.]'
  '--debug-events[enable debug messages for the event system.]'
  '--debug-ffmpeg[enable debug messages from FFmpeg library.]'
  '--debug-handlers[enable debug messages for event handling.]'
  '--debug-libmv[enable debug messages from libmv library.]'
  '--debug-cycles[enable debug messages from Cycles.]'
  '--debug-memory[enable fully guarded memory allocation and debugging.]'
  '--debug-jobs[enable time profiling for background jobs.]'
  '--debug-python[enable debug messages for Python.]'
  '--debug-depsgraph[enable all debug messages from dependency graph.]'
  '--debug-depsgraph-eval[enable debug messages from dependency graph related on evaluation.]'
  '--debug-depsgraph-build[enable debug messages from dependency graph related on graph construction.]'
  '--debug-depsgraph-tag[enable debug messages from dependency graph related on tagging.]'
  '--debug-depsgraph-no-threads[switch dependency graph to a single threaded evaluation.]'
  '--debug-depsgraph-time[enable debug messages from dependency graph related on timing.]'
  '--debug-depsgraph-pretty[enable colors for dependency graph debug messages.]'
  '--debug-depsgraph-uuid[verify validness of session-wide identifiers assigned to ID datablocks.]'
  '--debug-ghost[enable debug messages for Ghost (Linux only).]'
  '--debug-wintab[enable debug messages for Wintab.]'
  '--debug-gpu[enable GPU debug context and information for OpenGL 4.3+.]'
  '--debug-gpu-force-workarounds[enable workarounds for typical GPU issues and disable all GPU extensions.]'
  '--debug-wm[enable debug messages for the window manager, shows all operators in search, shows keymap errors.]'
  '--debug-all[enable all debug messages.]'
  '--debug-io[enable debug messages for I/O (Collada, ...).]'
  '--debug-fpe[enable floating-point exceptions.]'
  '--debug-exit-on-error[immediately exit when internal errors are detected.]'
  '--disable-crash-handler[disable the crash handler.]'
  '--disable-abort-handler[disable the abort handler.]'
  '--verbose[set the logging verbosity level for debug messages that support it.]'
  '--open-last[open the most recently opened blend file, instead of the default startup file.]'
  '--app-template[set the application template (matching the directory name), use default for none.]'
  '--factory-startup[skip reading the BLENDER_STARTUP_FILE in the users home directory.]'
  '--enable-event-simulate[enable event simulation testing feature bpy.types.Window.event_simulate.]'
  '--env-system-datafiles[set the BLENDER_SYSTEM_DATAFILES environment variable.]'
  '--env-system-scripts[set the BLENDER_SYSTEM_SCRIPTS environment variable.]'
  '--env-system-python[set the BLENDER_SYSTEM_PYTHON environment variable.]'
  '-noaudio[force sound system to None.]'
  '-setaudio[force sound system to a specific device.]'
  {-h,--help}'[print this help text and exit.]'
  '-R[register blend-file extension, then exit (Windows only).]'
  '-r[silently register blend-file extension, then exit (Windows only).]'
  {-v,--version}'[print Blender version and exit.]'
  '--debug-freestyle[enable debug messages for Freestyle.]'
  '*:filename:_files'
)

_arguments -s $arguments
