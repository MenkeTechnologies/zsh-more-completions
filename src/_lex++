#compdef lex++

local arguments

arguments=(
  {-Ca,--align}'[trade off larger tables for better memory alignment]'
  {-Ce,--ecs}'[construct equivalence classes]'
  '-Cf[do not compress tables; use -f representation]'
  '-CF[do not compress tables; use -F representation]'
  {-Cm,--meta-ecs}'[construct meta-equivalence classes]'
  {-Cr,--read}'[use read() instead of stdio for scanner input]'
  {-f,--full}'[generate fast, large scanner. Same as -Cfr]'
  {-F,--fast}'[use alternate table representation. Same as -CFr]'
  '-Cem[default compression (same as --ecs --meta-ecs)]'
  {-d,--debug}'[enable debug mode in scanner]'
  {-b,--backup}'[write backing-up information to lex.backup]'
  {-p,--perf-report}'[write performance report to stderr]'
  {-s,--nodefault}'[suppress default rule to ECHO unmatched text]'
  {-T,--trace}'[lex++ should run in trace mode]'
  {-w,--nowarn}'[do not generate warnings]'
  {-v,--verbose}'[write summary of scanner statistics to stdout]'
  {-o,--outfile}'[specify output filename]'
  {-S,--skel}'[specify skeleton file]'
  {-t,--stdout}'[write scanner on stdout instead of lex.yy.cc]'
  '--yyclass[name of C++ class]'
  '--header-file[create a C header file in addition to the scanner]'
  '--tables-file[write tables to FILE]'
  {-7,--7bit}'[generate 7-bit scanner]'
  {-8,--8bit}'[generate 8-bit scanner]'
  {-B,--batch}'[generate batch scanner (opposite of -I)]'
  {-i,--case-insensitive}'[ignore case in patterns]'
  {-l,--lex-compat}'[maximal compatibility with original lex]'
  {-X,--posix-compat}'[maximal compatibility with POSIX lex]'
  {-I,--interactive}'[generate interactive scanner (opposite of -B)]'
  '--yylineno[track line count in yylineno]'
  '-Dmacro[#define macro defn (default defn is 1)]'
  {-L,--noline}'[suppress #line directives in scanner]'
  {-P,--prefix}'[use STRING as prefix instead of "yy"]'
  {-R,--reentrant}'[generate a reentrant C scanner]'
  '--bison-bridge[scanner for bison pure parser.]'
  '--bison-locations[include yylloc support.]'
  '--stdinit[initialize yyin/yyout to stdin/stdout]'
  '--noansi-definitions[function definitions]'
  '--noansi-prototypes[empty parameter list in prototypes]'
  '--nounistd[do not include <unistd.h>]'
  '--noFUNCTION[do not generate a particular FUNCTION]'
  '-c[do-nothing POSIX option]'
  '-n[do-nothing POSIX option]'
  '(- * :)'{-h,--help}'[produce this help message]'
  {-V,--version}'[report lex++ version]'
  '*:filename:_files'
)

_arguments -s $arguments
