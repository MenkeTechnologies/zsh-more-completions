#compdef ocamlbuild.native

local arguments

arguments=(
  '-version[display the version]'
  '--version[same as -version]'
  '-vnum[display the version number]'
  '--vnum[same as -vnum]'
  '-quiet[make as quiet as possible]'
  '-verbose[set the verbosity level on a scale from 0 to 8 (included)]'
  '-documentation[show rules and flags]'
  '-log[set log file]'
  '-no-log[no log file]'
  '-clean[remove build directory and other files, then exit]'
  '-r[traverse directories by default (true: traverse)]'
  '-I[add to include directories]'
  '-Is[...> (same as above, but accepts a (comma or blank)-separated list)]'
  '-X[directory to ignore]'
  '-Xs[...> (idem)]'
  '-lib[link to this ocaml library]'
  '-libs[...> (idem)]'
  '-mod[link to this ocaml module]'
  '-mods[...> (idem)]'
  '-pkg[link to this ocaml findlib package]'
  '-pkgs[...> (idem)]'
  '-package[(idem)]'
  '-syntax[specify syntax using ocamlfind]'
  '-lflag[add to ocamlc link flags]'
  '-lflags[...> (idem)]'
  '-cflag[add to ocamlc compile flags]'
  '-cflags[...> (idem)]'
  '-docflag[add to ocamldoc flags]'
  '-docflags[...> (idem)]'
  '-yaccflag[add to ocamlyacc flags]'
  '-yaccflags[...> (idem)]'
  '-lexflag[add to ocamllex flags]'
  '-lexflags[...> (idem)]'
  '-ppflag[add to ocaml preprocessing flags]'
  '-pp[...> (idem)]'
  '-tag[add to default tags]'
  '-tags[...> (idem)]'
  '-plugin-tag[use this tag when compiling the myocamlbuild.ml plugin]'
  '-plugin-tags[...> (idem)]'
  '-tag-line[use this line of tags (as in _tags)]'
  '-show-tags[show tags that applies on that pathname]'
  '-ignore[...> Dont try to build these modules]'
  '-no-links[dont make links of produced final targets]'
  '-no-skip[dont skip modules that are requested by ocamldep but cannot be built]'
  '-no-hygiene[dont apply sanity-check rules]'
  '-no-plugin[dont build myocamlbuild.ml]'
  '-no-stdlib[dont ignore stdlib modules]'
  '-dont-catch-errors[dont catch and display exceptions (useful to display the call stack)]'
  '-just-plugin[just build myocamlbuild.ml]'
  '-byte-plugin[dont use a native plugin but bytecode]'
  '-plugin-option[use the option only when plugin is run]'
  '-sanitization-script[change the file name for the generated sanitization script]'
  '-no-sanitize[do not generate sanitization script]'
  '-nothing-should-be-rebuilt[fail if something needs to be rebuilt]'
  '-classic-display[display executed commands the old-fashioned way]'
  '-use-menhir[use menhir instead of ocamlyacc]'
  '-use-jocaml[use jocaml compilers instead of ocaml ones]'
  '-use-ocamlfind[use the ocamlfind wrapper instead of using Findlib directly to determine command-line arguments. Use -no-ocamlfind to disable. Implies -plugin-use-ocamlfind.]'
  '-no-ocamlfind[dont use ocamlfind. Implies -plugin-no-ocamlfind.]'
  '-plugin-use-ocamlfind[use the ocamlfind wrapper for building myocamlbuild.ml]'
  '-plugin-no-ocamlfind[dont use ocamlfind for building myocamlbuild.ml]'
  '-toolchain[set the Findlib toolchain to use. The default toolchain is always used for building myocamlbuild.ml.]'
  '-j[allow N jobs at once (0 for unlimited)]'
  '-build-dir[set build directory (implies no-links)]'
  '-install-lib-dir[set the install library directory]'
  '-install-bin-dir[set the install binary directory]'
  '-where[display the install library directory]'
  '-which[display path to the tool command]'
  '-ocamlc[set the OCaml bytecode compiler]'
  '-plugin-ocamlc[set the OCaml bytecode compiler used when building myocamlbuild.ml (only)]'
  '-ocamlopt[set the OCaml native compiler]'
  '-plugin-ocamlopt[set the OCaml native compiler used when building myocamlbuild.ml (only)]'
  '-ocamldep[set the OCaml dependency tool]'
  '-ocamldoc[set the OCaml documentation generator]'
  '-ocamlyacc[set the ocamlyacc tool]'
  '-menhir[set the menhir tool (use it after -use-menhir)]'
  '-ocamllex[set the ocamllex tool]'
  '-ocamlmklib[set the ocamlmklib tool]'
  '-ocamlmktop[set the ocamlmktop tool]'
  '-ocamlrun[set the ocamlrun tool]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
