#compdef swig

local arguments

arguments=(
  '-allegrocl[Generate ALLEGROCL wrappers]'
  '-chicken[Generate CHICKEN wrappers]'
  '-clisp[Generate CLISP wrappers]'
  '-cffi[Generate CFFI wrappers]'
  '-csharp[Generate C# wrappers]'
  '-d[Generate D wrappers]'
  '-go[Generate Go wrappers]'
  '-guile[Generate Guile wrappers]'
  '-java[Generate Java wrappers]'
  '-javascript[Generate Javascript wrappers]'
  '-lua[Generate Lua wrappers]'
  '-modula3[Generate Modula 3 wrappers]'
  '-mzscheme[Generate Mzscheme wrappers]'
  '-ocaml[Generate Ocaml wrappers]'
  '-octave[Generate Octave wrappers]'
  '-perl[Generate Perl wrappers]'
  '-php5[Generate PHP5 wrappers]'
  '-php7[Generate PHP7 wrappers]'
  '-pike[Generate Pike wrappers]'
  '-python[Generate Python wrappers]'
  '-r[Generate R (aka GNU S) wrappers]'
  '-ruby[Generate Ruby wrappers]'
  '-scilab[Generate Scilab wrappers]'
  '-sexp[Generate Lisp S-Expressions wrappers]'
  '-tcl[Generate Tcl wrappers]'
  '-uffi[Generate Common Lisp / UFFI wrappers]'
  '-xml[Generate XML wrappers]'
  '-addextern[Add extra extern declarations]'
  '-c[++ - Enable C++ processing]'
  '-co[Check <file> out of the SWIG library]'
  '-copyctor[Automatically generate copy constructors wherever possible]'
  '-cpperraswarn[Treat the preprocessor #error statement as #warning (default)]'
  '-cppext[Change file extension of generated C++ files to <ext>]'
  '-copyright[Display copyright notices]'
  '-debug-classes[Display information about the classes found in the interface]'
  '-debug-module[display module parse tree at stages 1-4, <n> is a csv list of stages]'
  '-debug-symtabs[Display symbol tables information]'
  '-debug-symbols[Display target language symbols in the symbol tables]'
  '-debug-csymbols[Display C symbols in the symbol tables]'
  '-debug-lsymbols[Display target language layer symbols]'
  '-debug-tags[Display information about the tags found in the interface]'
  '-debug-template[Display information for debugging templates]'
  '-debug-top[Display entire parse tree at stages 1-4, <n> is a csv list of stages]'
  '-debug-typedef[Display information about the types and typedefs in the interface]'
  '-debug-typemap[Display typemap debugging information]'
  '-debug-tmsearch[Display typemap search debugging information]'
  '-debug-tmused[Display typemaps used debugging information]'
  '-directors[Turn on director mode for all the classes, mainly for testing]'
  '-dirprot[Turn on wrapping of protected members for director classes (default)]'
  '-D[Define a symbol <symbol> (for conditional compilation)]:symbol:'
  '-E[Preprocess only, does not generate wrapper code]'
  '-external-runtime[Export the SWIG runtime stack]'
  '-fakeversion[make SWIG fake the program version number to <v>]'
  '-fcompact[Compile in compact mode]'
  '-features[set global features, where <list> is a comma separated list of]'
  '-fastdispatch[Enable fast dispatch mode to produce faster overload dispatcher code]'
  '-Fmicrosoft[Display error/warning messages in Microsoft format]'
  '-Fstandard[Display error/warning messages in commonly used format]'
  '-fvirtual[Compile in virtual elimination mode]'
  '-help[This output]'
  '-I-[Dont search the current directory]'
  '-I[Look for SWIG files in directory <dir>]:dir:'
  '-ignoremissing[Ignore missing include files]'
  '-importall[Follow all #include statements as imports]'
  '-includeall[Follow all #include statements]'
  '-l[Include SWIG library file <ifile>]:ifile:'
  '-macroerrors[Report errors inside macros]'
  '-makedefault[Create default constructors/destructors (the default)]'
  '-M[List all dependencies]'
  '-MD[Is equivalent to `-M -MF <file>, except `-E is not implied]'
  '-MF[Generate dependencies into <file> and continue generating wrappers]'
  '-MM[List dependencies, but omit files in SWIG library]'
  '-MMD[Like `-MD, but omit files in SWIG library]'
  '-module[Set module name to <name>]'
  '-MP[Generate phony targets for all dependencies]'
  '-MT[Set the target of the rule emitted by dependency generation]'
  '-nocontract[Turn off contract checking]'
  '-nocpperraswarn[Do not treat the preprocessor #error statement as #warning]'
  '-nodefault[Do not generate default constructors nor default destructors]'
  '-nodefaultctor[Do not generate implicit default constructors]'
  '-nodefaultdtor[Do not generate implicit default destructors]'
  '-nodirprot[Do not wrap director protected members]'
  '-noexcept[Do not wrap exception specifiers]'
  '-nofastdispatch[Disable fast dispatch mode (default)]'
  '-nopreprocess[Skip the preprocessor step]'
  '-notemplatereduce[Disable reduction of the typedefs in templates]'
  '-O[Enable the optimization options:]'
  {-fastdispatch,-fvirtual}'[]'
  '-o[Set name of C/C++ output file to <outfile>]'
  '-oh[Set name of C++ output header file for directors to <headfile>]'
  '-outcurrentdir[Set default output dir to current dir instead of input files path]'
  '-outdir[Set language specific files output directory to <dir>]'
  '-pcreversion[Display PCRE version information]'
  '-small[Compile in virtual elimination & compact mode]'
  '-swiglib[Report location of SWIG library and exit]'
  '-templatereduce[Reduce all the typedefs in templates]'
  '-v[Run in verbose mode]'
  '-version[Display SWIG version number]'
  '-Wall[Remove all warning suppression, also implies -Wextra]'
  '-Wallkw[Enable keyword warnings for all the supported languages]'
  '-Werror[Treat warnings as errors]'
  '-Wextra[Adds the following additional warnings: 202,309,403,512,321,322]'
  '-w[Suppress/add warning messages, eg -w401,+321 - see Warnings.html]:list:'
  '-xmlout[Write XML version of the parse tree to <file> after normal processing]'
  '-itcl[Enable ITcl support]'
  '-nosafe[Leave out SafeInit module function.]'
  '-prefix[Set a prefix <name> to be prepended to all names]'
  '-namespace[Build module into a Tcl 8 namespace]'
  '-pkgversion[Set package version]'
  '*:filename:_files'
)

_arguments -s $arguments
