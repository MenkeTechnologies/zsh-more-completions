#compdef xar

local arguments

arguments=(
  '-c[creates an archive]'
  '-x[extracts an archive]'
  '-t[lists an archive]'
  '-f[specifies an archive to operate on \[REQUIRED!\]]'
  '-v[print filenames as they are archived]'
  '-C[on extract, chdir to this location]'
  '-n[provides a name for a subdocument]'
  '-s[on extract, specifies the file to extract]'
  '-l[on archival, stay on the local device.]'
  '-p[on extract, set ownership based on symbolic]'
  '-P[on extract, set ownership based on uid/gid.]'
  '--toc-cksum[specifies the hashing algorithm to use for]'
  '--file-cksum[specifies the hashing algorithm to use for]'
  '--dump-toc[has xar dump the xml header into the]'
  '--dump-header[prints out the xar binary header information]'
  '--compression[specifies the compression type to use.]'
  '-a[synonym for "--compression=lzma"]'
  '-j[synonym for "--compression=bzip2"]'
  '-z[synonym for "--compression=gzip"]'
  '--compression-args[specifies arguments to be passed]'
  '--compress-heap[compress entire heap instead of individual files.]'
  '--list-subdocs[list the subdocuments in the xml header]'
  '--extract-subdoc[extracts the specified subdocument]'
  '--exclude[POSIX regular expression of files to]'
  '--rsize[specifies the size of the buffer used]'
  '--coalesce-heap[when archived files are identical, only store one copy]'
  '--link-same[hardlink identical files]'
  '--no-compress[POSIX regular expression of files]'
  '--prop-include[file properties to include in archive]'
  '--prop-exclude[file properties to exclude in archive]'
  '--distribution[only includes a subset of file properties]'
  '--keep-existing[do not overwrite existing files while extracting]'
  '-k[synonym for --keep-existing]'
  '--keep-setuid[preserve the suid/sgid bits when extracting]'
  '--version[print xars version number]'
  '*:filename:_files'
)

_arguments -s $arguments
