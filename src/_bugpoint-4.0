#compdef bugpoint-4.0

local arguments

arguments=(
  '-O1[Optimization level 1. Identical to opt -O1]'
  '-O2[Optimization level 2. Identical to opt -O2]'
  '-O3[Optimization level 3. Identical to opt -O3]'
  '-Os[Like -O2 with extra optimizations for size. Similar to clang -Os]'
  '-Xlinker[Additional arguments to pass to the linker]'
  '-aarch64-neon-syntax[Choose style of NEON code to emit from AArch64 backend:]'
  '-abs-tolerance[Absolute error tolerated]'
  '-additional-so[Additional shared objects to load into executing programs]'
  '-amdgpu-dump-rtmd[Dump AMDGPU runtime metadata]'
  '-amdgpu-spill-sgpr-to-smem[Use scalar stores to spill SGPRs if supported by subtarget]'
  '-amdgpu-vgpr-index-mode[Use GPR indexing mode instead of movrel for vector indexing]'
  '-append-exit-code[Append the exit code to the output so it gets diffd too]'
  '-args[<program arguments>...]'
  '-arm-execute-only[-]'
  '-arm-implicit-it[Allow conditional instructions outdside of an IT block]'
  '-bounds-checking-single-trap[Use one trap block per function]'
  '-color[use colored syntax highlighting (default=autodetect)]'
  '-compile-command[Command to compile the bitcode (use with -compile-custom) (default: llc)]'
  '-cvp-dont-process-adds[-]'
  '-disable-block-extraction[Dont extract blocks when searching for miscompilations]'
  '-disable-dce[Do not use the -dce pass to reduce testcases]'
  '-disable-global-remove[Do not remove global variables]'
  '-disable-loop-extraction[Dont extract loops when searching for miscompilations]'
  '-disable-namedmd-remove[Do not remove global named metadata]'
  '-disable-pass-list-reduction[Skip pass list reduction steps]'
  '-disable-simplifycfg[Do not use the -simplifycfg pass to reduce testcases]'
  '-disable-spill-fusing[Disable fusing of spill code into instructions]'
  '-disable-strip-debug-types[Do not strip debug type info metadata]'
  '-disable-strip-debuginfo[Do not strip debug info metadata]'
  '-enable-implicit-null-checks[Fold null checks into faulting memory operations]'
  '-enable-load-pre[-]'
  '-enable-name-compression[Enable name string compression]'
  '-enable-objc-arc-opts[enable/disable all ARC Optimizations]'
  '-enable-scoped-noalias[-]'
  '-enable-tbaa[-]'
  '-enable-valgrind[Run optimizations through valgrind]'
  '-exec-command[Command to execute the bitcode (use with -run-custom) (default: simulate)]'
  '-exhaustive-register-search[Exhaustive Search for registers bypassing the depth and interference cutoffs of last chance recoloring]'
  '-expensive-combines[Enable expensive instruction combines]'
  '-filter-print-funcs[names> - Only print IR for functions whose name match this for all print-\[before|after\]\[-all\] options]'
  '-find-bugs[Run many different optimization sequences on program to find bugs]'
  '-gcc[The gcc binary to use.]'
  '-gcc-tool-args[<gcc-tool arguments>...]'
  '-gpsize[Global Pointer Addressing Size. The default size is 8.]'
  '-hash-based-counter-split[Rename counter variable of a comdat function based on cfg hash]'
  '-ignore-empty-index-file[Ignore an empty index file and perform non-ThinLTO compilation]'
  '-imp-null-check-page-size[The page size of the target in bytes]'
  '-imp-null-max-insts-to-consider[The max number of instructions to consider hoisting loads over (the algorithm is quadratic over this number)]'
  '-wholeprogramdevirt[Whole program devirtualization]'
  '-view-scops-only[Polly - View Scops of function (with no function bodies)]'
  '-view-scops[Polly - View Scops of function]'
  '-view-regions-only[View regions of function (with no function bodies)]'
  '-view-regions[View regions of function]'
  '-view-postdom-only[View postdominance tree of function (with no function bodies)]'
  '-view-postdom[View postdominance tree of function]'
  '-view-dom-only[View dominance tree of function (with no function bodies)]'
  '-view-dom[View dominance tree of function]'
  '-view-cfg-only[View CFG of function (with no function bodies)]'
  '-view-cfg[View CFG of function]'
  '-view-callgraph[View call graph]'
  '-verify[Module Verifier]'
  '-tti[Target Transform Information]'
  '-tsan[ThreadSanitizer: detects data races.]'
  '-tbaa[Type-Based Alias Analysis]'
  '-targetlibinfo[Target Library Information]'
  '-tailcallelim[Tail Call Elimination]'
  '-structurizecfg[Structurize the CFG]'
  '-strip-nonlinetable-debuginfo[Strip all debug info except linetables]'
  '-strip-nondebug[Strip all symbols, except dbg symbols, from a module]'
  '-strip-gc-relocates[Strip gc.relocates inserted through RewriteStatepointsForGC]'
  '-strip-debug-declare[Strip all llvm.dbg.declare intrinsics]'
  '-strip-dead-prototypes[Strip Unused Function Prototypes]'
  '-strip-dead-debug-info[Strip debug info for unused symbols]'
  '-strip[Strip all symbols from a module]'
  '-sroa[Scalar Replacement Of Aggregates]'
  '-speculative-execution[Speculatively execute instructions]'
  '-slsr[Straight line strength reduction]'
  '-slp-vectorizer[SLP Vectorizer]'
  '-sink[Code sinking]'
  '-simplifycfg[Simplify the CFG]'
  '-separate-const-offset-from-gep[Split GEPs to a variadic base and a constant offset for better CSE]'
  '-scoped-noalias[Scoped NoAlias Alias Analysis]'
  '-scev-aa[ScalarEvolution-based Alias Analysis]'
  '-sccp[Sparse Conditional Constant Propagation]'
  '-scalarizer[Scalarize vector operations]'
  '-scalar-evolution[Scalar Evolution Analysis]'
  '-sancov[SanitizerCoverage: TODO.ModulePass]'
  '-sample-profile[Sample Profile loader]'
  '-rpo-functionattrs[Deduce function attributes in RPO]'
  '-rewrite-statepoints-for-gc[Make relocations explicit at statepoints]'
  '-regions[Detect single entry single exit regions]'
  '-reg2mem[Demote all values to stack slots]'
  '-reassociate[Reassociate expressions]'
  '-prune-eh[Remove unused exception handling info]'
  '-profile-summary-info[Profile summary info]'
  '-print-module[Print module to stderr]'
  '-print-memoryssa[Memory SSA Printer]'
  '-print-memderefs[Memory Dereferenciblity of pointers in function]'
  '-print-memdeps[Print MemDeps of function]'
  '-print-function[Print function to stderr]'
  '-print-callgraph[Print a call graph]'
  '-print-bb[Print BB to stderr]'
  '-print-alias-sets[Alias Set Printer]'
  '-postdomtree[Post-Dominator Tree Construction]'
  '-polyhedral-info[Polly - Interface to polyhedral analysis engine]'
  '-polly-scops[Polly - Create polyhedral description of Scops]'
  '-polly-prepare[Polly - Prepare code for polly]'
  '-polly-opt-isl[Polly - Optimize schedule of SCoP]'
  '-polly-import-jscop[Polly - Import Scops from JSON (Reads a .jscop file for each Scop)]'
  '-polly-function-scops[Polly - Create polyhedral description of all Scops of a function]'
  '-polly-function-dependences[Polly - Calculate dependences for all the SCoPs of a function]'
  '-polly-flatten-schedule[Polly - Flatten schedule]'
  '-polly-export-jscop[Polly - Export Scops as JSON (Writes a .jscop file for each Scop)]'
  '-polly-detect[Polly - Detect static control parts (SCoPs)]'
  '-polly-dependences[Polly - Calculate dependences]'
  '-polly-delicm[Polly - DeLICM/DePRE]'
  '-polly-dce[Polly - Remove dead iterations]'
  '-polly-codegen[Polly - Create LLVM-IR from SCoPs]'
  '-polly-cleanup[Polly - Cleanup after code generation]'
  '-polly-canonicalize[Polly - Run canonicalization passes]'
  '-polly-ast[Polly - Generate an AST from the SCoP (isl)]'
  '-place-safepoints[Place Safepoints]'
  '-place-backedge-safepoints-impl[Place Backedge Safepoints]'
  '-pgo-instr-use[Read PGO instrumentation profile.]'
  '-pgo-instr-gen[PGO instrumentation.]'
  '-pgo-icall-prom[Use PGO instrumentation profile to promote indirect calls to direct calls.]'
  '-partially-inline-libcalls[Partially inline calls to library functions]'
  '-partial-inliner[Partial Inliner]'
  '-pa-eval[Evaluate ProvenanceAnalysis on all pairs]'
  '-opt-remark-emitter[Optimization Remark Emitter]'
  '-objc-arc-expand[ObjC ARC expansion]'
  '-objc-arc-contract[ObjC ARC contraction]'
  '-objc-arc-apelim[ObjC ARC autorelease pool elimination]'
  '-objc-arc-aa[ObjC-ARC-Based Alias Analysis]'
  '-objc-arc[ObjC ARC optimization]'
  '-newgvn[Global Value Numbering]'
  '-nary-reassociate[Nary reassociation]'
  '-name-anon-globals[Provide a name to nameless globals]'
  '-msan[MemorySanitizer: detects uninitialized reads.]'
  '-module-summary-analysis[Module Summary Analysis]'
  '-module-debuginfo[Decodes module-level debug info]'
  '-mldst-motion[MergedLoadStoreMotion]'
  '-metarenamer[Assign new names to everything]'
  '-mergereturn[Unify function exit nodes]'
  '-mergefunc[Merge Functions]'
  '-memoryssa[Memory SSA]'
  '-memdep[Memory Dependence Analysis]'
  '-memcpyopt[MemCpy Optimization]'
  '-mem2reg[Promote Memory to Register]'
  '-lowertypetests[Lower type metadata]'
  '-lowerswitch[Lower SwitchInsts to branches]'
  '-lowerinvoke[Lower invoke and unwind, for unwindless code generators]'
  '-loweratomic[Lower atomic intrinsics to non-atomic form]'
  '-lower-guard-intrinsic[Lower the guard intrinsic to normal control flow]'
  '-lower-expect[Lower expect Intrinsics]'
  '-loops[Natural Loop Information]'
  '-loop-versioning-licm[Loop Versioning For LICM]'
  '-loop-versioning[Loop Versioning]'
  '-loop-vectorize[Loop Vectorization]'
  '-loop-unswitch[Unswitch loops]'
  '-loop-unroll[Unroll loops]'
  '-loop-sink[Loop Sink]'
  '-loop-simplifycfg[Simplify loop CFG]'
  '-loop-simplify[Canonicalize natural loops]'
  '-loop-rotate[Rotate Loops]'
  '-loop-reroll[Reroll loops]'
  '-loop-reduce[Loop Strength Reduction]'
  '-loop-load-elim[Loop Load Elimination]'
  '-loop-interchange[Interchanges loops for cache reuse]'
  '-loop-instsimplify[Simplify instructions in loops]'
  '-loop-idiom[Recognize loop idioms]'
  '-loop-extract-single[Extract at most one loop into a new function]'
  '-loop-extract[Extract loops into new functions]'
  '-loop-distribute[Loop Distribution]'
  '-loop-deletion[Delete dead loops]'
  '-loop-data-prefetch[Loop Data Prefetch]'
  '-loop-accesses[Loop Access Analysis]'
  '-load-store-vectorizer[Vectorize load and store instructions]'
  '-load-combine[Combine Adjacent Loads]'
  '-lint[Statically lint-checks LLVM IR]'
  '-licm[Loop Invariant Code Motion]'
  '-libcalls-shrinkwrap[Conditionally eliminate dead library calls]'
  '-lcssa-verification[LCSSA Verifier]'
  '-lcssa[Loop-Closed SSA Form Pass]'
  '-lazy-value-info[Lazy Value Information Analysis]'
  '-lazy-branch-prob[Lazy Branch Probability Analysis]'
  '-lazy-block-freq[Lazy Block Frequency Analysis]'
  '-jump-threading[Jump Threading]'
  '-iv-users[Induction Variable Users]'
  '-irce[Inductive range check elimination]'
  '-ipsccp[Interprocedural Sparse Conditional Constant Propagation]'
  '-ipconstprop[Interprocedural constant propagation]'
  '-intervals[Interval Partition Construction]'
  '-internalize[Internalize Global Symbols]'
  '-instsimplify[Remove redundant instructions]'
  '-instrprof[Frontend instrumentation-based coverage lowering.]'
  '-instnamer[Assign names to anonymous instructions]'
  '-instcount[Counts the various types of Instructions]'
  '-instcombine[Combine redundant instructions]'
  '-insert-gcov-profiling[Insert instrumentation for GCOV profiling]'
  '-inline[Function Integration/Inlining]'
  '-inferattrs[Infer set function attributes]'
  '-indvars[Induction Variable Simplification]'
  '-gvn-hoist[Early GVN Hoisting of Expressions]'
  '-gvn[Global Value Numbering]'
  '-guard-widening[Widen guards]'
  '-globalsplit[Global splitter]'
  '-globals-aa[Globals Alias Analysis]'
  '-globalopt[Global Variable Optimizer]'
  '-globaldce[Dead Global Elimination]'
  '-functionattrs[Deduce function attributes]'
  '-function-import[Summary Based Function Import]'
  '-forceattrs[Force set function attributes]'
  '-float2int[Float to int]'
  '-flattencfg[Flatten the CFG]'
  '-extract-blocks[Extract Basic Blocks From Module (for bugpoint use)]'
  '-external-aa[External Alias Analysis]'
  '-esan[EfficiencySanitizer: finds performance issues.]'
  '-elim-avail-extern[Eliminate Available Externally Globals]'
  '-early-cse-memssa[Early CSE w/ MemorySSA]'
  '-early-cse[Early CSE]'
  '-dse[Dead Store Elimination]'
  '-dot-scops-only[Polly - Print Scops of function (with no function bodies)]'
  '-dot-scops[Polly - Print Scops of function]'
  '-dot-regions-only[Print regions of function to dot file (with no function bodies)]'
  '-dot-regions[Print regions of function to dot file]'
  '-dot-postdom-only[Print postdominance tree of function to dot file (with no function bodies)]'
  '-dot-postdom[Print postdominance tree of function to dot file]'
  '-dot-dom-only[Print dominance tree of function to dot file (with no function bodies)]'
  '-dot-dom[Print dominance tree of function to dot file]'
  '-dot-cfg-only[Print CFG of function to dot file (with no function bodies)]'
  '-dot-cfg[Print CFG of function to dot file]'
  '-dot-callgraph[Print call graph to dot file]'
  '-domtree[Dominator Tree Construction]'
  '-domfrontier[Dominance Frontier Construction]'
  '-divergence[Divergence Analysis]'
  '-die[Dead Instruction Elimination]'
  '-dfsan[DataFlowSanitizer: dynamic data flow analysis.]'
  '-demanded-bits[Demanded bits analysis]'
  '-delinearize[Delinearization]'
  '-deadarghaX0r[Dead Argument Hacking (BUGPOINT USE ONLY; DO NOT USE)]'
  '-deadargelim[Dead Argument Elimination]'
  '-dce[Dead Code Elimination]'
  '-da[Dependence Analysis]'
  '-cross-dso-cfi[Cross-DSO CFI]'
  '-cost-model[Cost Model Analysis]'
  '-correlated-propagation[Value Propagation]'
  '-constprop[Simple constant propagation]'
  '-constmerge[Merge Duplicate Global Constants]'
  '-consthoist[Constant Hoisting]'
  '-cfl-steens-aa[Unification-Based CFL Alias Analysis]'
  '-cfl-anders-aa[Inclusion-Based CFL Alias Analysis]'
  '-break-crit-edges[Break critical edges in CFG]'
  '-branch-prob[Branch Probability Analysis]'
  '-bounds-checking[Run-time bounds checking]'
  '-block-freq[Block Frequency Analysis]'
  '-bdce[Bit-Tracking Dead Code Elimination]'
  '-bb-vectorize[Basic-Block Vectorization]'
  '-basiccg[CallGraph Construction]'
  '-basicaa[Basic Alias Analysis (stateless AA impl)]'
  '-barrier[A No-Op Barrier Pass]'
  '-assumption-cache-tracker[Assumption Cache Tracker]'
  '-asan-module[AddressSanitizer: detects use-after-free and out-of-bounds bugs.ModulePass]'
  '-asan[AddressSanitizer: detects use-after-free and out-of-bounds bugs.]'
  '-argpromotion[Promote by reference arguments to scalars]'
  '-always-inline[Inliner for always_inline functions]'
  '-alignment-from-assumptions[Alignment from assumptions]'
  '-add-discriminators[Add DWARF path discriminators]'
  '-adce[Aggressive Dead Code Elimination]'
  '-aa-eval[Exhaustive Alias Analysis Precision Evaluator]'
  '-aa[Function Alias Analysis Results]'
  '-input[Filename to pipe in as stdin (default: /dev/null)]'
  '-internalize-public-api-file[A file containing list of symbol names to preserve]'
  '-internalize-public-api-list[A list of symbol names to preserve]'
  '-join-liveintervals[Coalesce copies (default=true)]'
  '-keep-main[Force function reduction to keep main]'
  '-limit-float-precision[Generate low-precision inline sequences for some float libcalls]'
  '-load[Load the specified plugin]'
  '-lto-pass-remarks-output[Output filename for pass remarks]'
  '-merror-missing-parenthesis[Error for missing parenthesis around predicate registers]'
  '-merror-noncontigious-register[Error for register names that arent contigious]'
  '-mfuture-regs[Enable future registers]'
  '-mips-compact-branches[MIPS Specific: Compact branch policy.]'
  '-mips16-constant-islands[Enable mips16 constant islands.]'
  '-mips16-hard-float[Enable mips16 hard float.]'
  '-mlimit[Maximum amount of memory to use. 0 disables check. Defaults to 400MB (800MB under valgrind).]'
  '-mno-compound[Disable looking for compound instructions for Hexagon]'
  '-mno-fixup[Disable fixing up resolved relocations for Hexagon]'
  '-mno-ldc1-sdc1[Expand double precision loads and stores to their single precision counterparts]'
  '-mno-pairing[Disable looking for duplex instructions for Hexagon]'
  '-mtriple[Override target triple for module]'
  '-mwarn-missing-parenthesis[Warn for missing parenthesis around predicate registers]'
  '-mwarn-noncontigious-register[Warn for register names that arent contigious]'
  '-mwarn-sign-mismatch[Warn for mismatching a signed and unsigned value]'
  '-no-discriminators[Disable generation of discriminator information.]'
  '-nvptx-sched4reg[NVPTX Specific: schedule for register pressue]'
  '-opt-args[<opt arguments>...]'
  '-opt-command[Path to opt. (default: search path for opt.)]'
  '-output[Specify a reference program output (for miscompilation detection)]'
  '-output-prefix[Prefix to use for outputs (default: bugpoint)]'
  '-polly-dce-precise-steps[The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.]'
  '-print-after-all[Print IR after each pass]'
  '-print-before-all[Print IR before each pass]'
  '-print-machineinstrs[Print machine instrs]'
  '-r600-ir-structurize[Use StructurizeCFG IR pass]'
  '-rdf-dump[-]'
  '-rdf-limit[-]'
  '-regalloc[Register allocator to use]'
  '-rel-tolerance[Relative error tolerated]'
  '-remote-client[Remote execution client (rsh/ssh)]'
  '-remote-extra-options[Remote execution (rsh/ssh) extra options]'
  '-remote-host[Remote execution (rsh/ssh) host]'
  '-remote-port[Remote execution (rsh/ssh) port]'
  '-remote-user[Remote execution (rsh/ssh) user id]'
  '-replace-funcs-with-null[When stubbing functions, replace all uses will null]'
  '-rewrite-map-file[Symbol Rewrite Map]'
  '-rng-seed[Seed for the random number generator]'
  '-auto[Use best guess]'
  '-run-int[Execute with the interpreter]'
  '-run-jit[Execute with JIT]'
  '-run-llc[Compile with LLC]'
  '-run-llc-ia[Compile with LLC with integrated assembler]'
  '-llc-safe[Use LLC for all]'
  '-compile-custom[Use -compile-command to define a command to compile the bitcode. Useful to avoid linking.]'
  '-run-custom[Use -exec-command to define a command to execute the bitcode. Useful for cross-compilation.]'
  '-safe-auto[Use best guess]'
  '-safe-run-llc[Compile with LLC]'
  '-safe-run-custom[Use -exec-command to define a command to execute the bitcode. Useful for cross-compilation.]'
  '-safe-path[Specify the path to the "safe" backend program]'
  '-safe-tool-args[<safe-tool arguments>...]'
  '-sample-profile-check-record-coverage[Emit a warning if less than N% of records in the input profile are matched to the IR.]'
  '-sample-profile-check-sample-coverage[Emit a warning if less than N% of samples in the input profile are matched to the IR.]'
  '-sample-profile-inline-hot-threshold[Inlined functions that account for more than N% of all samples collected in the parent function, will be inlined again.]'
  '-sample-profile-max-propagate-iterations[Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.]'
  '-save-temps[Save temporary files]'
  '-silence-passes[Suppress output of running passes (both stdout and stderr)]'
  '-stackmap-version[Specify the stackmap encoding version (default = 2)]'
  '-static-func-full-module-prefix[Use full module build paths in the profile counter names for static functions.]'
  '-stats[Enable statistics output from program (available with Asserts)]'
  '-stats-json[Display statistics as json data]'
  '-std-link-opts[Include the standard link time optimizations]'
  '-summary-file[The summary file to use for function importing.]'
  '-threads[-]'
  '-time-passes[Time each pass, printing elapsed time for each on exit]'
  '-timeout[Number of seconds program is allowed to run before it is killed (default is 300s), 0 disables timeout]'
  '-tool-args[<tool arguments>...]'
  '-verbose-errors[Print the output of crashing program]'
  '-verify-debug-info[-]'
  '-verify-dom-info[Verify dominator info (time consuming)]'
  '-verify-loop-info[Verify loop info (time consuming)]'
  '-verify-loop-lcssa[Verify loop lcssa form (time consuming)]'
  '-verify-machine-dom-info[Verify machine dominator info (time consuming)]'
  '-verify-regalloc[Verify during register allocation]'
  '-verify-region-info[Verify region info (time consuming)]'
  '-verify-scev[Verify ScalarEvolutions backedge taken counts (slow)]'
  '-verify-scev-maps[Verify no dangling value in ScalarEvolutions ExprValueMap (slow)]'
  '-vp-counters-per-site[The average number of profile counters allocated per value profiling site.]'
  '-vp-static-alloc[Do static counter allocation for value profiler]'
  '-x86-asm-syntax[Choose style of code to emit from X86 backend:]'
  '-help[Display available options (-help-hidden for more)]'
  '-help-list[Display list of available options (-help-list-hidden for more)]'
  '-version[Display the version of this program]'
  '-polly[Enable the polly optimizer (only at -O3)]'
  '-polly-2nd-level-tiling[Enable a 2nd level loop of loop tiling]'
  '-polly-context[parameter set> - Provide additional constraints on the context parameters]'
  '-polly-on-isl-error-abort[Abort if an isl error is encountered]'
  '-polly-only-func[Only run on functions that contain a certain string]'
  '-polly-only-region[Only run on certain regions (The provided identifier must appear in the name of the regions entry block]'
  '-polly-only-scop-detection[Only run scop detection, but no other optimizations]'
  '-polly-optimized-scops[Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree]'
  '-polly-parallel[Generate thread parallel code (isl codegen only)]'
  '-polly-parallel-force[Force generation of thread parallel code ignoring any cost model]'
  '-polly-pattern-matching-based-opts[Perform optimizations based on pattern matching]'
  '-polly-process-unprofitable[Process scops that are unlikely to benefit from Polly optimizations.]'
  '-polly-register-tiling[Enable register tiling]'
  '-polly-report[Print information about the activities of Polly]'
  '-polly-show[Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)]'
  '-polly-show-only[Highlight the code regions that will be optimized in a (CFG only BBs)]'
  '-polly-target[The hardware to target]'
  '-polly-tiling[Enable loop tiling]'
  '-polly-vectorizer[Select the vectorization strategy]'
  '*:filename:_files'
)

_arguments -s $arguments
