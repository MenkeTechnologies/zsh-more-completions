#compdef pth-curl

local arguments

arguments=(
  '--anyauth[pick "any" authentication method (H)]'
  {-a,--append}'[append to target file when uploading (F/SFTP)]'
  '--basic[use HTTP Basic Authentication (H)]'
  '--cacert[CA certificate to verify peer against (SSL)]'
  '--capath[CA directory to verify peer against (SSL)]'
  {-E,--cert}'[client certificate file and password (SSL)]'
  '--cert-status[verify the status of the server certificate (SSL)]'
  '--cert-type[certificate file type (DER/PEM/ENG) (SSL)]'
  '--ciphers[SSL ciphers to use (SSL)]'
  '--compressed[request compressed response (using deflate or gzip)]'
  {-K,--config}'[read config from FILE]'
  '--connect-timeout[maximum time allowed for connection]'
  {-C,--continue-at}'[resumed transfer OFFSET]'
  {-b,--cookie}'[/FILE Read cookies from STRING/FILE (H)]'
  {-c,--cookie-jar}'[write cookies to FILE after operation (H)]'
  '--create-dirs[create necessary local directory hierarchy]'
  '--crlf[convert LF to CRLF in upload]'
  '--crlfile[get a CRL list in PEM format from the given file]'
  {-d,--data}'[HTTP POST data (H)]'
  '--data-raw[HTTP POST data, @ allowed (H)]'
  '--data-ascii[HTTP POST ASCII data (H)]'
  '--data-binary[HTTP POST binary data (H)]'
  '--data-urlencode[HTTP POST data url encoded (H)]'
  '--delegation[GSS-API delegation permission]'
  '--digest[use HTTP Digest Authentication (H)]'
  '--disable-eprt[inhibit using EPRT or LPRT (F)]'
  '--disable-epsv[inhibit using EPSV (F)]'
  '--dns-servers[DNS server addrs to use: 1.1.1.1;2.2.2.2]'
  '--dns-interface[interface to use for DNS requests]'
  '--dns-ipv4-addr[IPv4 address to use for DNS requests, dot notation]'
  '--dns-ipv6-addr[IPv6 address to use for DNS requests, dot notation]'
  {-D,--dump-header}'[write the headers to FILE]'
  '--egd-file[EGD socket path for random data (SSL)]'
  '--engine[crypto engine (use "--engine list" for list) (SSL)]'
  '--expect100-timeout[how long to wait for 100-continue (H)]'
  {-f,--fail}'[fail silently (no output at all) on HTTP errors (H)]'
  '--false-start[enable TLS False Start.]'
  {-F,--form}'[specify HTTP multipart POST data (H)]'
  '--form-string[specify HTTP multipart POST data (H)]'
  '--ftp-account[account data string (F)]'
  '--ftp-alternative-to-user[string to replace "USER \[name\]" (F)]'
  '--ftp-create-dirs[create the remote dirs if not present (F)]'
  '--ftp-method[/NOCWD/SINGLECWD\] Control CWD usage (F)]'
  '--ftp-pasv[use PASV/EPSV instead of PORT (F)]'
  {-P,--ftp-port}'[use PORT with given address instead of PASV (F)]'
  '--ftp-skip-pasv-ip[skip the IP address for PASV (F)]'
  '--ftp-pret[send PRET before PASV (for drftpd) (F)]'
  '--ftp-ssl-ccc[send CCC after authenticating (F)]'
  '--ftp-ssl-ccc-mode[/PASSIVE Set CCC mode (F)]'
  '--ftp-ssl-control[require SSL/TLS for FTP login, clear for transfer (F)]'
  {-G,--get}'[send the -d data with a HTTP GET (H)]'
  {-g,--globoff}'[disable URL sequences and ranges using {} and \[\]]'
  {-H,--header}'[pass custom header LINE to server (H)]'
  {-I,--head}'[show document info only]'
  '(- * :)'{-h,--help}'[this help text]'
  '--hostpubmd5[5 Hex-encoded MD5 string of the host public key. (SSH)]'
  {-0,--http1}'[.0 Use HTTP 1.0 (H)]'
  '--http1[.1 Use HTTP 1.1 (H)]'
  '--http2[use HTTP 2 (H)]'
  '--ignore-content-length[ignore the HTTP Content-Length header]'
  {-i,--include}'[include protocol headers in the output (H/F)]'
  {-k,--insecure}'[allow connections to SSL sites without certs (H)]'
  '--interface[use network INTERFACE (or address)]'
  {-4,--ipv4}'[resolve name to IPv4 address]'
  {-6,--ipv6}'[resolve name to IPv6 address]'
  {-j,--junk-session-cookies}'[ignore session cookies read from file (H)]'
  '--keepalive-time[wait SECONDS between keepalive probes]'
  '--key[private key file name (SSL/SSH)]'
  '--key-type[private key file type (DER/PEM/ENG) (SSL)]'
  '--krb[enable Kerberos with security LEVEL (F)]'
  '--libcurl[dump libcurl equivalent code of this command line]'
  '--limit-rate[limit transfer speed to RATE]'
  {-l,--list-only}'[list only mode (F/POP3)]'
  '--local-port[force use of RANGE for local port numbers]'
  {-L,--location}'[follow redirects (H)]'
  '--location-trusted[like --location, and send auth to other hosts (H)]'
  '--login-options[server login options (IMAP, POP3, SMTP)]'
  {-M,--manual}'[display the full manual]'
  '--mail-from[mail from this address (SMTP)]'
  '--mail-rcpt[mail to this/these addresses (SMTP)]'
  '--mail-auth[originator address of the original email (SMTP)]'
  '--max-filesize[maximum file size to download (H/F)]'
  '--max-redirs[maximum number of redirects allowed (H)]'
  {-m,--max-time}'[maximum time allowed for the transfer]'
  '--metalink[process given URLs as metalink XML file]'
  '--negotiate[use HTTP Negotiate (SPNEGO) authentication (H)]'
  {-n,--netrc}'[must read .netrc for user name and password]'
  '--netrc-optional[use either .netrc or URL; overrides -n]'
  '--netrc-file[specify FILE for netrc]'
  '--no-alpn[disable the ALPN TLS extension (H)]'
  {-N,--no-buffer}'[disable buffering of the output stream]'
  '--no-keepalive[disable keepalive use on the connection]'
  '--no-npn[disable the NPN TLS extension (H)]'
  '--no-sessionid[disable SSL session-ID reusing (SSL)]'
  '--noproxy[list of hosts which do not use proxy]'
  '--ntlm[use HTTP NTLM authentication (H)]'
  '--oauth2-bearer[OAuth 2 Bearer Token (IMAP, POP3, SMTP)]'
  {-o,--output}'[write to FILE instead of stdout]'
  '--pass[pass phrase for the private key (SSL/SSH)]'
  '--path-as-is[do not squash .. sequences in URL path]'
  '--pinnedpubkey[/HASHES Public key to verify peer against (SSL)]'
  '--post301[do not switch to GET after following a 301 redirect (H)]'
  '--post302[do not switch to GET after following a 302 redirect (H)]'
  '--post303[do not switch to GET after following a 303 redirect (H)]'
  '--proto[enable/disable PROTOCOLS]'
  '--proto-default[use PROTOCOL for any URL missing a scheme]'
  '--proto-redir[enable/disable PROTOCOLS on redirect]'
  {-x,--proxy}'[//\]HOST\[Use proxy on given port]:PORT\]:'
  '--proxy-anyauth[pick "any" proxy authentication method (H)]'
  '--proxy-basic[use Basic authentication on the proxy (H)]'
  '--proxy-digest[use Digest authentication on the proxy (H)]'
  '--proxy-negotiate[use HTTP Negotiate (SPNEGO) authentication on the proxy (H)]'
  '--proxy-ntlm[use NTLM authentication on the proxy (H)]'
  '--proxy-service-name[SPNEGO proxy service name]'
  '--service-name[SPNEGO service name]'
  {-U,--proxy-user}'[proxy user and password]'
  '--proxy1[.0 HOST\[Use HTTP/1.0 proxy on given port]:PORT\]:'
  {-p,--proxytunnel}'[operate through a HTTP proxy tunnel (using CONNECT)]'
  '--pubkey[public key file name (SSH)]'
  {-Q,--quote}'[send command(s) to server before transfer (F/SFTP)]'
  '--random-file[file for reading random data from (SSL)]'
  {-r,--range}'[retrieve only the bytes within RANGE]'
  '--raw[do HTTP "raw"; no transfer decoding (H)]'
  {-e,--referer}'[referer URL (H)]'
  {-J,--remote-header-name}'[use the header-provided filename (H)]'
  {-O,--remote-name}'[write output to a file named as the remote file]'
  '--remote-name-all[use the remote file name for all URLs]'
  {-R,--remote-time}'[set the remote files time on the local output]'
  {-X,--request}'[specify request command to use]'
  '--resolve[force resolve of HOST:PORT to ADDRESS]'
  '--retry[retry request NUM times if transient problems occur]'
  '--retry-delay[wait SECONDS between retries]'
  '--retry-max-time[retry only within this period]'
  '--sasl-ir[enable initial response in SASL authentication]'
  {-S,--show-error}'[show error. With -s, make curl show errors when they occur]'
  {-s,--silent}'[silent mode (dont output anything)]'
  '--socks4[SOCKS4 proxy on given host + port]'
  '--socks4a[SOCKS4a proxy on given host + port]'
  '--socks5[SOCKS5 proxy on given host + port]'
  '--socks5-hostname[SOCKS5 proxy, pass host name to proxy]'
  '--socks5-gssapi-service[SOCKS5 proxy service name for GSS-API]'
  '--socks5-gssapi-nec[compatibility with NEC SOCKS5 server]'
  {-Y,--speed-limit}'[stop transfers below RATE for speed-time secs]'
  {-y,--speed-time}'[trigger speed-limit abort after SECONDS (default: 30)]'
  '--ssl[try SSL/TLS (FTP, IMAP, POP3, SMTP)]'
  '--ssl-reqd[require SSL/TLS (FTP, IMAP, POP3, SMTP)]'
  {-2,--sslv2}'[use SSLv2 (SSL)]'
  {-3,--sslv3}'[use SSLv3 (SSL)]'
  '--ssl-allow-beast[allow security flaw to improve interop (SSL)]'
  '--ssl-no-revoke[disable cert revocation checks (WinSSL)]'
  '--stderr[where to redirect stderr (use "-" for stdout)]'
  '--tcp-nodelay[use the TCP_NODELAY option]'
  {-t,--telnet-option}'[VAL Set telnet option]'
  '--tftp-blksize[set TFTP BLKSIZE option (must be >512)]'
  {-z,--time-cond}'[transfer based on a time condition]'
  {-1,--tlsv1}'[use >= TLSv1 (SSL)]'
  '--tlsv1[.0 Use TLSv1.0 (SSL)]'
  '--tlsv1[.1 Use TLSv1.1 (SSL)]'
  '--tlsv1[.2 Use TLSv1.2 (SSL)]'
  '--trace[write a debug trace to FILE]'
  '--trace-ascii[like --trace, but without hex output]'
  '--trace-time[add time stamps to trace/verbose output]'
  '--tr-encoding[request compressed transfer encoding (H)]'
  {-T,--upload-file}'[transfer FILE to destination]'
  '--url[URL to work with]'
  {-B,--use-ascii}'[use ASCII/text transfer]'
  {-u,--user}'[server user and password]'
  '--tlsuser[TLS username]'
  '--tlspassword[TLS password]'
  '--tlsauthtype[TLS authentication type (default: SRP)]'
  '--unix-socket[connect through this Unix domain socket]'
  {-A,--user-agent}'[send User-Agent STRING to server (H)]'
  {-v,--verbose}'[make the operation more talkative]'
  {-V,--version}'[show version number and quit]'
  {-w,--write-out}'[use output FORMAT after completion]'
  '--xattr[store metadata in extended file attributes]'
  '-q[disable .curlrc (must be first parameter)]'
  '*:filename:_files'
)

_arguments -s $arguments
