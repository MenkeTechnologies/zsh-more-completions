#compdef clamscan

local arguments

arguments=(
    {--help,-h}'[Show this help]'
    {--version,-V}'[Print version number]'
    {--verbose,-v}'[Be verbose]'
    {--archive-verbose,-a}'[Show filenames inside scanned archives]'
    '--debug[Enable libclamavs debug messages]'
    '--quiet[Only output error messages]'
    '--stdout[Write to stdout instead of stderr]'
    '--no-summary[Disable summary at end of scanning]'
    {--infected,-i}'[Only print infected files]'
    {--suppress-ok-results,-o}'[Skip printing OK files]'
    '--bell[Sound bell on virus detection]'
    '--tempdir[Create temporary files in DIRECTORY]'
    '--leave-temps[/no(*)\] Do not remove temporary files]'
    '--gen-json[/no(*)\] Generate JSON description of scanned file(s). JSON will be printed and also-]'
    '--database[/DIR -d FILE/DIR Load virus database from FILE or load all supported db files from DIR]'
    '--official-db-only[/no(*)\] Only load official signatures]'
    {--log,-l}'[Save scan report to FILE]'
    '--recursive[/no(*)\] -r Scan subdirectories recursively]'
    '--allmatch[/no(*)\] -z Continue scanning within file after finding a match]'
    '--cross-fs[(*)/no\] Scan files and directories on other filesystems]'
    '--follow-dir-symlinks[0/1(*)/2\] Follow directory symlinks (0 = never, 1 = direct, 2 = always)]'
    '--follow-file-symlinks[0/1(*)/2\] Follow file symlinks (0 = never, 1 = direct, 2 = always)]'
    {--file-list,-f}'[Scan files from FILE]'
    '--remove[/no(*)\] Remove infected files. Be careful!]'
    '--move[Move infected files into DIRECTORY]'
    '--copy[Copy infected files into DIRECTORY]'
    '--exclude[Dont scan file names matching REGEX]'
    '--exclude-dir[Dont scan directories matching REGEX]'
    '--include[Only scan file names matching REGEX]'
    '--include-dir[Only scan directories matching REGEX]'
    '--bytecode[(*)/no\] Load bytecode from the database]'
    '--bytecode-unsigned[/no(*)\] Load unsigned bytecode]'
    '--bytecode-timeout[Set bytecode timeout (in milliseconds)]'
    '--statistics[(*)/bytecode/pcre\] Collect and print execution statistics]'
    '--detect-pua[/no(*)\] Detect Possibly Unwanted Applications]'
    '--exclude-pua[Skip PUA sigs of category CAT]'
    '--include-pua[Load PUA sigs of category CAT]'
    '--detect-structured[/no(*)\] Detect structured data (SSN, Credit Card)]'
    '--structured-ssn-format[SSN format (0=normal,1=stripped,2=both)]'
    '--structured-ssn-count[Min SSN count to generate a detect]'
    '--structured-cc-count[Min CC count to generate a detect]'
    '--scan-mail[(*)/no\] Scan mail files]'
    '--phishing-sigs[(*)/no\] Signature-based phishing detection]'
    '--phishing-scan-urls[(*)/no\] URL-based phishing detection]'
    '--heuristic-scan-precedence[/no(*)\] Stop scanning as soon as a heuristic match is found]'
    '--phishing-ssl[/no(*)\] Always block (flag) SSL mismatches in URLs (phishing module)]'
    '--phishing-cloak[/no(*)\] Always block (flag) cloaked URLs (phishing module)]'
    '--partition-intersection[/no(*)\] Detect partition intersections in raw disk images using heuristics]'
    '--algorithmic-detection[(*)/no\] Algorithmic detection]'
    '--normalize[(*)/no\] Normalize html, script, and text files. Use normalize=no for yara compatibility]'
    '--scan-pe[(*)/no\] Scan PE files]'
    '--scan-elf[(*)/no\] Scan ELF files]'
    '--scan-ole2[(*)/no\] Scan OLE2 containers]'
    '--scan-pdf[(*)/no\] Scan PDF files]'
    '--scan-swf[(*)/no\] Scan SWF files]'
    '--scan-html[(*)/no\] Scan HTML files]'
    '--scan-xmldocs[(*)/no\] Scan xml-based document files]'
    '--scan-hwp3[(*)/no\] Scan HWP3 files]'
    '--scan-archive[(*)/no\] Scan archive files (supported by libclamav)]'
    '--detect-broken[/no(*)\] Try to detect broken executable files]'
    '--block-encrypted[/no(*)\] Block (flag) encrypted archives]'
    '--block-macros[/no(*)\] Block (flag) OLE2 files with VBA macros]'
    '--block-max[/no(*)\] Block (flag) files that exceed max file size, max scan size, or max recursion limit]'
    '--nocerts[Disable authenticode certificate chain verification in PE files]'
    '--dumpcerts[Dump authenticode certificate chain in PE files]'
    '--max-filesize[Files larger than this will be skipped and assumed clean]'
    '--max-scansize[The maximum amount of data to scan for each container file (**)]'
    '--max-files[The maximum number of files to scan for each container file (**)]'
    '--max-recursion[Maximum archive recursion level for container file (**)]'
    '--max-dir-recursion[Maximum directory recursion level]'
    '--max-embeddedpe[Maximum size file to check for embedded PE]'
    '--max-htmlnormalize[Maximum size of HTML file to normalize]'
    '--max-htmlnotags[Maximum size of normalized HTML file to scan]'
    '--max-scriptnormalize[Maximum size of script file to normalize]'
    '--max-ziptypercg[Maximum size zip to type reanalyze]'
    '--max-partitions[Maximum number of partitions in disk image to be scanned]'
    '--max-iconspe[Maximum number of icons in PE file to be scanned]'
    '--max-rechwp3[Maximum recursive calls to HWP3 parsing function]'
    '--pcre-match-limit[Maximum calls to the PCRE match function.]'
    '--pcre-recmatch-limit[Maximum recursive calls to the PCRE match function.]'
    '--pcre-max-filesize[Maximum size file to perform PCRE subsig matching.]'
    '--disable-cache[Disable caching and cache checks for hash sums of scanned files.]'
    '*:filename:_files'
)

_arguments -s $arguments
