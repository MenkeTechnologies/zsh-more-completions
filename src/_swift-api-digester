#compdef swift-api-digester

local arguments

arguments=(
  '--help[- Display available options (--help-hidden for more)]'
  '--help-list[- Display list of available options (--help-list-hidden for more)]'
  '--version[- Display the version of this program]'
  '--BF[- add a directory to the baseline framework search path]'
  '--BI[- add a module for baseline input]'
  '-F[- add a directory to the framework search path]'
  '-I[- add a module for input]'
  '--abi[- Dumping ABI interface]'
  '--abort-on-module-fail[- Abort if a module failed to load]'
  '--api-usrs[- The name of APIs to print their usrs, e.g. Type::Function]'
  '--avoid-location[- Avoid serializing the file paths of SDK nodes.]'
  '--avoid-tool-args[- Avoid serializing the arguments for invoking the tool.]'
  '--baseline-dir[- The path to a directory containing baseline files: macos.json, iphoneos.json, appletvos.json, watchos.json, and iosmac.json]'
  '--baseline-path[- The path to the Json file that we should use as the baseline]'
  '--breakage-allowlist-path[- An allowlist of breakages to not complain about]'
  '--bsdk[- path to the baseline SDK to import frameworks]'
  '--compiler-style-diags[- Print compiler style diagnostics to stderr.]'
  '--debug-mapping[- Dumping information for debug purposes]'
  '--disable-os-checks[- Skip OS related diagnostics]'
  '--empty-baseline[- Use empty baseline for diagnostics]'
  '--dump-sdk[- Dump SDK content to JSON file]'
  '--generate-migration-script[- Compare SDK content in JSON file and generate migration script]'
  '--diagnose-sdk[- Diagnose SDK content in JSON file]'
  '--deserialize-diff[- Deserialize diff items in a JSON file]'
  '--deserialize-sdk[- Deserialize sdk digester in a JSON file]'
  '--find-usr[- Find USR for decls by given condition]'
  '--generate-name-correction[- Generate name correction template]'
  '--generate-empty-baseline[- Generate an empty baseline]'
  '--iframework[- add a directory to the clang importer system framework search path]'
  '--ignored-usrs[- the file containing USRs of removed decls that the digester should ignore]'
  '--include-all[- Include all modules from the SDK]'
  '--input-paths[- The SDK contents under comparison]'
  '--json[- Print output in JSON format.]'
  '--location[- Filter nodes with the given location.]'
  '--migrator[- Dump Json suitable for generating migration script]'
  '--module[- Names of modules]'
  '--module-cache-path[- Clang module cache path]'
  '--module-list-file[- File containing a new-line separated list of modules]'
  '-o[- Output file]'
  '--output-dir[- Directory path to where we dump the generated Json files]'
  '--print-module[- Print module names in diagnostics]'
  '--protocol-requirement-allow-list[- File containing a new-line separated list of protocol names]'
  '--resource-dir[- The directory that holds the compiler resource files]'
  '--sdk[- path to the SDK to build against]'
  '--serialize-diagnostics-path[- Serialize diagnostics to a path]'
  '--swift-only[- Only include APIs defined from Swift source]'
  '--swift-version[- The Swift compiler version to invoke]'
  '--target[- target triple]'
  '--use-interface-for-module[- Prefer loading these modules via interface]'
  '-v[- Verbose]'
  '*:filename:_files'
)

_arguments -s $arguments
