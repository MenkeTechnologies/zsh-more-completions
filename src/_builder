#compdef builder

local arguments

arguments=(
  '-bench[run benchmarks]'
  '-benchaffinity[comma-delimited list of affinity values for benchmarking]'
  '-benchcpu[comma-delimited list of GOMAXPROCS values for benchmarking]'
  '-benchmem[4: Approx RSS value to aim at in benchmarks, in MB]'
  '-benchnum[run each benchmark that many times]'
  '-benchpath[.google.com/p/go.benchmarks/bench": Path to download benchmarks from]'
  '-benchtime[benchmarking time for a single benchmark run]'
  '-build[build and test packages]'
  '-buildTimeout[0m0s: Maximum time to wait for builds and tests]'
  '-buildroot[/tmp/gobuilder": Directory under which to build]'
  '-cmd[.bash": Build command (specify relative to go/src/)]'
  '-cmdTimeout[0m0s: Maximum time to wait for an external command]'
  '-commitInterval[0s: Time to wait between polling for new commits (0 disables commit poller)]'
  '-dashboard[.golang.org": Go Dashboard Host]'
  '-fail[fail all builds]'
  '-filelock[": File to lock around benchmaring (synchronizes several builders)]'
  '-gccpath[//github.com/mirrors/gcc.git": Path to download gcc from]'
  '-gcpath[.google.com/p/go": Path to download gc from]'
  '-parallel[build multiple targets in parallel]'
  '-release[build and upload binary release archives]'
  '-rev[": Build specified revision and exit]'
  '-tool[": Tool to build.]'
  '-v[verbose]'
  '*:filename:_files'
)

_arguments -s $arguments
