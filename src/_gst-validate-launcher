#compdef gst-validate-launcher

local arguments

arguments=(
  {-h,--help}'[show this help message and exit]'
  {-d,--debug}'[let user debug the process on timeout]'
  '--timeout-factor[factor to be applied on all timeout values.]'
  {-f,--forever}'[keep running tests until one fails]'
  '--n-runs[number of runs, if the testsuites. Meaning no failure will stop the testuite run meanwhile.]'
  {-F,--fatal-error}'[stop on first fail]'
  '--fail-on-testlist-change[fail the testsuite if a test has been added or removed without being explicitely added/removed from the testlist file.]'
  {-t,--wanted-tests}'[define the tests to execute, it can be a regex. If it contains defaults_only, only default scenarios will be executed]'
  {-b,--blacklisted-tests}'[define the tests not to execute, it can be a regex.]'
  '--check-bugs[check if the bug linked to blacklisted tests has been marked as resolved. (works with gitlab and bugzilla)]'
  {-L,--list-tests}'[list tests and exit]'
  '--unmute[unmute playback output, which means that we use real sinks]'
  {-m,--mute}'[mute playback output, which means that we use a fakesink]'
  {-n,--no-color}'[set it to output no colored text in the terminal]'
  {-g,--generate-media-info}'[set it in order to generate the missing .media_infos files]'
  '--update-media-info[set it in order to update existing .media_infos files]'
  {-G,--generate-media-info-with-frame-detection}'[set it in order to generate the missing .media_infos files. It implies --generate-media-info but enabling frame detection]'
  {-lt,--long-test-limit}'[defines the limit for which a test is considered as long (in seconds). Note that 0 will enable all tests]'
  '--dump-on-failure[dump logs to stdout when a test fails. Note that bat is used to enhance output if available (See https://github.com/sharkdp/bat)]'
  '--max-dump-size[maximum size of logs to dump on stdout in MB.]'
  {-c,--config}'[this is DEPRECATED, prefer using the testsuite format to configure testsuites]'
  {-vg,--valgrind}'[run the tests inside Valgrind]'
  {-rr,--rr}'[run the tests inside rr record]'
  '--gdb[run the tests inside gdb (implies --output-dir=stdout and --jobs=1)]'
  '--gdb-non-stop[run the test automatically in gdb (implies --gdb)]'
  {-nd,--no-display}'[run the tests without outputting graphics on any display. It tries to run all graphical operation in a virtual framebuffer. Note that it is currently implemented only for the X  server thanks to Xvfb (which is requeried in that case)]'
  '--xunit-file[path to xml file to store the xunit report in.]'
  '--shuffle[runs the test in a random order. Can help speed up the overall test time by running synchronized and unsynchronized tests at the same time]'
  '--retry-on-failures[re-try tests that produce unexpected results]'
  '--no-retry-on-failures[disable retrying on failure, event for known to be flaky tests.]'
  '--html[write logs as html]'
  {-M,--main-dir}'[main directory where to put files. Respects the GST_VALIDATE_LAUNCHER_MAIN_DIR environment variable. Default is /Users/wizard/gst-validate]'
  '--testsuites-dir[directory where to look for testsuites. Default is \[/Users/wizard/gst-validate/gstreamer/subprojects/gst-integration-testsuites/testsuites, /opt/homebrew/Cellar/gstreamer/1.24.5/lib/gst-validate-launcher/python/launcher/testsuites\]]'
  {-o,--output-dir}'[directory where to store logs and rendered files. Default is MAIN_DIR]'
  {-l,--logs-dir}'[directory where to store logs, default is OUTPUT_DIR/logs.]'
  {-R,--render-path}'[set the path to which projects should be rendered, default is OUTPUT_DIR/rendered]'
  {-p,--medias-paths}'[paths in which to look for media files]'
  {-a,--clone-dir}'[paths where to clone the testuite to run. default is MAIN_DIR/gst-integration-testsuites]'
  {-rl,--redirect-logs}'[redirect logs to stdout or sdterr.]'
  {-v,--verbose}'[redirect logs to stdout.]'
  {-j,--jobs}'[number of tests to execute simultaneously (Defaults to the number of cores of the processor)]'
  '--ignore-numfailures[ignore the number of failed test in exit code]'
  '--parts[splits the tests in equally distributed parts and only run one part (Defaults to 1 part)]'
  '--part-index[the index of the part to be run (starts at 1).]'
  '--http-server-port[port on which to run the http server on localhost]'
  '--http-bandwith-limitation[the artificial bandwith limitation to introduce to the local server (in Bytes/sec) (default: 1 MBps)]'
  {-s,--folder-for-http-server}'[folder in which to create an http server on localhost. Default is PATHS]'
  '--http-only[start the http server and quit]'
  '--get-assets-command[command to get assets]'
  '--remote-assets-url[url to the remote assets (default:https://gitlab.freedesktop.org/gstreamer/gstreamer.git)]'
  {-S,--sync}'[synchronize asset repository]'
  {-fs,--force-sync}'[synchronize asset repository reseting any change that might have happened in the testsuite]'
  '--sync-all[synchronize asset repository, including big media files]'
  '--sync-version[version of the asset repository, default is GST_VALIDATE_TESTSUITE_VERSION]'
  '--usage[print usage documentation]'
  '--pyunittest-dir[paths to look for Python tests.]'
  '--validate-check-uri[defines the uris to run default tests on]'
  '--validate-tools-path[defines the paths to look for GstValidate tools.]'
  '--validate-gdb-server[run the server in GDB.]'
  '--validate-disable-rtsp[disable RTSP tests.]'
  '--validate-enable-iqa-tests[enable Image Quality Assessment validation tests.]'
  '--validate-generate-expectations[enabled,disabled}]'
  '--validate-generate-ssim-reference-files[(re)generate ssim reference image files.]'
  '--meson-build-dir[defines the paths to look for GstValidate tools.]'
  '--meson-no-rebuild[whether to avoid to rebuild tests before running them.]'
  '--gst-check-leak-trace-testnames[A regex to specifying testsnames of the test to run with the leak tracer activated, if known-not-leaky is specified, the testsuite will automatically activate leak tracers on tests known to be not leaky.]'
  '--gst-check-leak-options[leak tracer options]'
  '*:filename:_files'
)

_arguments -s $arguments
