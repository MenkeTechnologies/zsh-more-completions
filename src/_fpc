#compdef fpc

local arguments

arguments=(
  '-a[the compiler does not delete the generated assembler file]'
  '-al[list sourcecode lines in assembler file]'
  '-an[list node info in assembler file (-dEXTDEBUG compiler)]'
  '-ao[add an extra option to external assembler call (ignored for internal)]'
  '-ap[use pipes instead of creating temporary assembler files]'
  '-ar[list register allocation/release info in assembler file]'
  '-at[list temp allocation/release info in assembler file]'
  '-A[Output format:]:x:'
  '-Adefault[use default assembler]'
  '-Aas[assemble using GNU AS]'
  '-Agas[assemble using GNU GAS]'
  '-Agas-darwin[darwin Mach-O64 using GNU GAS]'
  '-Amasm[win64 object file using ml64 (Microsoft)]'
  '-Apecoff[PE-COFF (Win64) using internal writer]'
  '-Aelf[ELF (Linux-64bit) using internal writer]'
  '-Ayasm[assemble using Yasm (experimental)]'
  '-Anasm[assemble using Nasm (experimental)]'
  '-Anasmwin64[win64 object file using Nasm (experimental)]'
  '-Anasmelf[assemble Linux-64bit object file using Nasm (experimental)]'
  '-Anasmdarwin[darwin macho64 object file using Nasm (experimental)]'
  '-b[generate browser info]'
  '-bl[generate local symbol info]'
  '-B[build all modules]'
  '-C[Code generation options:]:x:'
  '-C3[turn on ieee error checking for constants]'
  '-Ca[Select ABI; see fpc -i or fpc -ia for possible values]:x:'
  '-Cb[generate code for a big-endian variant of the target architecture]'
  '-Cc[Set default calling convention to <x>]:x:'
  '-CD[create also dynamic library (not supported)]'
  '-Ce[compilation with emulated floating point opcodes]'
  '-Cf[Select fpu instruction set to use; see fpc -i or fpc -if for possible values]:x:'
  '-CF[Minimal floating point constant precision (default, 32, 64)]:x:'
  '-Cg[generate PIC code]'
  '-Ch[bytes heap (between 1023 and 67107840)]:n::n:'
  '-Ci[IO-checking]'
  '-Cn[omit linking stage]'
  '-Co[check overflow of integer operations]'
  '-CO[check for possible overflow of integer operations]'
  '-Cp[Select instruction set; see fpc -i or fpc -ic for possible values]:x:'
  '-CP[<x>=<y> packing settings]'
  '-CPPACKSET[set allocation: 0, 1 or DEFAULT or NORMAL, 2, 4 and 8]:y:'
  '-CPPACKENUM[enum packing: 0, 1, 2 and 4 or DEFAULT or NORMAL]:y:'
  '-CPPACKRECORD[record packing: 0 or DEFAULT or NORMAL, 1, 2, 4, 8, 16 and 32]:y:'
  '-Cr[range checking]'
  '-CR[verify object method call validity]'
  '-Cs[Set stack checking size to <n>]:n:'
  '-Ct[stack checking (for testing only, see manual)]'
  '-CT[Target-specific code generation options]:x:'
  '-CTcld[emit a CLD instruction before using the x86 string instructions]'
  '-CX[create also smartlinked library]'
  '-d[Defines the symbol <x>]:x:'
  '-D[generate a DEF file]'
  '-Dd[Set description to <x>]:x:'
  '-Dv[Set DLL version to <x>]:x:'
  '-e[Set path to executable]:x:'
  '-E[same as -Cn]'
  '-fPIC[same as -Cg]'
  '-F[Set file names and paths:]:x:'
  '-Fa[<x>\[,y\] (for a program) load units <x> and \[y\] before uses is parsed]'
  '-Fc[Set input codepage to <x>]:x:'
  '-FC[Set RC compiler binary name to <x>]:x:'
  '-Fd[disable the compilers internal directory cache]'
  '-FD[Set the directory where to search for compiler utilities]:x:'
  '-Fe[Redirect error output to <x>]:x:'
  '-Ff[Add <x> to framework path (Darwin only)]:x:'
  '-FE[Set exe/unit output path to <x>]:x:'
  '-Fi[Add <x> to include path]:x:'
  '-Fl[Add <x> to library path]:x:'
  '-FL[Use <x> as dynamic linker]:x:'
  '-Fm[Load unicode conversion table from <x>.txt in the compiler dir]:x:'
  '-FM[Set the directory where to search for unicode binary files]:x:'
  '-Fo[Add <x> to object path]:x:'
  '-Fr[Load error message file <x>]:x:'
  '-FR[Set resource (.res) linker to <x>]:x:'
  '-Fu[Add <x> to unit path]:x:'
  '-FU[Set unit output path to <x>, overrides -FE]:x:'
  '-FW[Store generated whole-program optimization feedback in <x>]:x:'
  '-Fw[Load previously stored whole-program optimization feedback from <x>]:x:'
  '-g[generate debug information (default format for target)]'
  '-gc[generate checks for pointers]'
  '-gh[use heaptrace unit (for memory leak/corruption debugging)]'
  '-gl[use line info unit (show more info with backtraces)]'
  '-go[Set debug information options]:x:'
  '-godwarfsets[enable DWARF set type debug information (breaks gdb < 6.5)]'
  '-gostabsabsincludes[store absolute/full include file paths in Stabs]'
  '-godwarfmethodclassprefix[prefix method names in DWARF with class name]'
  '-godwarfcpp[simulate C++ debug information in DWARF]'
  '-gp[preserve case in stabs symbol names]'
  '-gs[generate Stabs debug information]'
  '-gt[trash local variables (to detect uninitialized uses; multiple t changes the trashing value)]'
  '-gv[generates programs traceable with Valgrind]'
  '-gw[generate DWARFv2 debug information (same as -gw2)]'
  '-gw2[generate DWARFv2 debug information]'
  '-gw3[generate DWARFv3 debug information]'
  '-gw4[generate DWARFv4 debug information (experimental)]'
  '-i[information]'
  '-iD[return compiler date]'
  '-iSO[return compiler OS]'
  '-iSP[return compiler host processor]'
  '-iTO[return target OS]'
  '-iTP[return target processor]'
  '-iV[return short compiler version]'
  '-iW[return full compiler version]'
  '-ia[return list of supported ABI targets]'
  '-ic[return list of supported CPU instruction sets]'
  '-if[return list of supported FPU instruction sets]'
  '-ii[return list of supported inline assembler modes]'
  '-io[return list of supported optimizations]'
  '-ir[return list of recognized compiler and RTL features]'
  '-it[return list of supported targets]'
  '-iu[return list of supported microcontroller types]'
  '-iw[return list of supported whole program optimizations]'
  '-I[Add <x> to include path]:x:'
  '-k[Pass <x> to the linker]:x:'
  '-l[write logo]'
  '-M[Set language mode to <x>]:x:'
  '-Mfpc[free Pascal dialect (default)]'
  '-Mobjfpc[FPC mode with Object Pascal support]'
  '-Mdelphi[delphi 7 compatibility mode]'
  '-Mtp[TP/BP 7.0 compatibility mode]'
  '-Mmacpas[macintosh Pascal dialects compatibility mode]'
  '-Miso[ISO 7185 mode]'
  '-n[do not read the default config files]'
  '-o[Change the name of the executable produced to <x>]:x:'
  '-O[Optimizations:]:x:'
  '-O-[disable optimizations]'
  '-O1[level 1 optimizations (quick and debugger friendly)]'
  '-O2[level 2 optimizations (-O1 + quick optimizations)]'
  '-O3[level 3 optimizations (-O2 + slow optimizations)]'
  '-O4[level 4 optimizations (-O3 + optimizations which might have unexpected side effects)]'
  '-Oa[<x>=<y> Set alignment]'
  '-Oo[enable or disable optimizations; see fpc -i or fpc -io for possible values]'
  '-Op[Set target cpu for optimizing; see fpc -i or fpc -ic for possible values]:x:'
  '-OW[Generate whole-program optimization feedback for optimization <x>; see fpc -i or fpc -iw for possible values]:x:'
  '-Ow[Perform whole-program optimization <x>; see fpc -i or fpc -iw for possible values]:x:'
  '-Os[optimize for size rather than speed]'
  '-pg[generate profile code for gprof (defines FPC_PROFILE)]'
  '-P[Target CPU / compiler related options:]:x:'
  '-PB[show default compiler binary]'
  '-PP[show default target cpu]'
  '-P[Set target CPU (arm,avr,i386,jvm,m68k,mips,mipsel,powerpc,powerpc64,sparc,x86_64)]:x:'
  '-R[Assembler reading style:]:x:'
  '-Rdefault[use default assembler for target]'
  '-S[Syntax options:]:x:'
  '-S2[same as -Mobjfpc]'
  '-Sc[support operators like C (*=,+=,/= and -=)]'
  '-Sa[turn on assertions]'
  '-Sd[same as -Mdelphi]'
  '-Se[Error options. <x> is a combination of the following:]:x:'
  '-Sf[enable certain features in compiler and RTL; see fpc -i or fpc -ir for possible values)]'
  '-Sg[enable LABEL and GOTO (default in -Mtp and -Mdelphi)]'
  '-Sh[use reference counted strings (ansistring by default) instead of shortstrings]'
  '-Si[turn on inlining of procedures/functions declared as "inline"]'
  '-Sk[load fpcylix unit]'
  '-SI[Set interface style to <x>]:x:'
  '-SIcom[COM compatible interface (default)]'
  '-SIcorba[CORBA compatible interface]'
  '-Sm[support macros like C (global)]'
  '-So[same as -Mtp]'
  '-Ss[constructor name must be init (destructor must be done)]'
  '-Sv[support vector processing (use CPU vector extensions if available)]'
  '-Sx[enable exception keywords (default in Delphi/ObjFPC modes)]'
  '-Sy[@<pointer> returns a typed pointer, same as $T+]'
  '-s[do not call assembler and linker]'
  '-sh[generate script to link on host]'
  '-st[generate script to link on target]'
  '-sr[skip register allocation phase (use with -alr)]'
  '-T[Target operating system:]:x:'
  '-Tdarwin[darwin/Mac OS X]'
  '-Tfreebsd[freeBSD]'
  '-Tlinux[linux]'
  '-Tnetbsd[netBSD]'
  '-Topenbsd[openBSD]'
  '-Tsolaris[solaris]'
  '-Twin64[win64 (64 bit Windows systems)]'
  '-u[Undefines the symbol <x>]:x:'
  '-U[unit options:]'
  '-Un[do not check where the unit name matches the file name]'
  '-Ur[generate release unit files (never automatically recompiled)]'
  '-Us[compile a system unit]'
  '-v[Be verbose. <x> is a combination of the following letters:]:x:'
  '-V[Append -<x> to the used compiler binary name (e.g. for version)]:x:'
  '-W[Target-specific options (targets)]:x:'
  '-WA[specify native type application (Windows)]'
  '-Wb[create a bundle instead of a library (Darwin)]'
  '-WB[create a relocatable image (Windows)]'
  '-WBxxxx[set image base to xxxx (Windows)]'
  '-WC[specify console type application (Windows)]'
  '-WD[use DEFFILE to export functions of DLL or EXE (Windows)]'
  '-We[use external resources (Darwin)]'
  '-WG[specify graphic type application (Windows)]'
  '-Wi[use internal resources (Darwin)]'
  '-WI[turn on/off the usage of import sections (Windows)]'
  '-WM[Minimum Mac OS X deployment version: 10.4, 10.5.1, ... (Darwin)]:x:'
  '-WN[do not generate relocation code, needed for debugging (Windows)]'
  '-WR[generate relocation code (Windows)]'
  '-WX[enable executable stack (Linux)]'
  '-X[executable options:]'
  '-Xc[pass --shared/-dynamic to the linker (BeOS, Darwin, FreeBSD, Linux)]'
  '-Xd[do not search default library path (sometimes required for cross-compiling when not using -XR)]'
  '-Xe[use external linker]'
  '-Xf[substitute pthread library name for linking (BSD)]'
  '-Xg[create debuginfo in a separate file and add a debuglink section to executable]'
  '-XD[try to link units dynamically (defines FPC_LINK_DYNAMIC)]'
  '-Xi[use internal linker]'
  '-XLA[define library substitutions for linking]'
  '-XLO[define order of library linking]'
  '-XLD[exclude default order of standard libraries]'
  '-Xm[generate link map]'
  '-XM[Set the name of the main program routine (default is main)]:x:'
  '-Xn[use target system native linker instead of GNU ld (Solaris, AIX)]'
  '-Xp[First search for the compiler binary in the directory <x>]:x:'
  '-XP[Prepend the binutils names with the prefix <x>]:x:'
  '-Xr[Set the linkers rlink-path to <x> (needed for cross compile, see the ld manual for more information) (BeOS, Linux)]:x:'
  '-XR[Prepend <x> to all linker search paths (BeOS, Darwin, FreeBSD, Linux, Mac OS, Solaris)]:x:'
  '-Xs[strip all symbols from executable]'
  '-XS[try to link units statically (default, defines FPC_LINK_STATIC)]'
  '-Xt[link with static libraries (-static is passed to linker)]'
  '-Xv[generate table for Virtual Entry calls]'
  '-XX[try to smartlink units (defines FPC_LINK_SMART)]'
  '-h[shows this help without waiting]'
  '*:filename:_files'
)

_arguments -s $arguments
