#compdef pkcs15-init

local arguments

arguments=(
  '--version[print OpenSC package version]'
  {-E,--erase-card}'[erase the smart card]'
  {-C,--create-pkcs15}'[creates a new PKCS #15 structure]'
  {-P,--store-pin}'[store a new PIN/PUK on the card]'
  {-G,--generate-key}'[generate a new key and store it on the card]'
  {-S,--store-private-key}'[store private key]'
  '--store-public-key[store public key]'
  '--store-secret-key[store secret key]'
  {-X,--store-certificate}'[store an X.509 certificate]'
  {-U,--update-certificate}'[update an X.509 certificate (careful with mail decryption certs!!)]'
  {-W,--store-data}'[store a data object]'
  {-D,--delete-objects}'[delete object(s) (use "help" for more information)]'
  {-A,--change-attributes}'[change attribute(s) (use "help" for more information)]'
  '--sanity-check[card specific sanity check and possibly update procedure]'
  '--erase-application[erase application with AID <arg>]'
  {-r,--reader}'[specify which reader to use]'
  '--pin[specify PIN]'
  '--puk[specify unblock PIN]'
  '--so-pin[specify security officer (SO) PIN]'
  '--so-puk[specify unblock PIN for SO PIN]'
  '--no-so-pin[do not install a SO PIN, and do not prompt for it]'
  '--serial[specify the serial number of the card]'
  {-a,--auth-id}'[specify ID of PIN to use/create]'
  '--puk-id[specify ID of PUK to use/create]'
  '--verify-pin[verify PIN after card binding (use with --auth-id)]'
  {-i,--id}'[specify ID of key/certificate]'
  {-l,--label}'[specify label of PIN/key]'
  '--puk-label[specify label of PUK]'
  '--secret-key-algorithm[specify secret key algorithm (use with --store-secret-key)]'
  '--public-key-label[specify public key label (use with --generate-key)]'
  '--cert-label[specify user cert label (use with --store-private-key)]'
  '--application-name[specify application name of data object (use with --store-data-object)]'
  '--application-id[specify application id of data object (use with --store-data-object)]'
  '--aid[specify AID of the on-card PKCS#15 application to be binded to (in hexadecimal form)]'
  {-o,--output-file}'[output public portion of generated key to file]'
  {-f,--format}'[specify key/cert file format: PEM (=default), DER or PKCS12]'
  '--passphrase[specify passphrase for unlocking secret key]'
  '--authority[mark certificate as a CA certificate]'
  {-u,--key-usage}'[specify X.509 key usage (use "--key-usage help" for more information)]'
  {-F,--finalize}'[finish initialization phase of the smart card]'
  '--update-last-update[update lastUpdate attribute of tokenInfo]'
  '--ignore-ca-certificates[when storing PKCS#12 ignore CA certificates]'
  '--update-existing[store or update existing certificate]'
  '--extractable[private key stored as an extractable key]'
  '--insecure[insecure mode: do not require a PIN for private key]'
  {-T,--use-default-transport-keys}'[do not ask for transport keys if the driver thinks it knows the key]'
  '--use-pinpad[do not prompt the user; if no PINs supplied, pinpad will be used]'
  {-p,--profile}'[specify the general profile to use]'
  {-c,--card-profile}'[specify the card profile to use]'
  '--options-file[read additional command line options from file]'
  '--md-container-guid[for a new key specify GUID for a MD container]'
  {-w,--wait}'[wait for card insertion]'
  '(- * :)'{-h,--help}'[display this message]'
  {-v,--verbose}'[verbose operation. Use several times to enable debug output.]'
  '*:filename:_files'
)

_arguments -s $arguments
