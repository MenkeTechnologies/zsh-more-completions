#compdef protoc-28.3.0

local arguments

arguments=(
  {-IPATH,--proto}'[_path=PATH   Specify the directory in which to search for]'
  '--version[show version info and exit.]'
  {-h,--help}'[show this text and exit.]'
  '--encode[read a text-format message of the given type]'
  '--deterministic[_output      When using --encode, ensure map fields are]'
  '--decode[read a binary message of the given type from]'
  '--decode[_raw                Read an arbitrary protocol message from]'
  '--descriptor[_set_in=FILES   Specifies a delimited list of FILES]'
  '-oFILE[writes a FileDescriptorSet (a protocol buffer]'
  '--descriptor[_set_out=FILE defined in descriptor.proto) containing all of]'
  '--include[_imports           When using --descriptor_set_out, also include]'
  '--include[_source_info       When using --descriptor_set_out, do not strip]'
  '--retain[_options            When using --descriptor_set_out, do not strip]'
  '--dependency[_out=FILE       Write a dependency output file in the format]'
  '--error[_format=FORMAT       Set the format in which to print errors.]'
  '--fatal[_warnings            Make warnings be fatal (similar to -Werr in]'
  '--print[_free_field_numbers  Print the free field numbers of the messages]'
  '--enable[_codegen_trace      Enables tracing which parts of protoc are]'
  '--plugin[specifies a plugin executable to use.]'
  '--cpp[_out=OUT_DIR           Generate C++ header and source.]'
  '--csharp[_out=OUT_DIR        Generate C# source file.]'
  '--java[_out=OUT_DIR          Generate Java source file.]'
  '--kotlin[_out=OUT_DIR        Generate Kotlin file.]'
  '--objc[_out=OUT_DIR          Generate Objective-C header and source.]'
  '--php[_out=OUT_DIR           Generate PHP source file.]'
  '--pyi[_out=OUT_DIR           Generate python pyi stub.]'
  '--python[_out=OUT_DIR        Generate Python source file.]'
  '--ruby[_out=OUT_DIR          Generate Ruby source file.]'
  '--rust[_out=OUT_DIR          Generate Rust sources.]'
  '*:filename:_files'
)

_arguments -s $arguments
