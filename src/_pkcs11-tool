#compdef pkcs11-tool

local arguments

arguments=(
  '--module[specify the module to load (default:/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so)]'
  {-I,--show-info}'[show global token information]'
  {-L,--list-slots}'[list available slots]'
  {-T,--list-token-slots}'[list slots with tokens]'
  {-M,--list-mechanisms}'[list mechanisms supported by the token]'
  {-O,--list-objects}'[show objects on token]'
  {-s,--sign}'[sign some data]'
  '--decrypt[decrypt some data]'
  {-h,--hash}'[hash some data]'
  '--derive[derive a secret key using another key and some data]'
  '--derive-pass-der[derive ECDHpass DER encoded pubkey for compatibility with some PKCS#11 implementations]'
  {-m,--mechanism}'[specify mechanism (use -M for a list of supported mechanisms), or by hexadecimal, e.g., 0x80001234]'
  '--hash-algorithm[specify hash algorithm used with RSA-PKCS-PSS signature and RSA-PKCS-OAEP decryption]'
  '--mgf[specify MGF (Message Generation Function) used for RSA-PSS signature and RSA-OAEP decryption (possible values are MGF1-SHA1 to MGF1-SHA512)]'
  '--salt-len[specify how many bytes should be used for salt in RSA-PSS signatures (default is digest size)]'
  {-l,--login}'[log into the token first]'
  '--login-type[specify login type (so, user, context-specific; default:user)]'
  {-p,--pin}'[supply User PIN on the command line (if used in scripts: careful!)]'
  '--puk[supply User PUK on the command line]'
  '--new-pin[supply new User PIN on the command line]'
  '--so-pin[supply SO PIN on the command line (if used in scripts: careful!)]'
  '--init-token[initialize the token, its label and its SO PIN (use with --label and --so-pin)]'
  '--init-pin[initialize the User PIN (use with --pin and --login)]'
  {-c,--change-pin}'[change User PIN]'
  '--unlock-pin[unlock User PIN (without --login unlock in logged in session; otherwise --login-type has to be context-specific)]'
  {-k,--keypairgen}'[key pair generation]'
  '--keygen[key generation]'
  '--key-type[specify the type and length of the key to create, for example rsa:1024 or EC:prime256v1 or GOSTR3410:A]'
  '--usage-sign[specify sign key usage flag (sets SIGN in privkey, sets VERIFY in pubkey)]'
  '--usage-decrypt[specify decrypt key usage flag (RSA only, set DECRYPT privkey, ENCRYPT in pubkey)]'
  '--usage-derive[specify derive key usage flag (EC only)]'
  {-w,--write-object}'[write an object (key, cert, data) to the card]'
  {-r,--read-object}'[get objects CKA_VALUE attribute (use with --type)]'
  {-b,--delete-object}'[delete an object (use with --type cert/data/privkey/pubkey/secrkey)]'
  '--application-label[specify the application label of the data object (use with --type data)]'
  '--application-id[specify the application ID of the data object (use with --type data)]'
  '--issuer[specify the issuer in hexadecimal format (use with --type cert)]'
  '--subject[specify the subject in hexadecimal format (use with --type cert/privkey/pubkey)]'
  {-y,--type}'[specify the type of object (e.g. cert, privkey, pubkey, data)]'
  {-d,--id}'[specify the ID of the object]'
  {-a,--label}'[specify the label of the object]'
  '--slot[specify the ID of the slot to use]'
  '--slot-description[specify the description of the slot to use]'
  '--slot-index[specify the index of the slot to use]'
  '--token-label[specify the token label of the slot to use]'
  {-e,--set-id}'[set the CKA_ID of an object, <args>= the (new) CKA_ID]'
  '--attr-from[use <arg> to create some attributes when writing an object]'
  {-i,--input-file}'[specify the input file]'
  {-o,--output-file}'[specify the output file]'
  {-f,--signature-format}'[format for ECDSA signature <arg>: rs (default), sequence, openssl]'
  {-t,--test}'[test (best used with the --login or --pin option)]'
  '--test-hotplug[test hotplug capabilities (C_GetSlotList + C_WaitForSlotEvent)]'
  {-z,--moz-cert}'[test Mozilla-like keypair gen and cert req, <arg>=certfile]'
  {-v,--verbose}'[verbose operation. (Set OPENSC_DEBUG to enable OpenSC specific debugging)]'
  '--private[set the CKA_PRIVATE attribute (object is only viewable after a login)]'
  '--sensitive[set the CKA_SENSITIVE attribute (object cannot be revealed in plaintext)]'
  '--test-ec[test EC (best used with the --login or --pin option)]'
  '--test-fork[test forking and calling C_Initialize() in the child]'
  '--generate-random[generate given amount of random data]'
  '*:filename:_files'
)

_arguments -s $arguments
