#compdef rg

local arguments

arguments=(
  {-A,--after-context}'[show NUM lines after each match.]'
  '--auto-hybrid-regex[when this flag is used, ripgrep will dynamically choose between supported regex]'
  {-B,--before-context}'[show NUM lines before each match.]'
  '--binary[enabling this flag will cause ripgrep to search binary files. By default]'
  '--block-buffered[when enabled, ripgrep will use block buffering. That is, whenever a matching]'
  {-b,--byte-offset}'[print the 0-based byte offset within the input file before each line of output.]'
  {-s,--case-sensitive}'[search case sensitively.]'
  '--color[this flag controls when to use colors. The default setting is auto, which]'
  '--color[changes to never.]'
  '--colors[...]'
  '--column[show column numbers (1-based). This only shows the column numbers for the first]'
  {-C,--context}'[show NUM lines before and after each match. This is equivalent to providing]'
  '--context-separator[the string used to separate non-contiguous context lines in the output. Escape]'
  {-c,--count}'[this flag suppresses normal output and shows the number of lines that match]'
  '--count-matches[this flag suppresses normal output and shows the number of individual]'
  '--only-matching[then ripgrep behaves as if --count-matches was given.]'
  '--crlf[when enabled, ripgrep will treat CRLF (\r\n) as a line terminator instead]'
  '--debug[show debug messages. Please use this when filing a bug report.]'
  '--dfa-size-limit[+SUFFIX?>]'
  '--max-filesize[.]'
  {-E,--encoding}'[specify the text encoding that ripgrep will use on all files searched. The]'
  {-f,--file}'[...]'
  '--files[print each file that would be searched without actually performing the search.]'
  {-l,--files-with-matches}'[only print the paths with at least one match.]'
  '--files-without-match[only print the paths that contain zero matches. This inverts/negates the]'
  '--files-with-matches[.]'
  {-F,--fixed-strings}'[treat the pattern as a literal string instead of a regular expression. When]'
  {-L,--follow}'[when this flag is enabled, ripgrep will follow symbolic links while traversing]'
  {-g,--glob}'[...]'
  '--glob-case-insensitive[process glob patterns given with the -g/--glob flag case insensitively. This]'
  '(- * :)'{-h,--help}'[prints help information. Use --help for more details.]'
  '--heading[this flag prints the file path above clusters of matches from each file instead]'
  '--hidden[search hidden files and directories. By default, hidden files and directories]'
  '--iglob[...]'
  {-i,--ignore-case}'[when this flag is provided, the given patterns will be searched case]'
  '--ignore-file[...]'
  '--ignore-file-case-insensitive[process ignore files (.gitignore, .ignore, etc.) case insensitively. Note that]'
  {-v,--invert-match}'[invert matching. Show lines that do not match the given patterns.]'
  '--json[enable printing results in a JSON Lines format.]'
  {--files-with-matches,--files-without-match,--count,--count-matches}'[.]'
  {--only-matching,--heading,--replace,--max-columns}'[etc., have no effect]'
  '--line-buffered[when enabled, ripgrep will use line buffering. That is, whenever a matching]'
  {-n,--line-number}'[show line numbers (1-based). This is enabled by default when searching in a]'
  {-x,--line-regexp}'[only show matches surrounded by line boundaries. This is equivalent to putting]'
  {-M,--max-columns}'[dont print lines longer than this limit in bytes. Longer lines are omitted]'
  '--max-columns-preview[when the --max-columns flag is used, ripgrep will by default completely]'
  {-m,--max-count}'[limit the number of matching lines per file searched to NUM.]'
  '--max-depth[limit the depth of directory traversal to NUM levels beyond the paths given. A]'
  '--max-filesize[+SUFFIX?>]'
  '--mmap[search using memory maps when possible. This is enabled by default when ripgrep]'
  {-U,--multiline}'[enable matching across multiple lines.]'
  '--multiline-dotall[this flag enables "dot all" in your regex pattern, which causes . to match]'
  '--no-config[never read configuration files. When this flag is present, ripgrep will not]'
  {-I,--no-filename}'[never print the file path with the matched lines. This is the default when]'
  '--no-heading[dont group matches by each file. If --no-heading is provided in addition to]'
  '--no-ignore[dont respect ignore files (.gitignore, .ignore, etc.). This implies]'
  {--no-ignore-parent,--no-ignore-dot,--no-ignore-vcs}'[.]'
  '--no-ignore-dot[dont respect .ignore files.]'
  '--no-ignore-global[dont respect ignore files that come from "global" sources such as gits]'
  '--no-ignore-messages[suppresses all error messages related to parsing ignore files such as .ignore]'
  '--no-ignore-parent[dont respect ignore files (.gitignore, .ignore, etc.) in parent directories.]'
  '--no-ignore-vcs[dont respect version control ignore files (.gitignore, etc.). This implies]'
  '--no-ignore-parent[VCS files. Note that .ignore files will continue to be]'
  {-N,--no-line-number}'[suppress line numbers. This is enabled by default when not searching in a]'
  '--no-messages[suppress all error messages related to opening and reading files. Error]'
  '--no-mmap[never use memory maps, even when they might be faster.]'
  '--no-pcre2-unicode[when PCRE2 matching is enabled, this flag will disable Unicode mode, which is]'
  {-0,--null}'[whenever a file path is printed, follow it with a NUL byte. This includes]'
  '--null-data[enabling this option causes ripgrep to use NUL as a line terminator instead of]'
  '--one-file-system[when enabled, ripgrep will not cross file system boundaries relative to where]'
  {-o,--only-matching}'[print only the matched (non-empty) parts of a matching line, with each such]'
  '--passthru[print both matching and non-matching lines.]'
  '--path-separator[set the path separator to use when printing file paths. This defaults to your]'
  {-P,--pcre2}'[when this flag is present, ripgrep will use the PCRE2 regex engine instead of]'
  '--pcre2-version[when this flag is present, ripgrep will print the version of PCRE2 in use]'
  '--pre[for each input FILE, search the standard output of COMMAND FILE rather than the]'
  '--pre-glob[...]'
  '--pre-glob[are given, then only files that match the given set of globs]'
  {-p,--pretty}'[this is a convenience alias for --color always --heading --line-number. This]'
  {-q,--quiet}'[do not print anything to stdout. If a match is found in a file, then ripgrep]'
  '--regex-size-limit[+SUFFIX?>]'
  {-e,--regexp}'[...]'
  {-r,--replace}'[replace every match with the text given when printing results. Neither this]'
  {-z,--search-zip}'[search in compressed files. Currently gzip, bzip2, xz, LZ4, LZMA, Brotli and]'
  {-S,--smart-case}'[searches case insensitively if the pattern is all lowercase. Search case]'
  '--sort[this flag enables sorting of results in ascending order. The possible values]'
  '--sortr[this flag enables sorting of results in descending order. The possible values]'
  '--stats[print aggregate statistics about this ripgrep search. When this flag is]'
  '--files-without-match[passed.]'
  {-a,--text}'[search binary files as if they were text. When this flag is present, ripgreps]'
  {-j,--threads}'[the approximate number of threads to use. A value of 0 (which is the default)]'
  '--trim[when set, all ASCII whitespace at the beginning of each line printed will be]'
  {-t,--type}'[...]'
  '--type-list[to list all available types.]'
  '--type-add[...]'
  '--type-add[also be used to include rules from other types with the special]'
  '--type-add[py,md]'
  '--type-add[again:]'
  '--type-add[py,md --type-add src:*.foo]'
  '--type-clear[...]'
  '--type-list[show all supported file types and their corresponding globs.]'
  {-T,--type-not}'[...]'
  {-u,--unrestricted}'[reduce the level of "smart" searching. A single -u wont respect .gitignore]'
  {-V,--version}'[prints version information]'
  '--vimgrep[show results with every match on its own line, including line numbers and]'
  {-H,--with-filename}'[display the file path for matches. This is the default when more than one]'
  {-w,--word-regexp}'[only show matches surrounded by word boundaries. This is roughly equivalent to]'
  '*:filename:_files'
)

_arguments -s $arguments
