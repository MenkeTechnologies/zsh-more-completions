#compdef avifenc

local arguments

arguments=(
  {-h,--help}'[: Show syntax help]'
  {-V,--version}'[: Show the version number]'
  {-j,--jobs}'[: Number of jobs (worker threads, default: 1. Use "all" to use all available cores)]'
  {-o,--output}'[: Instead of using the last filename given as output, use this filename]'
  {-l,--lossless}'[: Set all defaults to encode losslessly, and emit warnings when settings/input dont allow for it]'
  {-d,--depth}'[: Output depth \[8,10,12\]. (JPEG/PNG only; For y4m or stdin, depth is retained)]'
  {-y,--yuv}'[: Output format \[default=auto, 444, 422, 420, 400\]. Ignored for y4m or stdin (y4m format is retained)]'
  {-p,--premultiply}'[: Premultiply color by the alpha channel and signal this in the AVIF]'
  '--stdin[: Read y4m frames from stdin instead of files; no input filenames allowed, must set before offering output filename]'
  {--cicp,--nclx}'[/T/M               : Set CICP values (nclx colr box) (3 raw numbers, use -r to set range flag)]'
  {-r,--range}'[: YUV range \[limited or l, full or f\]. (JPEG/PNG only, default: full; For y4m or stdin, range is retained)]'
  '--min[: Set min quantizer for color (0-63, where 0 is lossless)]'
  '--max[: Set max quantizer for color (0-63, where 0 is lossless)]'
  '--minalpha[: Set min quantizer for alpha (0-63, where 0 is lossless)]'
  '--maxalpha[: Set max quantizer for alpha (0-63, where 0 is lossless)]'
  '--tilerowslog2[: Set log2 of number of tile rows (0-6, default: 0)]'
  '--tilecolslog2[: Set log2 of number of tile columns (0-6, default: 0)]'
  {-g,--grid}'[: Encode a single-image grid AVIF with M cols & N rows. Either supply MxN identical W/H/D images, or a single]'
  {-s,--speed}'[: Encoder speed (0-10, slowest-fastest, default or d for codec internal defaults. default speed: 6)]'
  {-c,--codec}'[: AV1 codec to use (choose from versions list below)]'
  '--exif[: Provide an Exif metadata payload to be associated with the primary item]'
  '--xmp[: Provide an XMP metadata payload to be associated with the primary item]'
  '--icc[: Provide an ICC profile payload to be associated with the primary item]'
  {-a,--advanced}'[VALUE\]         : Pass an advanced, codec-specific key/value string pair directly to the codec. avifenc will warn on any not used by the codec.]'
  '--duration[: Set all following frame durations (in timescales) to D; default 1. Can be set multiple times (before supplying each filename)]'
  {--timescale,--fps}'[: Set the timescale to V. If all frames are 1 timescale in length, this is equivalent to frames per second (Default: 30)]'
  {-k,--keyframe}'[: Set the forced keyframe interval (maximum frames between keyframes). Set to 0 to disable (default).]'
  '--ignore-icc[: If the input file contains an embedded ICC profile, ignore it (no-op if absent)]'
  '--pasp[V                        : Add pasp property (aspect ratio). H=horizontal spacing, V=vertical spacing]'
  '--crop[CROPY,CROPW,CROPH    : Add clap property (clean aperture), but calculated from a crop rectangle]'
  '--clap[WD,HN,HD,HON,HOD,VON,VOD: Add clap property (clean aperture). Width, Height, HOffset, VOffset (in num/denom pairs)]'
  '--irot[: Add irot property (rotation). \[0-3\], makes (90 * ANGLE) degree rotation anti-clockwise]'
  '--imir[: Add imir property (mirroring). 0=top-to-bottom, 1=left-to-right]'
  '*:filename:_files'
)

_arguments -s $arguments
