#compdef isort

local arguments

arguments=(
  '(- * :)'{-h,--help}'[show this help message and exit]'
  {-a,--add-import}'[adds the specified import line to all files]'
  {-ac,--atomic}'[ensures the output doesnt save if the resulting file]'
  {-af,--force-adds}'[forces import adds even if the original file is empty.]'
  {-b,--builtin}'[force sortImports to recognize a module as part of the]'
  {-c,--check-only}'[checks the file for unsorted / unformatted imports and]'
  {-ca,--combine-as}'[combines as imports on the same line.]'
  {-cs,--combine-star}'[ensures that if a star import is present, nothing else]'
  {-d,--stdout}'[force resulting output to stdout, instead of in-place.]'
  {-df,--diff}'[prints a diff of all the changes isort would make to a]'
  {-ds,--no-sections}'[put all imports into the same section bucket]'
  {-dt,--dont-order-by-type}'[only order imports alphabetically, do not attempt type]'
  {-e,--balanced}'[balances wrapping to produce the most consistent line]'
  {-f,--future}'[force sortImports to recognize a module as part of the]'
  {-fas,--force-alphabetical-sort}'[force all imports to be sorted as a single section]'
  {-fass,--force-alphabetical-sort-within-sections}'[force all imports to be sorted alphabetically within a]'
  {-ff,--from-first}'[switches the typical ordering preference, showing from]'
  {-fgw,--force-grid-wrap}'[force number of from imports (defaults to 2) to be]'
  {-fss,--force-sort-within-sections}'[force imports to be sorted by module, independent of]'
  {-i,--indent}'[string to place for indents defaults to " " (4]'
  {-j,--jobs}'[number of files to process in parallel.]'
  {-k,--keep-direct-and-as}'[turns off default behavior that removes direct imports]'
  {-l,--lines}'[\[Deprecated\] The max length of an import line (used]'
  {-lai,--lines-after-imports}'[]'
  {-lbt,--lines-between-types}'[]'
  {-le,--line-ending}'[forces line endings to the specified value. If not]'
  {-ls,--length-sort}'[sort imports by their string length.]'
  '-m[0,1,2,3,4,5,6,7}, --multi-line {0,1,2,3,4,5,6,7}]'
  {-nis,--no-inline-sort}'[leaves `from` imports with multiple imports as-is]'
  {-nlb,--no-lines-before}'[sections which should not be split with previous by]'
  {-ns,--dont-skip}'[files that sort imports should never skip over.]'
  {-o,--thirdparty}'[force sortImports to recognize a module as being part]'
  {-ot,--order-by-type}'[order imports by type in addition to alphabetically]'
  {-p,--project}'[force sortImports to recognize a module as being part]'
  {-q,--quiet}'[shows extra quiet output, only errors are outputted.]'
  '-r[]'
  {-rm,--remove-import}'[removes the specified import from all files.]'
  {-rr,--reverse-relative}'[reverse order of relative imports.]'
  {-rc,--recursive}'[recursively look for Python files of which to sort]'
  {-s,--skip}'[files that sort imports should skip over. If you want]'
  '--skip[1 --skip file2.]'
  {-sd,--section-default}'[sets the default section for imports (by default]'
  {-sg,--skip-glob}'[files that sort imports should skip over.]'
  {-sl,--force-single-line-imports}'[forces all from imports to appear on their own line]'
  {-sp,--settings-path}'[explicitly set the settings path instead of auto]'
  {-t,--top}'[force specific imports to the top of their appropriate]'
  {-tc,--trailing-comma}'[includes a trailing comma on multi line imports that]'
  {-up,--use-parentheses}'[use parenthesis for line continuation on length limit]'
  {-v,--version}'[]'
  {-vb,--verbose}'[shows verbose output, such as when files are skipped]'
  '--virtual-env[virtual environment to use for determining whether a]'
  '--conda-env[conda environment to use for determining whether a]'
  {-vn,--version-number}'[returns just the current version number without the]'
  {-w,--line-width}'[the max length of an import line (used for wrapping]'
  {-wl,--wrap-length}'[specifies how long lines that are wrapped should be]'
  {-ws,--ignore-whitespace}'[tells isort to ignore whitespace differences when]'
  '--check-only[being used.]'
  {-y,--apply}'[tells isort to apply changes recursively without]'
  '--unsafe[tells isort to look for files in standard library]'
  '--case-sensitive[tells isort to include casing when sorting module]'
  '--filter-files[tells isort to filter files even when they are]'
  '*:filename:_files'
)

_arguments -s $arguments
