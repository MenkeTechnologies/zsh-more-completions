#compdef eu-elfclassify

local arguments

arguments=(
  '--executable[can pass for a file.]'
  '--core[file is an ELF core dump file]'
  '--debug-only[file is a debug only ELF file (separate .debug]'
  '--elf[file looks like an ELF object or archive/static]'
  '--elf-archive[file is an ELF archive or static library]'
  '--elf-file[file is an regular ELF object (not an]'
  '--executable[file is (primarily) an ELF program executable (not]'
  '--library[file is an ELF shared object (DSO) (might also be]'
  '--linux-kernel-module[file is a linux kernel module]'
  '--loadable[file is a loadable ELF object (program or shared]'
  '--program[file is an ELF program executable (might also be a]'
  '--shared[file is (primarily) an ELF shared object (DSO)]'
  '--unstripped[file is an ELF file with symbol table or .debug_*]'
  {-f,--file}'[only classify regular (not symlink nor special]'
  '--no-stdin[do not read files from standard input (default)]'
  '--stdin[also read file names to process from standard]'
  '--stdin0[also read file names to process from standard]'
  {-z,--compressed}'[try to open compressed files or embedded (kernel)]'
  '--matching[if printing file names, print matching files]'
  '--no-print[do not output file names]'
  '--not-matching[if printing file names, print files that do not]'
  '--print[output names of files, separated by newline]'
  '--print0[output names of files, separated by ASCII NUL]'
  {-q,--quiet}'[suppress some error output (counterpart to]'
  '--verbose[)]'
  {-v,--verbose}'[output additional information (can be specified]'
  '--usage[give a short usage message]'
  {-V,--version}'[print program version]'
  '*:filename:_files'
)

_arguments -s $arguments
