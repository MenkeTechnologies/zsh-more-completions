#compdef xjc

local arguments

arguments=(
  '-nv[do not perform strict validation of the input schema(s)]'
  '-extension[allow vendor extensions - do not strictly follow the]'
  '-b[/dir> : specify external bindings files (each <file> must have its own -b)]'
  '-d[generated files will go into this directory]'
  '-p[specifies the target package]'
  '-httpproxy[set HTTP/HTTPS proxy. Format is \[user\[:password\]@\]proxyHost:proxyPort]'
  '-httpproxyfile[Works like -httpproxy but takes the argument in a file to protect password]'
  '-classpath[specify where to find user class files]'
  '-catalog[specify catalog files to resolve external entity references]'
  '-readOnly[generated files will be in read-only mode]'
  '-npa[suppress generation of package level annotations (**/package-info.java)]'
  '-no-header[suppress generation of a file header with timestamp]'
  '-target[2.0|2.1) : behave like XJC 2.0 or 2.1 and generate code that doesnt use any 2.2 features.]'
  '-encoding[specify character encoding for generated source files]'
  '-enableIntrospection[enable correct generation of Boolean getters/setters to enable Bean Introspection apis]'
  '-disableXmlSecurity[disables XML security features when parsing XML documents]'
  '-contentForWildcard[generates content property for types with multiple xs:any derived elements]'
  '-xmlschema[treat input as W3C XML Schema (default)]'
  '-relaxng[treat input as RELAX NG (experimental,unsupported)]'
  '-relaxng-compact[treat input as RELAX NG compact syntax (experimental,unsupported)]'
  '-dtd[treat input as XML DTD (experimental,unsupported)]'
  '-wsdl[treat input as WSDL and compile schemas inside it (experimental,unsupported)]'
  '-verbose[be extra verbose]'
  '-quiet[suppress compiler output]'
  '-help[display this help message]'
  '-version[display version information]'
  '-fullversion[display full version information]'
  '-Xinject-code[inject specified Java code fragments into the generated code]'
  '-Xlocator[enable source location support for generated code]'
  '-Xsync-methods[generate accessor methods with the synchronized keyword]'
  '-mark-generated[mark the generated code as @javax.annotation.Generated]'
  '-episode[generate the episode file for separate compilation]'
  '-Xpropertyaccessors[use XmlAccessType PROPERTY instead of FIELD for generated classes]'
  '*:filename:_files'
)

_arguments -s $arguments
