#compdef mongosh

local arguments

arguments=(
  {-h,--help}'[show this usage information]'
  {-f,--file}'[load the specified mongosh script]'
  '--host[server to connect to]'
  '--port[port to connect to]'
  '--version[show version information]'
  '--verbose[increase the verbosity of the output of the shell]'
  '--quiet[silence output from the shell during the connection process]'
  '--shell[run the shell after executing files]'
  '--nodb[dont connect to mongod on startup - no db address \[arg\] expected]'
  '--norc[will not run the .mongoshrc.js file on start up]'
  '--eval[evaluate javascript]'
  '--retryWrites[automatically retry write operations upon transient network errors]'
  {-u,--username}'[username for authentication]'
  {-p,--password}'[password for authentication]'
  '--authenticationDatabase[user source (defaults to dbname)]'
  '--authenticationMechanism[authentication mechanism]'
  '--awsIamSessionToken[AWS IAM Temporary Session Token ID]'
  '--gssapiServiceName[service name to use when authenticating using GSSAPI/Kerberos]'
  '--sspiHostnameCanonicalization[specify the SSPI hostname canonicalization (none or forward, available on Windows)]'
  '--sspiRealmOverride[specify the SSPI server realm (available on Windows)]'
  '--tls[use TLS for all connections]'
  '--tlsCertificateKeyFile[PEM certificate/key file for TLS]'
  '--tlsCertificateKeyFilePassword[password for key in PEM file for TLS]'
  '--tlsCAFile[certificate Authority file for TLS]'
  '--tlsAllowInvalidHostnames[allow connections to servers with non-matching hostnames]'
  '--tlsAllowInvalidCertificates[allow connections to servers with invalid certificates]'
  '--tlsCertificateSelector[TLS Certificate in system store (Windows and macOS only)]'
  '--tlsCRLFile[specifies the .pem file that contains the Certificate Revocation List]'
  '--tlsDisabledProtocols[comma separated list of TLS protocols to disable \[TLS1_0,TLS1_1,TLS1_2\]]'
  '--apiVersion[specifies the API version to connect with]'
  '--apiStrict[use strict API version mode]'
  '--apiDeprecationErrors[fail deprecated commands for the specified API version]'
  '--awsAccessKeyId[AWS Access Key for FLE Amazon KMS]'
  '--awsSecretAccessKey[AWS Secret Key for FLE Amazon KMS]'
  '--awsSessionToken[optional AWS Session Token ID]'
  '--keyVaultNamespace[database.collection to store encrypted FLE parameters]'
  '--kmsURL[test parameter to override the URL of the KMS endpoint]'
  '*:filename:_files'
)

_arguments -s $arguments
