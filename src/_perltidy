#compdef perltidy

local arguments

arguments=(
  '-h[show this help]'
  '-o[name of the output file (only if single input file)]'
  '-oext[change output extension from tdy to s]'
  '-opath[change path to be path for output files]'
  '-b[backup original to .bak and modify file in-place]'
  '-bext[change default backup extension from bak to s]'
  '-q[deactivate error messages (for running under editor)]'
  '-w[include non-critical warning messages in the .ERR error output]'
  '-syn[run perl -c to check syntax (default under unix systems)]'
  '-log[save .LOG file, which has useful diagnostics]'
  '-f[force perltidy to read a binary file]'
  '-g[like -log but writes more detailed .LOG file, for debugging scripts]'
  '-opt[write the set of options actually used to a .LOG file]'
  '-npro[ignore .perltidyrc configuration command file]'
  '-pro[read configuration commands from file instead of .perltidyrc]'
  '-st[send output to standard output, STDOUT]'
  '-se[send all error output to standard error output, STDERR]'
  '-v[display version number to standard output and quit]'
  '-i[use n columns per indentation level (default n=4)]'
  '-t[tabs: use one tab character per indentation level, not recommeded]'
  '-nt[no tabs: use n spaces per indentation level (default)]'
  '-et[entab leading whitespace n spaces per tab; not recommended]'
  '-io["indent only": just do indentation, no other formatting.]'
  '-sil[set starting indentation level to n; use if auto detection fails]'
  '-ole[specify output line ending (s=dos or win, mac, unix)]'
  '-ple[keep output line endings same as input (input must be filename)]'
  '-fws[freeze whitespace; this disables all whitespace changes]'
  '-bt[sets brace tightness, n= (0 = loose, 1=default, 2 = tight)]'
  '-bbt[same as -bt but for code block braces; same as -bt if not given]'
  '-bbvt[block braces vertically tight; use with -bl or -bli]'
  '-bbvtl[make -bbvt to apply to selected list of block types]'
  '-pt[paren tightness (n=0, 1 or 2)]'
  '-sbt[square bracket tightness (n=0, 1, or 2)]'
  '-bvt[brace vertical tightness]'
  '-pvt[paren vertical tightness (see -bvt for n)]'
  '-sbvt[square bracket vertical tightness (see -bvt for n)]'
  '-bvtc[closing brace vertical tightness:]'
  '-pvtc[closing paren vertical tightness, see -bvtc for n.]'
  '-sbvtc[closing square bracket vertical tightness, see -bvtc for n.]'
  '-ci[sets continuation indentation=n, default is n=2 spaces]'
  '-lp[line up parentheses, brackets, and non-BLOCK braces]'
  '-sfs[add space before semicolon in for( ; ; )]'
  '-aws[allow perltidy to add whitespace (default)]'
  '-dws[delete all old non-essential whitespace]'
  '-icb[indent closing brace of a code block]'
  '-cti[closing indentation of paren, square bracket, or non-block brace:]'
  '-icp[equivalent to -cti=2]'
  '-wls[want space left of tokens in string; i.e. -nwls=+ - * /]'
  '-wrs[want space right of tokens in string;]'
  '-sts[put space before terminal semicolon of a statement]'
  '-sak[put space between keywords given in s and (;]'
  '-nsak[no space between keywords in s and (; i.e. -nsak=my our local]'
  '-fnl[freeze newlines; this disables all line break changes]'
  '-anl[add newlines; ok to introduce new line breaks]'
  '-bbs[add blank line before subs and packages]'
  '-bbc[add blank line before block comments]'
  '-bbb[add blank line between major blocks]'
  '-kbl[keep old blank lines? 0=no, 1=some, 2=all]'
  '-mbl[maximum consecutive blank lines to output (default=1)]'
  '-ce[cuddled else; use this style: } else {]'
  '-cb[cuddled blocks (other than if-elsif-else)]'
  '-cbl[list of blocks to cuddled, default try-catch-finally]'
  '-dnl[delete old newlines (default)]'
  '-l[maximum line length; default n=80]'
  '-bl[opening brace on new line]'
  '-sbl[opening sub brace on new line. value of -bl is used if not given.]'
  '-bli[opening brace on new line and indented]'
  '-bar[opening brace always on right, even for long clauses]'
  '-vt[vertical tightness (requires -lp); n controls break after opening]'
  '-vtc[vertical tightness of closing container; n controls if closing]'
  '-wba[want break after tokens in string; i.e. wba=: .]'
  '-wbb[want break before tokens in string]'
  '-wn[weld nested: combines opening and closing tokens when both are adjacent]'
  '-kis[keep interior semicolons. Allows multiple statements per line.]'
  '-boc[break at old comma breaks: turns off all automatic list formatting]'
  '-bol[break at old logical breakpoints: or, and, ||, && (default)]'
  '-bom[break at old method call breakpoints: ->]'
  '-bok[break at old list keyword breakpoints such as map, sort (default)]'
  '-bot[break at old conditional (ternary ?:) operator breakpoints (default)]'
  '-boa[break at old attribute breakpoints]'
  '-cab[break at commas after a comma-arrow (=>):]'
  '-ibc[indent block comments (default)]'
  '-isbc[indent spaced block comments; may indent unless no leading space]'
  '-msc[minimum desired spaces to side comment, default 4]'
  '-fpsc[fix position for side comments; default 0;]'
  '-csc[add or update closing side comments after closing BLOCK brace]'
  '-dcsc[delete closing side comments created by a -csc command]'
  '-cscp[change closing side comment prefix to be other than ## end]'
  '-cscl[change closing side comment to apply to selected list of blocks]'
  '-csci[minimum number of lines needed to apply a -csc tag, default n=6]'
  '-csct[maximum number of columns of appended text, default n=20]'
  '-cscw[causes warning if old side comment is overwritten with -csc]'
  '-sbc[use static block comments identified by leading ## (default)]'
  '-sbcp[change static block comment identifier to be other than ##]'
  '-osbc[outdent static block comments]'
  '-ssc[use static side comments identified by leading ## (default)]'
  '-sscp[change static side comment identifier to be other than ##]'
  '-dac[delete all comments AND pod]'
  '-dbc[delete block comments]'
  '-dsc[delete side comments]'
  '-dp[delete pod]'
  '-tac[tee all comments AND pod]'
  '-tbc[tee block comments]'
  '-tsc[tee side comments]'
  '-tp[tee pod]'
  '-olq[outdent long quoted strings (default)]'
  '-olc[outdent a long block comment line]'
  '-ola[outdent statement labels]'
  '-okw[outdent control keywords (redo, next, last, goto, return)]'
  '-okwl[specify alternative keywords for -okw command]'
  '-mft[maximum fields per table; default n=40]'
  '-x[do not format lines before hash-bang line (i.e., for VMS)]'
  '-asc[allows perltidy to add a ; when missing (default)]'
  '-dsm[allows perltidy to delete an unnecessary ; (default)]'
  '-gnu[attempt to follow GNU Coding Standards as applied to perl]'
  '-mangle[remove as many newlines as possible (but keep comments and pods)]'
  '-extrude[insert as many newlines as possible]'
  '-dop[dump options used in this run to standard output and quit]'
  '-ddf[dump default options to standard output and quit]'
  '-dsn[dump all option short names to standard output and quit]'
  '-dln[dump option long names to standard output and quit]'
  '-dpro[dump whatever configuration file is in effect to standard output]'
  '-dtt[dump all token types to standard output and quit]'
  '-html[an html file (see man perl2web for many options)]'
  '-nnn[line numbers]'
  '-pre[writes out <pre>..</pre> code section]'
  '-toc[a table of contents to subs at the top (default)]'
  '-pod[pod text through pod2html (default)]'
  '-frm[html as a frame (3 files)]'
  '-text[extra extension for table of contents if -frm, default=toc]'
  '-sext[extra extension for file content if -frm, default=src]'
  '*:perl filename:_files -g "*.pl"'
)

_arguments -s $arguments
