#compdef ppx-jane

local arguments

arguments=(
  '-as-ppx[run as a -ppx rewriter (must be the first argument)]'
  '--as-ppx[same as -as-ppx]'
  '-as-pp[shorthand for: -dump-ast -embed-errors]'
  '--as-pp[same as -as-pp]'
  '-o[output file (use - for stdout)]'
  '-dump-ast[dump the marshaled ast to the output file instead of pretty-printing it]'
  '--dump-ast[same as -dump-ast]'
  '-dparsetree[print the parsetree (same as ocamlc -dparsetree)]'
  '-embed-errors[embed errors in the output AST (default: true when -dump-ast, false otherwise)]'
  '-null[produce no output, except for errors]'
  '-impl[treat the input as a .ml file]'
  '--impl[same as -impl]'
  '-intf[treat the input as a .mli file]'
  '--intf[same as -intf]'
  '-debug-attribute-drop[debug attribute dropping]'
  '-print-transformations[print linked-in code transformations, in the order they are applied]'
  '-print-passes[print the actual passes over the whole AST in the order they are applied]'
  '-ite-check[(no effect -- kept for compatibility)]'
  '-pp[pipe sources through preprocessor <command> (incompatible with -as-ppx)]'
  '-reconcile[(WIP) Pretty print the output using a mix of the input source and the generated code]'
  '-reconcile-with-comments[(WIP) same as -reconcile but uses comments to enclose the generated code]'
  '-no-color[dont use colors when printing errors]'
  '-diff-cmd[diff command when using code expectations (use - to disable diffing)]'
  '-pretty[instruct code generators to improve the prettiness of the generated code]'
  '-styler[code styler]'
  '-output-metadata[where to store the output metadata]'
  '-corrected-suffix[suffix to append to corrected files]'
  '-loc-filename[file name to use in locations]'
  '-reserve-namespace[mark the given namespace as reserved]'
  '-no-check[disable checks (unsafe)]'
  '-check[enable checks]'
  '-no-check-on-extensions[disable checks on extension point only]'
  '-check-on-extensions[enable checks on extension point only]'
  '-no-locations-check[disable locations check only]'
  '-locations-check[enable locations check only]'
  '-apply[apply these transformations in order (comma-separated list)]'
  '-dont-apply[exclude these transformations]'
  '-no-merge[do not merge context free transformations (better for debugging rewriters)]'
  '-cookie[EXPR                    Set the cookie NAME to EXPR]'
  '--cookie[same as -cookie]'
  '-deriving-keep-w32[}]'
  '-deriving-disable-w32-method[}]'
  '-type-conv-keep-w32[}]'
  '-type-conv-w32[}]'
  '-annotated-ignores[if set, forces all ignored expressions (either under ignore or inside a "let _ = ...") to have a type annotation. (This is the default.)]'
  '-allow-unannotated-ignores[if set, allows ignored expressions (either under ignore or inside a "let _ = ...") not to have a type annotation.]'
  '-compat-32[if set, checks that all constants are representable on 32bit architectures.]'
  '-dont-check-doc-comments-attachment[ignore warning 50 on the file.]'
  '-dont-check-underscored-literal[do not check position of underscores in numbers.]'
  '-check-doc-comments[if set, ensures that all comments in .mli files are either documentation or (*_ *) comments. Also check the syntax of doc comments.]'
  '-allow-toplevel-expression[if set, allow toplevel expression.]'
  '-dated-deprecation[if set, ensures that all `\[@@deprecated\]` attributes must contain \]'
  '-no-dated-deprecation[inverse of -dated-deprecation.]'
  '-allow-let-operators[allow uses of let-operators]'
  '-forbid-let-operators[forbid uses of let-operators]'
  '-dirname[name of the current directory relative to the root of the project]'
  '-inline-test-lib[A base name to use for generated identifiers (has to be globally unique in a program).ppx_inline_test (and ppx_bench) are disabled unless this flag is passed.]'
  '-bench-drop[drop inline benchmarks]'
  '-bench-drop-with-deadcode[drop inline benchmarks by wrapping them inside deadcode to prevent unused variable warnings.]'
  '-inline-test-drop[drop unit tests]'
  '-inline-test-drop-with-deadcode[drop unit tests by wrapping them inside deadcode to prevent unused variable warnings.]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
