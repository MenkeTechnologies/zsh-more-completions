#compdef ocamldep

local arguments

arguments=(
  '-absname[show absolute filenames in error messages]'
  '-all[generate dependencies on all files]'
  '-allow-approx[fallback to a lexer-based approximation on unparseable files]'
  '-as-map[omit delayed dependencies for module aliases (-no-alias-deps -w -49)]'
  '-debug-map[dump the delayed dependency map for each map file]'
  '-I[add <dir> to the list of include directories]'
  '-impl[process <f> as a .ml file]'
  '-intf[process <f> as a .mli file]'
  '-map[read <f> and propagate delayed dependencies to following files]'
  '-ml-synonym[consider <e> as a synonym of the .ml extension]'
  '-mli-synonym[consider <e> as a synonym of the .mli extension]'
  '-modules[print module dependencies in raw form (not suitable for make)]'
  '-native[generate dependencies for native-code only (no .cmo files)]'
  '-bytecode[generate dependencies for bytecode-code only (no .cmx files)]'
  '-one-line[output one line per file, regardless of the length]'
  '-open[opens the module <module> before typing]'
  '-plugin[load dynamic plugin <plugin>]'
  '-pp[pipe sources through preprocessor <cmd>]'
  '-ppx[pipe abstract syntax trees through preprocessor <cmd>]'
  '-slash[(Windows) Use forward slash / instead of backslash \ in file paths]'
  '-sort[sort files according to their dependencies]'
  '-version[print version and exit]'
  '-vnum[print version number and exit]'
  '-args[read additional newline separated command line arguments]'
  '-args0[read additional NUL separated command line arguments from]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
