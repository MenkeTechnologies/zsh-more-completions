#compdef ppca64

local arguments

arguments=(
  '-a[the compiler does not delete the generated assembler file]'
  '-a5[dont generate Big Obj COFF files for GNU Binutils older than 2.25 (Windows, NativeNT)]'
  '-al[list sourcecode lines in assembler file]'
  '-an[list node info in assembler file (-dEXTDEBUG compiler)]'
  '-ao[add an extra option to external assembler call (ignored for internal)]'
  '-ap[use pipes instead of creating temporary assembler files]'
  '-ar[list register allocation/release info in assembler file]'
  '-at[list temp allocation/release info in assembler file]'
  '-A[<x>  Output format:]'
  '-Adefault[use default assembler]'
  '-b[generate browser info]'
  '-bl[generate local symbol info]'
  '-B[build all modules]'
  '-C[<x>  Code generation options:]'
  '-C3[turn on ieee error checking for constants]'
  '-Ca[<x>     Select ABI; see fpc -i or fpc -ia for possible values]'
  '-Cb[generate code for a big-endian variant of the target architecture]'
  '-Cc[<x>     Set default calling convention to <x>]'
  '-CD[create also dynamic library (not supported)]'
  '-Ce[compilation with emulated floating point opcodes]'
  '-Cf[<x>     Select fpu instruction set to use; see fpc -i or fpc -if for possible values]'
  '-CF[<x>     Minimal floating point constant precision (default, 32, 64)]'
  '-Cg[generate PIC code]'
  '-Ch[<n>\[,m\] <n> bytes min heap size (between 1023 and 67107840) and optionally \[m\] max heap size]'
  '-Ci[IO-checking]'
  '-Cn[omit linking stage]'
  '-Co[check overflow of integer operations]'
  '-CO[check for possible overflow of integer operations]'
  '-Cp[<x>     Select instruction set; see fpc -i or fpc -ic for possible values]'
  '-CP[<x>=<y>  packing settings]'
  '-CPPACKSET[<y> set allocation: 0, 1 or DEFAULT or NORMAL, 2, 4 and 8]'
  '-CPPACKENUM[<y> enum packing: 0, 1, 2 and 4 or DEFAULT or NORMAL]'
  '-CPPACKRECORD[<y> record packing: 0 or DEFAULT or NORMAL, 1, 2, 4, 8, 16 and 32]'
  '-Cr[range checking]'
  '-CR[verify object method call validity]'
  '-Cs[<n>     Set stack checking size to <n>]'
  '-Ct[stack checking (for testing only, see manual)]'
  '-CX[create also smartlinked library]'
  '-d[<x>  Defines the symbol <x>]'
  '-D[generate a DEF file]'
  '-Dd[<x>     Set description to <x>]'
  '-Dv[<x>     Set DLL version to <x>]'
  '-e[<x>  Set path to executable]'
  '-E[same as -Cn]'
  '-fPIC[same as -Cg]'
  '-F[<x>  Set file names and paths:]'
  '-Fa[<x>\[,y\] (for a program) load units <x> and \[y\] before uses is parsed]'
  '-Fc[<x>     Set input codepage to <x>]'
  '-FC[<x>     Set RC compiler binary name to <x>]'
  '-Fd[disable the compilers internal directory cache]'
  '-FD[<x>     Set the directory where to search for compiler utilities]'
  '-Fe[<x>     Redirect error output to <x>]'
  '-Ff[<x>     Add <x> to framework path (Darwin only)]'
  '-FE[<x>     Set exe/unit output path to <x>]'
  '-Fi[<x>     Add <x> to include path]'
  '-Fl[<x>     Add <x> to library path]'
  '-FL[<x>     Use <x> as dynamic linker]'
  '-Fm[<x>     Load unicode conversion table from <x>.txt in the compiler dir]'
  '-FM[<x>     Set the directory where to search for unicode binary files]'
  '-FN[<x>     Add <x> to list of default unit scopes (namespaces)]'
  '-Fo[<x>     Add <x> to object path]'
  '-Fr[<x>     Load error message file <x>]'
  '-FR[<x>     Set resource (.res) linker to <x>]'
  '-Fu[<x>     Add <x> to unit path]'
  '-FU[<x>     Set unit output path to <x>, overrides -FE]'
  '-FW[<x>     Store generated whole-program optimization feedback in <x>]'
  '-Fw[<x>     Load previously stored whole-program optimization feedback from <x>]'
  '-g[generate debug information (default format for target)]'
  '-gc[generate checks for pointers (experimental, only available on some targets, might generate false positive)]'
  '-gh[use heaptrace unit (for memory leak/corruption debugging)]'
  '-gl[use line info unit (show more info with backtraces)]'
  '-gm[generate Microsoft CodeView debug information (experimental)]'
  '-go[<x>     Set debug information options]'
  '-godwarfsets[enable DWARF set type debug information (breaks gdb < 6.5)]'
  '-gostabsabsincludes[store absolute/full include file paths in Stabs]'
  '-godwarfmethodclassprefix[prefix method names in DWARF with class name]'
  '-godwarfcpp[simulate C++ debug information in DWARF]'
  '-godwarfomflinnum[generate line number information in OMF LINNUM records in MS LINK format in addition to the DWARF debug information (Open Watcom Debugger/Linker compatibility)]'
  '-gp[preserve case in stabs symbol names]'
  '-gs[generate Stabs debug information]'
  '-gt[trash local variables (to detect uninitialized uses; multiple t changes the trashing value)]'
  '-gv[generates programs traceable with Valgrind]'
  '-gw[generate DWARFv2 debug information (same as -gw2)]'
  '-gw2[generate DWARFv2 debug information]'
  '-gw3[generate DWARFv3 debug information]'
  '-gw4[generate DWARFv4 debug information (experimental)]'
  '-i[information]'
  '-iD[return compiler date]'
  '-iSO[return compiler OS]'
  '-iSP[return compiler host processor]'
  '-iTO[return target OS]'
  '-iTP[return target processor]'
  '-iV[return short compiler version]'
  '-iW[return full compiler version]'
  '-ia[return list of supported ABI targets]'
  '-ic[return list of supported CPU instruction sets]'
  '-if[return list of supported FPU instruction sets]'
  '-ii[return list of supported inline assembler modes]'
  '-io[return list of supported optimizations]'
  '-ir[return list of recognized compiler and RTL features]'
  '-it[return list of supported targets]'
  '-iu[return list of supported microcontroller types]'
  '-iw[return list of supported whole program optimizations]'
  '-I[<x>  Add <x> to include path]'
  '-k[<x>  Pass <x> to the linker]'
  '-l[write logo]'
  '-M[<x>  Set language mode to <x>]'
  '-Mfpc[free Pascal dialect (default)]'
  '-Mobjfpc[FPC mode with Object Pascal support]'
  '-Mdelphi[delphi 7 compatibility mode]'
  '-Mtp[TP/BP 7.0 compatibility mode]'
  '-Mmacpas[macintosh Pascal dialects compatibility mode]'
  '-Miso[ISO 7185 mode]'
  '-Mextendedpascal[10206 mode]'
  '-Mdelphiunicode[2009 and later compatibility mode]'
  '-n[do not read the default config files]'
  '-o[<x>  Change the name of the executable produced to <x>]'
  '-O[<x>  Optimizations:]'
  '-O-[disable optimizations]'
  '-O1[level 1 optimizations (quick and debugger friendly)]'
  '-O2[level 2 optimizations (-O1 + quick optimizations)]'
  '-O3[level 3 optimizations (-O2 + slow optimizations)]'
  '-O4[level 4 optimizations (-O3 + optimizations which might have unexpected side effects)]'
  '-Oa[<x>=<y> Set alignment]'
  '-Oo[enable or disable optimizations; see fpc -i or fpc -io for possible values]'
  '-Op[<x>     Set target cpu for optimizing; see fpc -i or fpc -ic for possible values]'
  '-OW[<x>     Generate whole-program optimization feedback for optimization <x>; see fpc -i or fpc -iw for possible values]'
  '-Ow[<x>     Perform whole-program optimization <x>; see fpc -i or fpc -iw for possible values]'
  '-Os[optimize for size rather than speed]'
  '-pg[generate profile code for gprof (defines FPC_PROFILE)]'
  '-R[<x>  Assembler reading style:]'
  '-Rdefault[use default assembler for target]'
  '-S[<x>  Syntax options:]'
  '-S2[same as -Mobjfpc]'
  '-Sc[support operators like C (*=,+=,/= and -=)]'
  '-Sa[turn on assertions]'
  '-Sd[same as -Mdelphi]'
  '-Se[<x>     Error options. <x> is a combination of the following:]'
  '-Sf[enable certain features in compiler and RTL; see fpc -i or fpc -ir for possible values)]'
  '-Sg[enable LABEL and GOTO (default in -Mtp and -Mdelphi)]'
  '-Sh[use reference counted strings (ansistring by default) instead of shortstrings]'
  '-Si[turn on inlining of procedures/functions declared as "inline"]'
  '-Sj[allows typed constants to be writeable (default in all modes)]'
  '-Sk[load fpcylix unit]'
  '-SI[<x>     Set interface style to <x>]'
  '-SIcom[COM compatible interface (default)]'
  '-SIcorba[CORBA compatible interface]'
  '-Sm[support macros like C (global)]'
  '-So[same as -Mtp]'
  '-Sr[transparent file names in ISO mode]'
  '-Ss[constructor name must be init (destructor must be done)]'
  '-Sv[support vector processing (use CPU vector extensions if available)]'
  '-Sx[enable exception keywords (default in Delphi/ObjFPC modes)]'
  '-Sy[@<pointer> returns a typed pointer, same as $T+]'
  '-s[do not call assembler and linker]'
  '-sh[generate script to link on host]'
  '-st[generate script to link on target]'
  '-sr[skip register allocation phase (use with -alr)]'
  '-T[<x>  Target operating system:]'
  '-Tdarwin[darwin/iOS]'
  '-Tlinux[linux]'
  '-u[<x>  Undefines the symbol <x>]'
  '-U[unit options:]'
  '-Un[do not check where the unit name matches the file name]'
  '-Ur[generate release unit files (never automatically recompiled)]'
  '-Us[compile a system unit]'
  '-v[<x>  Be verbose. <x> is a combination of the following letters:]'
  '-W[<x>  Target-specific options (targets)]'
  '-Wb[create a bundle instead of a library (Darwin)]'
  '-We[use external resources (Darwin)]'
  '-Wi[use internal resources (Darwin)]'
  '-WP[<x>     Minimum iOS deployment version: 7.0, 7.1.2, ... (Darwin)]'
  '-WX[enable executable stack (Linux)]'
  '-X[executable options:]'
  '-X9[generate linkerscript for GNU Binutils ld older than version 2.19.1 (Linux)]'
  '-Xc[pass --shared/-dynamic to the linker (BeOS, Darwin, FreeBSD, Linux)]'
  '-Xd[do not search default library path (sometimes required for cross-compiling when not using -XR)]'
  '-Xe[use external linker]'
  '-Xf[substitute pthread library name for linking (BSD)]'
  '-Xg[create debuginfo in a separate file and add a debuglink section to executable]'
  '-XD[try to link units dynamically      (defines FPC_LINK_DYNAMIC)]'
  '-Xi[use internal linker]'
  '-XLA[define library substitutions for linking]'
  '-XLO[define order of library linking]'
  '-XLD[exclude default order of standard libraries]'
  '-Xm[generate link map]'
  '-XM[<x>     Set the name of the main program routine (default is main)]'
  '-Xn[use target system native linker instead of GNU ld (Solaris, AIX)]'
  '-XP[<x>     Prepend the binutils names with the prefix <x>]'
  '-Xr[<x>     Set the linkers rlink-path to <x> (needed for cross compile, see the ld manual for more information) (BeOS, Linux)]'
  '-XR[<x>     Prepend <x> to all linker search paths (BeOS, Darwin, FreeBSD, Linux, Mac OS, Solaris)]'
  '-Xs[strip all symbols from executable]'
  '-XS[try to link units statically (default, defines FPC_LINK_STATIC)]'
  '-Xt[link with static libraries (-static is passed to linker)]'
  '-Xv[generate table for Virtual Entry calls]'
  '-XV[use VLink as external linker       (default on Amiga, MorphOS)]'
  '-XX[try to smartlink units             (defines FPC_LINK_SMART)]'
  '-h[shows this help without waiting]'
  '*:filename:_files'
)

_arguments -s $arguments
