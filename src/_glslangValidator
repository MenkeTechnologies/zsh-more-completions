#compdef glslangValidator

local arguments

arguments=(
  '-C[cascading errors; risk crash from accumulation of error recoveries]'
  '-D[input is HLSL (this is the default when any suffix is .hlsl)]'
  '-D[<macro=def>]'
  '-D[<macro>   define a pre-processor macro]'
  '-E[print pre-processed GLSL; cannot be used with -l;]'
  '-G[create SPIR-V binary, under OpenGL semantics; turns on -l;]'
  '-H[print human readable form of SPIR-V; turns on -V]'
  '-I[<dir>     add dir to the include search path; includers directory]'
  '-Od[disables optimization; may cause illegal SPIR-V for HLSL]'
  '-Os[optimizes SPIR-V to minimize size]'
  '-S[uses specified stage rather than parsing the file extension]'
  '-U[<macro>   undefine a pre-processor macro]'
  '-V[create SPIR-V binary, under Vulkan semantics; turns on -l;]'
  '-c[configuration dump;]'
  '-d[default to desktop (#version 110) when there is no shader #version]'
  '-e[| --entry-point <name>]'
  '-f[{hlsl_functionality1}]'
  '-g[generate debug information]'
  '-h[print this usage message]'
  '-i[intermediate tree (glslang AST) is printed out]'
  '-l[link all input files together to form a single module]'
  '-m[memory leak mode]'
  '-o[save binary to <file>, requires a binary option (e.g., -V)]'
  '-q[dump reflection query database; requires -l for linking]'
  {-r,--relaxed-errors}'[relaxed GLSL semantic error-checking mode]'
  '-s[silence syntax and semantic error reporting]'
  '-t[multi-threaded mode]'
  {-v,--version}'[print version strings]'
  {-w,--suppress-warnings}'[suppress GLSL warnings, except as required by "#extension : warn"]'
  '-x[save binary output as text-based 32-bit hexadecimal numbers]'
  '-u[<name>:<loc> specify a uniform location override for --aml]'
  '--uniform-base[set a base to use for generated uniform locations]'
  {--auto-map-bindings,--amb}'[automatically bind uniform variables]'
  {--auto-map-locations,--aml}'[automatically locate input/output lacking]'
  '--client[} see -V and -G]'
  '--dump-builtin-symbols[prints builtin symbol table prior each compile]'
  {-dumpfullversion,-dumpversion}'[print bare major.minor.patchlevel]'
  {--flatten-uniform-arrays,--fua}'[flatten uniform texture/sampler arrays to]'
  '--hlsl-offsets[allow block offsets to follow HLSL rules]'
  '--hlsl-iomap[perform IO mapping in HLSL register space]'
  '--hlsl-enable-16bit-types[allow 16-bit types in SPIR-V for HLSL]'
  '--hlsl-dx9-compatible[interprets sampler declarations as a]'
  {--invert-y,--iy}'[invert position.Y output in vertex shader]'
  {--keep-uncalled,--ku}'[dont eliminate uncalled functions]'
  '--nan-clamp[favor non-NaN operand in min, max, and clamp]'
  {--no-storage-format,--nsf}'[use Unknown image format]'
  '--reflect-strict-array-suffix[use strict array suffix rules when]'
  '--reflect-basic-array-suffix[arrays of basic types will have trailing \[0\]]'
  '--reflect-intermediate-io[reflection includes inputs/outputs of linked]'
  '--reflect-separate-buffers[reflect buffer variables and blocks]'
  '--reflect-all-block-variables[reflect all variables in blocks, whether]'
  '--reflect-unwrap-io-blocks[unwrap input/output blocks the same as]'
  '--resource-set-binding[name set binding]'
  '--resource-set-binding[set]'
  '--rsb[synonym for --resource-set-binding]'
  '--shift-image-binding[num]'
  '--shift-image-binding[\[num set\]...]'
  '--sib[synonym for --shift-image-binding]'
  '--shift-sampler-binding[num]'
  '--shift-sampler-binding[\[num set\]...]'
  '--ssb[synonym for --shift-sampler-binding]'
  '--shift-ssbo-binding[num  base binding number for SSBOs]'
  '--shift-ssbo-binding[\[num set\]...]'
  '--sbb[synonym for --shift-ssbo-binding]'
  '--shift-texture-binding[num]'
  '--shift-texture-binding[\[num set\]...]'
  '--stb[synonym for --shift-texture-binding]'
  '--shift-uav-binding[num   base binding number for UAVs]'
  '--shift-uav-binding[\[num set\]...]'
  '--suavb[synonym for --shift-uav-binding]'
  '--shift-UBO-binding[num   base binding number for UBOs]'
  '--shift-UBO-binding[\[num set\]...]'
  '--sub[synonym for --shift-UBO-binding]'
  {--shift-cbuffer-binding,--scb}'[synonyms for --shift-UBO-binding]'
  '--spirv-dis[output standard-form disassembly; works only]'
  '--spirv-val[execute the SPIRV-Tools validator]'
  '--source-entrypoint[the given shader source function is]'
  '--sep[synonym for --source-entrypoint]'
  '--stdin[read from stdin instead of from a file;]'
  '--target-env[1.0 | vulkan1.1 | opengl |]'
  '--variable-name[]'
  '--vn[creates a C header file that contains a]'
  '*:filename:_files'
)

_arguments -s $arguments
