#compdef airodump-ng

local arguments

arguments=(
  '--ivs[: Save only captured IVs]'
  '--gpsd[: Use GPSd]'
  '--write[<prefix> : Dump file prefix]'
  '-w[: same as --write]'
  '--beacons[: Record all beacons in dump file]'
  '--update[<secs> : Display update delay in seconds]'
  '--showack[: Prints ack/cts/rts statistics]'
  '-h[: Hides known stations for --showack]'
  '-f[<msecs> : Time in ms between hopping channels]'
  '--berlin[<secs> : Time before removing the AP/client]'
  '-r[<file> : Read packets from that file]'
  '-x[<msecs> : Active Scanning Simulation]'
  '--manufacturer[: Display manufacturer from IEEE OUI list]'
  '--uptime[: Display AP Uptime from Beacon Timestamp]'
  '--wps[: Display WPS information (if any)]'
  '--output-format[<formats> : Output format. Possible values:]'
  '--ignore-negative-one[removes the message that says]'
  '--write-interval[<seconds> : Output file(s) write interval in seconds]'
  '--background[: Override background detection.]'
  '--encrypt[<suite>   : Filter APs by cipher suite]'
  '--netmask[: Filter APs by mask]'
  '--bssid[<bssid>   : Filter APs by BSSID]'
  '--essid[<essid>   : Filter APs by ESSID]'
  '--essid-regex[: Filter APs by ESSID using a regular]'
  '-a[: Filter unassociated clients]'
  '--ht20[: Set channel to HT20 (802.11n)]'
  '--ht40-[: Set channel to HT40- (802.11n)]'
  '--ht40[+               : Set channel to HT40+ (802.11n)]'
  '--channel[: Capture on specific channels]'
  '--band[: Band on which airodump-ng should hop]'
  '-C[<frequencies>   : Uses these frequencies in MHz to hop]'
  '--cswitch[<method>   : Set channel switching method]'
  '-s[: same as --cswitch]'
  '--help[: Displays this usage screen]'
  '*:filename:_files'
)

_arguments -s $arguments
