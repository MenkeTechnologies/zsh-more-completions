#compdef ocamloptp.byte

local arguments

arguments=(
  '-P[profile constructs specified by argument (default fm):]'
  '-a[build a library]'
  '-absname[show absolute filenames in error messages]'
  '-afl-instrument[instrumentation for afl-fuzz]'
  '-afl-inst-ratio[percentage of branches instrumented]'
  '-annot[save information in <filename>.annot]'
  '-bin-annot[save typedtree in <filename>.cmt]'
  '-inline-branch-factor[<n>\[,...\] Estimate the probability of a branch being cold as 1/(1+n) (used for inlining) (default 0.10)]'
  '-c[compile only (do not link)]'
  '-cc[use <command> as the C compiler and linker]'
  '-cclib[pass option <opt> to the C linker]'
  '-ccopt[pass option <opt> to the C compiler and linker]'
  '-clambda-checks[instrument clambda code with closure and field access checks (for debugging the compiler)]'
  '-Oclassic[make inlining decisions at function definition time rather than at the call site (replicates previous behaviour of the compiler)]'
  '-color[} Enable or disable colors in compiler messages]'
  '-compact[optimize code size rather than speed]'
  '-config[print configuration values and exit]'
  '-dtypes[(deprecated) same as -annot]'
  '-for-pack[generate code that can later be `packed with]'
  '-g[record debugging information for exception backtrace]'
  '-i[print inferred interface]'
  '-I[add <dir> to the list of include directories]'
  '-impl[compile <file> as a .ml file]'
  '-inline[<n>\[,...\] Aggressiveness of inlining (default 1.25, higher numbers mean more aggressive)]'
  '-inline-toplevel[<n>\[,...\] Aggressiveness of inlining at toplevel (higher numbers mean more aggressive)]'
  '-inline-alloc-cost[<n>\[,...\] The cost of not removing an allocation during inlining (default 7, higher numbers more costly)]'
  '-inline-branch-cost[<n>\[,...\] The cost of not removing a conditional during inlining (default 5, higher numbers more costly)]'
  '-inline-call-cost[<n>\[,...\] The cost of not removing a call during inlining (default 5, higher numbers more costly)]'
  '-inline-prim-cost[<n>\[,...\] The cost of not removing a primitive during inlining (default 3, higher numbers more costly)]'
  '-inline-indirect-cost[<n>\[,...\] The cost of not removing an indirect call during inlining (default 4, higher numbers more costly)]'
  '-inline-lifting-benefit[<n>\[,...\] The benefit of lifting definitions to toplevel during inlining (default 1300, higher numbers more beneficial)]'
  '-inlining-report[emit `.<round>.inlining file(s) (one per round) showing the inliners decisions]'
  '-intf[compile <file> as a .mli file]'
  '-intf-suffix[suffix for interface files (default: .mli)]'
  '-keep-docs[keep documentation strings in .cmi files]'
  '-no-keep-docs[do not keep documentation strings in .cmi files (default)]'
  '-keep-locs[keep locations in .cmi files (default)]'
  '-no-keep-locs[do not keep locations in .cmi files]'
  '-labels[use commuting label mode]'
  '-linkall[link all modules, even unused ones]'
  '-inline-max-depth[<n>\[,...\] Maximum depth of search for inlining opportunities inside inlined functions (default 1)]'
  '-alias-deps[do record dependencies for module aliases]'
  '-no-alias-deps[do not record dependencies for module aliases]'
  '-linscan[use the linear scan register allocator]'
  '-app-funct[activate applicative functors]'
  '-no-app-funct[deactivate applicative functors]'
  '-no-float-const-prop[deactivate constant propagation for floating-point operations]'
  '-noassert[do not compile assertion checks]'
  '-noautolink[do not automatically link C libraries specified in .cmxa files]'
  '-nodynlink[enable optimizations for code that will not be dynlinked]'
  '-nolabels[ignore non-optional labels in types]'
  '-nostdlib[do not add default directory to the list of include directories]'
  '-no-unbox-free-vars-of-closures[do not unbox variables that will appear inside function closures]'
  '-no-unbox-specialised-args[do not unbox arguments to which functions have been specialised]'
  '-o[set output file name to <file>]'
  '-O2[apply increased optimization for speed]'
  '-O3[apply aggressive optimization for speed (may significantly increase code size and compilation time)]'
  '-opaque[does not generate cross-module optimization information]'
  '-open[opens the module <module> before typing]'
  '-output-obj[output an object file instead of an executable]'
  '-output-complete-obj[output an object file, including runtime, instead of an executable]'
  '-p[compile and link with profiling support for "gprof"]'
  '-pack[package the given .cmx files into one .cmx]'
  '-plugin[load dynamic plugin <plugin>]'
  '-pp[pipe sources through preprocessor <command>]'
  '-ppx[pipe abstract syntax trees through preprocessor <command>]'
  '-principal[check principality of type inference]'
  '-no-principal[do not check principality of type inference (default)]'
  '-rectypes[allow arbitrary recursive types]'
  '-no-rectypes[do not allow arbitrary recursive types (default)]'
  '-remove-unused-arguments[remove unused function arguments]'
  '-rounds[repeat tree optimization and inlining phases this many times (default 1). Rounds are numbered starting from zero.]'
  '-runtime-variant[use the <str> variant of the run-time system]'
  '-S[keep intermediate assembly file]'
  '-safe-string[make strings immutable (default)]'
  '-shared[produce a dynlinkable plugin]'
  '-short-paths[shorten paths in types]'
  '-strict-sequence[left-hand part of a sequence must have type unit]'
  '-no-strict-sequence[left-hand part of a sequence need not have type unit (default)]'
  '-strict-formats[reject invalid formats accepted by legacy implementations]'
  '-no-strict-formats[accept invalid formats accepted by legacy implementations (default)]'
  '-thread[(deprecated) same as -I +threads]'
  '-unbox-closures[pass free variables via specialised arguments rather than closures]'
  '-unbox-closures-factor[> 0> Scale the size threshold above which unbox-closures will slow down indirect calls rather than duplicating a function (default 10)]'
  '-inline-max-unroll[<n>\[,...\] Unroll recursive functions at most this many times (default 0)]'
  '-unboxed-types[unannotated unboxable types will be unboxed]'
  '-no-unboxed-types[unannotated unboxable types will not be unboxed (default)]'
  '-unsafe[do not compile bounds checking on array and string access]'
  '-unsafe-string[make strings mutable]'
  '-v[print compiler version and location of standard library and exit]'
  '-verbose[print calls to external commands]'
  '-version[print version and exit]'
  '--version[print version and exit]'
  '-vnum[print version number and exit]'
  '-w[enable or disable warnings according to <list>:]'
  '-warn-error[enable or disable error status for warnings according]'
  '-warn-help[show description of warning numbers]'
  '-where[print location of standard library and exit]'
  '-nopervasives[(undocumented)]'
  '-dno-unique-ids[(undocumented)]'
  '-dunique-ids[(undocumented)]'
  '-dsource[(undocumented)]'
  '-dparsetree[(undocumented)]'
  '-dtypedtree[(undocumented)]'
  '-drawlambda[(undocumented)]'
  '-dlambda[(undocumented)]'
  '-drawclambda[(undocumented)]'
  '-dclambda[(undocumented)]'
  '-dflambda[print Flambda terms]'
  '-drawflambda[print Flambda terms after closure conversion]'
  '-dflambda-invariants[check Flambda invariants around each pass]'
  '-dflambda-no-invariants[do not Check Flambda invariants around each pass]'
  '-dflambda-let[print when the given Flambda \[Let\] is created]'
  '-dflambda-verbose[print Flambda terms including around each pass]'
  '-dcmm[(undocumented)]'
  '-dsel[(undocumented)]'
  '-dcombine[(undocumented)]'
  '-dcse[(undocumented)]'
  '-dlive[(undocumented)]'
  '-davail[print register availability info when printing liveness]'
  '-drunavail[run register availability pass (for testing only; needs -g)]'
  '-dspill[(undocumented)]'
  '-dsplit[(undocumented)]'
  '-dinterf[(undocumented)]'
  '-dprefer[(undocumented)]'
  '-dalloc[(undocumented)]'
  '-dreload[(undocumented)]'
  '-dscheduling[(undocumented)]'
  '-dlinear[(undocumented)]'
  '-dinterval[(undocumented)]'
  '-dstartup[(undocumented)]'
  '-dtimings[print timings information for each pass]'
  '-dprofile[print performance information for each pass]'
  '-dump-pass[record transformations performed by these passes:]'
  '-args[read additional newline-terminated command line arguments]'
  '-args0[read additional null character terminated command line arguments]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
