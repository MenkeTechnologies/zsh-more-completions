#compdef llvm-exegesis-19

# Autogenerated from man page /usr/share/man/man1/llvm-exegesis-19.1.gz

local arguments

arguments=(
    '--help[Print a summary of command line options.]'
    '--opcode-index[Specify the opcode to measure, by index.]'
    '--opcode-name[Specify the opcode to measure, by name.]'
    '--snippets-file[Specify the custom code snippet to measure. See example 2 for details.]:filename'
    '--mode[Specify the run mode.]:latency|uops|inverse_throughput|analysis'
    '--benchmark-phase[By default, when I-mode=P is specified, the generated snippet will be execute…]:prepare-snippet|prepare-and-assemble-snippet|assemble-measured-code|measure'
    '--x86-lbr-sample-period[Specify the LBR sampling period - how many branches before we take a sample.]:nBranchessample'
    '--x86-disable-upper-sse-registers[Using the upper xmm registers (xmm8-xmm15) forces a longer instruction encodi…]'
    '--repetition-mode[Specify the repetition mode.]:duplicate|loop|min|middle-half-duplicate|middle-half-loop'
    '--min-instructions[Specify the target number of executed instructions.]'
    '--loop-body-size[Only effective for I-repetition-mode=\[loop|min\]P.]'
    '--max-configs-per-opcode[Specify the maximum configurations that can be generated for each opcode.]:value'
    '--benchmarks-file[File to read (IanalysisP mode) or write (IlatencyP/IuopsP/Iinverse_throughput…]:pathtofile'
    '--analysis-clusters-output-file[If provided, write the analysis clusters as CSV to this file.]:pathtofile'
    '--analysis-inconsistencies-output-file[If non-empty, write inconsistencies found during analysis to this file.]:pathtofile'
    '--analysis-filter[By default, all benchmark results are analysed, but sometimes it may be usefu…]:all|reg-only|mem-only'
    '--analysis-clustering[Specify the clustering algorithm to use. By default DBSCAN will be used.]:dbscannaive'
    '--analysis-numpoints[Specify the numPoints parameters to be used for DBSCAN clustering (IanalysisP…]'
    '--analysis-clustering-epsilon[Specify the epsilon parameter used for clustering of benchmark points (Ianaly…]'
    '--analysis-inconsistency-epsilon[Specify the epsilon parameter used for detection of when the cluster is diffe…]:epsilon'
    '--analysis-display-unstable-clusters[If there is more than one benchmark for an opcode, said benchmarks may end up…]'
    '--ignore-invalid-sched-class[If set, ignore instructions that do not have a sched class (class idx = 0).]:false'
    '--mtriple[Target triple. See I-versionP for available targets.]:name'
    '--mcpu[If set, measure the cpu characteristics using the counters for this CPU.]:name'
    '--analysis-override-benchmark-triple-and-cpu[By default, llvm-exegesis will analyze the benchmarks for the triple/CPU they…]'
    '--dump-object-to-disk[If set, llvm-exegesis will dump the generated code to a temporary file to en…]:true'
    '--use-dummy-perf-counters[If set, llvm-exegesis will not read any real performance counters and return …]'
    '--execution-mode[This option specifies what execution mode to use.]:inprocesssubprocess'
    '--benchmark-repeat-count[This option enables specifying the number of times to repeat the measurement …]:repeat-count'
    '---[key: opcode_name: ADD64rr mode: latency config: …]'
    {--analysis-clusters-output-file,--analysis-inconsistencies-output-file}'[.]'
    '--max-configs-per-opcode[more configurations to discover if some register or immediate assignments lea…]'
    '--validation-counter[.]:instructions-retiredl1d-cache-load-misses'
    '*:filename:_files'
)
_arguments -s $arguments
