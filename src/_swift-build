#compdef swift-build

local arguments

arguments=(
  '--build-path[specify build/cache directory \[default: ./.build\]]'
  '--build-tests[build both source and test targets]'
  {--configuration,-c}'[build with configuration (debug|release) \[default: debug\]]'
  '--disable-automatic-resolution[disable automatic resolution if Package.resolved file is out-of-date]'
  '--disable-index-store[disable indexing-while-building feature]'
  '--disable-package-manifest-caching[disable caching Package.swift manifests]'
  '--disable-prefetching[]'
  '--disable-sandbox[disable using the sandbox when executing subprocesses]'
  '--enable-index-store[enable indexing-while-building feature]'
  '--enable-pubgrub-resolver[\[Experimental\] Enable the new Pubgrub dependency resolver]'
  '--enable-test-discovery[enable test discovery on platforms without Objective-C runtime]'
  {--jobs,-j}'[the number of jobs to spawn in parallel during the build process]'
  '--no-static-swift-stdlib[do not link Swift stdlib statically \[default\]]'
  '--package-path[change working directory before any other operation]'
  '--product[build the specified product]'
  '--sanitize[turn on runtime checks for erroneous behavior]'
  '--show-bin-path[print the binary output path]'
  '--skip-update[skip updating dependencies from their remote during a resolution]'
  '--static-swift-stdlib[link Swift stdlib statically]'
  '--target[build the specified target]'
  {--verbose,-v}'[increase verbosity of informational output]'
  '-Xcc[pass flag through to all C compiler invocations]'
  '-Xcxx[pass flag through to all C++ compiler invocations]'
  '-Xlinker[pass flag through to all linker invocations]'
  '-Xswiftc[pass flag through to all Swift compiler invocations]'
  '--help[display available options]'
  '*:filename:_files'
)

_arguments -s $arguments
