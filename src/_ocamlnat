#compdef ocamlnat

local arguments

arguments=(
  '-absname[show absolute filenames in error messages]'
  '-no-absname[do not try to show absolute filenames in error messages (default)]'
  '-alert[enable or disable alerts according to <list>:]'
  '-compact[optimize code size rather than speed]'
  '-I[add <dir> to the list of include directories]'
  '-init[load <file> instead of default init file]'
  '-inline[<n>\[,...\]  Aggressiveness of inlining (default 10.00, higher numbers mean more aggressive)]'
  '-inline-toplevel[<n>\[,...\]  Aggressiveness of inlining at toplevel (higher numbers mean more aggressive)]'
  '-inlining-report[emit `.<round>.inlining file(s) (one per round) showing the inliners decisions]'
  '-rounds[repeat tree optimization and inlining phases this many times (default 1).  Rounds are numbered starting from zero.]'
  '-inline-max-unroll[<n>\[,...\]  Unroll recursive functions at most this many times (default 0)]'
  '-Oclassic[make inlining decisions at function definition time rather than at the call site (replicates previous behaviour of the compiler)]'
  '-inline-call-cost[<n>\[,...\]  The cost of not removing a call during inlining (default 5, higher numbers more costly)]'
  '-inline-alloc-cost[<n>\[,...\]  The cost of not removing an allocation during inlining (default 7, higher numbers more costly)]'
  '-inline-prim-cost[<n>\[,...\]  The cost of not removing a primitive during inlining (default 3, higher numbers more costly)]'
  '-inline-branch-cost[<n>\[,...\]  The cost of not removing a conditional during inlining (default 5, higher numbers more costly)]'
  '-inline-indirect-cost[<n>\[,...\]  The cost of not removing an indirect call during inlining (default 4, higher numbers more costly)]'
  '-inline-lifting-benefit[<n>\[,...\]  The benefit of lifting definitions to toplevel during inlining (default 1300, higher numbers more beneficial)]'
  '-inline-branch-factor[<n>\[,...\]  Estimate the probability of a branch being cold as 1/(1+n) (used for inlining) (default 0.10)]'
  '-labels[use commuting label mode]'
  '-alias-deps[do record dependencies for module aliases]'
  '-no-alias-deps[do not record dependencies for module aliases]'
  '-linscan[use the linear scan register allocator]'
  '-app-funct[activate applicative functors]'
  '-no-app-funct[deactivate applicative functors]'
  '-no-float-const-prop[deactivate constant propagation for floating-point operations]'
  '-noassert[do not compile assertion checks]'
  '-noinit[do not load any init file]'
  '-nolabels[ignore non-optional labels in types]'
  '-noprompt[suppress all prompts]'
  '-nopromptcont[suppress prompts for continuation lines of multi-line inputs]'
  '-nostdlib[do not add default directory to the list of include directories]'
  '-nocwd[do not implicitly add the current directory to the load path]'
  '-nopervasives[(undocumented)]'
  '-no-unbox-free-vars-of-closures[do not unbox variables that will appear inside function closures]'
  '-no-unbox-specialised-args[do not unbox arguments to which functions have been specialised]'
  '-O2[apply increased optimization for speed]'
  '-O3[apply aggressive optimization for speed (may significantly increase code size and compilation time)]'
  '-open[opens the module <module> before typing]'
  '-ppx[pipe abstract syntax trees through preprocessor <command>]'
  '-principal[check principality of type inference]'
  '-no-principal[do not check principality of type inference (default)]'
  '-rectypes[allow arbitrary recursive types]'
  '-no-rectypes[do not allow arbitrary recursive types (default)]'
  '-remove-unused-arguments[remove unused function arguments]'
  '-S[keep intermediate assembly file]'
  '-safe-string[(default unconditionally since 5.0)]'
  '-safer-matching[do not use type information to optimize pattern-matching]'
  '-short-paths[shorten paths in types]'
  '-stdin[read script from standard input]'
  '-strict-sequence[left-hand part of a sequence must have type unit]'
  '-no-strict-sequence[left-hand part of a sequence need not have type unit (default)]'
  '-strict-formats[reject invalid formats accepted by legacy implementations (default)]'
  '-no-strict-formats[accept invalid formats accepted by legacy implementations]'
  '-unbox-closures[pass free variables via specialised arguments rather than closures]'
  '-unbox-closures-factor[> 0>  Scale the size threshold above which unbox-closures will slow down indirect calls rather than duplicating a function (default 10)]'
  '-unboxed-types[unannotated unboxable types will be unboxed]'
  '-no-unboxed-types[unannotated unboxable types will not be unboxed (default)]'
  '-unsafe[do not compile bounds checking on array and string access]'
  '-unsafe-string[(option not available)]'
  '-verbose[print calls to external commands]'
  '-version[print version and exit]'
  '--version[print version and exit]'
  '-no-version[do not print version at startup]'
  '-vnum[print version number and exit]'
  '-w[enable or disable warnings according to <list>:]'
  '-warn-error[enable or disable error status for warnings according]'
  '-warn-help[show description of warning numbers]'
  '-color[}  Enable or disable colors in compiler messages]'
  '-error-style[}  Control the way error messages and warnings are printed]'
  '-dsource[(undocumented)]'
  '-dparsetree[(undocumented)]'
  '-dtypedtree[(undocumented)]'
  '-dshape[(undocumented)]'
  '-drawlambda[(undocumented)]'
  '-dlambda[(undocumented)]'
  '-drawclambda[(undocumented)]'
  '-dclambda[(undocumented)]'
  '-dcmm-invariants[extra sanity checks on Cmm]'
  '-drawflambda[print Flambda terms after closure conversion]'
  '-dflambda[print Flambda terms]'
  '-dcmm[(undocumented)]'
  '-dsel[(undocumented)]'
  '-dcombine[(undocumented)]'
  '-dcse[(undocumented)]'
  '-dlive[(undocumented)]'
  '-dspill[(undocumented)]'
  '-dsplit[(undocumented)]'
  '-dinterf[(undocumented)]'
  '-dprefer[(undocumented)]'
  '-dalloc[(undocumented)]'
  '-dreload[(undocumented)]'
  '-dscheduling[(undocumented)]'
  '-dlinear[(undocumented)]'
  '-dinterval[(undocumented)]'
  '-dstartup[(undocumented)]'
  '-dump-pass[record transformations performed by these passes:]'
  '-e[evaluate given script]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
