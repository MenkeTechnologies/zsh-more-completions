#compdef gnutls-certtool

local arguments

arguments=(
  {-d,--debug}'[enable debugging]'
  {-V,--verbose}'[more verbose output]'
  '--infile[input file]'
  '--outfile[output file]'
  {-s,--generate-self-signed}'[generate a self-signed certificate]'
  {-c,--generate-certificate}'[generate a signed certificate]'
  '--generate-proxy[generates a proxy certificate]'
  '--generate-crl[generate a CRL]'
  {-u,--update-certificate}'[update a signed certificate]'
  {-p,--generate-privkey}'[generate a private key]'
  '--provable[generate a private key or parameters from a seed using a provable method]'
  '--verify-provable-privkey[verify a private key generated from a seed using a provable method]'
  '--seed[when generating a private key use the given hex-encoded seed]'
  {-q,--generate-request}'[generate a PKCS #10 certificate request]'
  {-e,--verify-chain}'[verify a PEM encoded certificate chain]'
  '--verify[verify a PEM encoded certificate chain using a trusted list]'
  '--verify-crl[verify a CRL using a trusted list]'
  '--verify-hostname[specify a hostname to be used for certificate chain verification]'
  '--verify-email[specify a email to be used for certificate chain verification]'
  '--verify-purpose[specify a purpose OID to be used for certificate chain verification]'
  '--verify-allow-broken[allow broken algorithms, such as MD5 for verification]'
  '--generate-dh-params[generate PKCS #3 encoded Diffie-Hellman parameters]'
  '--get-dh-params[get the included PKCS #3 encoded Diffie-Hellman parameters]'
  '--dh-info[print information PKCS #3 encoded Diffie-Hellman parameters]'
  '--load-privkey[loads a private key file]'
  '--load-pubkey[loads a public key file]'
  '--load-request[loads a certificate request file]'
  '--load-certificate[loads a certificate file]'
  '--load-ca-privkey[loads the certificate authoritys private key file]'
  '--load-ca-certificate[loads the certificate authoritys certificate file]'
  '--load-crl[loads the provided CRL]'
  '--load-data[loads auxiliary data]'
  '--password[password to use]'
  '--null-password[enforce a NULL password]'
  '--empty-password[enforce an empty password]'
  '--hex-numbers[print big number in an easier format to parse]'
  '--cprint[in certain operations it prints the information in C-friendly format]'
  {-i,--certificate-info}'[print information on the given certificate]'
  '--fingerprint[print the fingerprint of the given certificate]'
  '--key-id[print the key ID of the given certificate]'
  '--certificate-pubkey[print certificates public key]'
  {-l,--crl-info}'[print information on the given CRL structure]'
  {-0,--smime-to-p7}'[convert S/MIME to PKCS #7 structure]'
  {-k,--key-info}'[print information on a private key]'
  {-1,--pgp-key-info}'[print information on an OpenPGP private key]'
  {-2,--pubkey-info}'[print information on a public key]'
  {-3,--v1}'[generate an X.509 version 1 certificate (with no extensions)]'
  {-4,--to-p12}'[generate a PKCS #12 structure]'
  {-5,--to-p8}'[generate a PKCS #8 structure]'
  {-8,--pkcs8}'[use PKCS #8 format for private keys]'
  {-6,--rsa}'[generate RSA key]'
  {-7,--dsa}'[generate DSA key]'
  {-8,--ecc}'[generate ECC (ECDSA) key]'
  {-9,--ecdsa}'[an alias for the ecc option]'
  {-A,--sec-param}'[specify the security level \[low, legacy, medium, high, ultra\]]'
  {-B,--disable-quick-random}'[no effect]'
  {-C,--template}'[template file to use for non-interactive operation]'
  {-D,--stdout-info}'[print information to stdout instead of stderr]'
  {-E,--ask-pass}'[enable interaction for entering password when in batch mode.]'
  {-F,--pkcs-cipher}'[cipher to use for PKCS #8 and #12 operations]'
  {-G,--provider}'[specify the PKCS #11 provider library]'
  {-v,--version}'[output version information and exit]'
  '(- * :)'{-h,--help}'[display extended usage information and exit]'
  '*:filename:_files'
)

_arguments -s $arguments
