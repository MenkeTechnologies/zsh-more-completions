#compdef uglifyjs

local arguments

arguments=(
  {-V,--version}'[output the version number]'
  {-p,--parse}'[specify parser options.]'
  {-c,--compress}'[enable compressor/specify compressor options.]'
  {-m,--mangle}'[mangle names/specify mangler options.]'
  '--mangle-props[mangle properties/specify mangler options.]'
  {-b,--beautify}'[beautify output/specify output options.]'
  {-o,--output}'[output file (default STDOUT).]'
  '--comments[preserve copyright comments in the output.]'
  '--config-file[read minify() options from JSON file.]'
  {-d,--define}'[value\] Global definitions.]'
  {-e,--enclose}'[...\]\[Embed everything in a big function, with configurable argument(s) & value(s).]:value\[,...\]\]\]:'
  '--ie8[support non-standard Internet Explorer 8.]'
  '--keep-fnames[do not mangle/drop function names. Useful for code relying on Function.prototype.name.]'
  '--name-cache[file to hold mangled name mappings.]'
  '--rename[force symbol expansion.]'
  '--no-rename[disable symbol expansion.]'
  '--self[build UglifyJS as a library (implies --wrap UglifyJS)]'
  '--source-map[enable source map/specify source map options.]'
  '--timings[display operations run time on STDERR.]'
  '--toplevel[compress and/or mangle variables in toplevel scope.]'
  '--verbose[print diagnostic messages.]'
  '--warn[print warning messages.]'
  '--wrap[embed everything as a function with “exports” corresponding to “name” globally.]'
  '(- * :)'{-h,--help}'[output usage information]'
  '*:filename:_files'
)

_arguments -s $arguments
