#compdef dwatch

local arguments

arguments=(
  '-1[print one line per process/profile (Default; disables `-R).]'
  '-B[maximum process arguments to display (Default 64).]'
  '-d[debug. Send dtrace(1) script to stdout instead of executing.]'
  '-e[exit after compiling request but prior to enabling probes.]'
  '-E[DTrace code for event details. If `-, read from stdin.]'
  '-f[enable probe matching the specified function name.]'
  '-F[coalesce trace output by function.]'
  '-g[group filter. Only show processes matching group name/gid.]'
  '-j[jail filter. Only show processes matching jail name/jid.]'
  '-k[only show processes matching name.]'
  '-K[maximum directory depth to display (Default 64).]'
  '-l[list available probes on standard output and exit.]'
  '-m[enable probe matching the specified module name.]'
  '-n[enable probe matching the specified probe name.]'
  '-N[exit after count matching entries (Default 0 for disabled).]'
  '-o[set output file. If `-, the path `/dev/stdout is used.]'
  '-O[execute cmd for each event.]'
  '-p[process id filter. Only show processes with matching pid.]'
  '-P[enable probe matching the specified provider name.]'
  '-q[quiet. Hide informational messages and all dtrace(1) errors.]'
  '-Q[list available profiles in DWATCH_PROFILES_PATH and exit.]'
  '-r[filter. Only show blocks matching awk(1) regular expression.]'
  '-R[show parent, grandparent, and ancestor of process.]'
  '-t[test clause (predicate) to limit events (Default none).]'
  '-T[timeout. Format is `\#\[smhd\] or simply `\# for seconds.]'
  '-u[user filter. Only show processes matching user name/uid.]'
  '-v[verbose. Show all errors from dtrace(1).]'
  '-V[report dwatch version on standard output and exit.]'
  '-w[permit destructive actions (copyout*, stop, panic, etc.).]'
  '-x[trace. Print `<probe-id> when a probe is triggered.]'
  '-X[load profile name from DWATCH_PROFILES_PATH.]'
  '-y[always treat stdout as console (enable colors/columns/etc.).]'
  '-z[only show processes matching awk(1) regular expression.]'
  '*:filename:_files'
)

_arguments -s $arguments
