#compdef clang-cpp-11

local arguments

arguments=(
  '--analyzer-output[static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|text).]'
  '--analyze[run the static analyzer]'
  '-arcmt-migrate-emit-errors[emit ARC errors even if the migrator can fix them]'
  '-arcmt-migrate-report-output[output path for the plist report]'
  '-B[add <dir> to search path for binaries and object files used implicitly]'
  '-CC[include comments from within macros in preprocessed output]'
  '-cl-denorms-are-zero[openCL only. Allow denormals to be flushed to zero.]'
  '-cl-fast-relaxed-math[openCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.]'
  '-cl-finite-math-only[openCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.]'
  '-cl-fp32-correctly-rounded-divide-sqrt[openCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.]'
  '-cl-kernel-arg-info[openCL only. Generate kernel argument metadata.]'
  '-cl-mad-enable[openCL only. Allow use of less precise MAD computations in the generated binary.]'
  '-cl-no-signed-zeros[openCL only. Allow use of less precise no signed zeros computations in the generated binary.]'
  '-cl-opt-disable[openCL only. This option disables all optimizations. By default optimizations are enabled.]'
  '-cl-single-precision-constant[openCL only. Treat double precision floating-point constant as single precision constant.]'
  '-cl-std[openCL language standard to compile for.]'
  '-cl-strict-aliasing[openCL only. This option is added for compatibility with OpenCL 1.0.]'
  '-cl-uniform-work-group-size[openCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel]'
  '-cl-unsafe-math-optimizations[openCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.]'
  '--config[specifies configuration file]'
  '--cuda-compile-host-device[compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.]'
  '--cuda-device-only[compile CUDA code for device only]'
  '--cuda-host-only[compile CUDA code for host only.  Has no effect on non-CUDA compilations.]'
  '--cuda-include-ptx[include PTX for the following GPU architecture (e.g. sm_35) or all. May be specified more than once.]'
  '--cuda-noopt-device-debug[enable device-side debug info generation. Disables ptxas optimizations.]'
  '--cuda-path-ignore-env[ignore environment variables to detect CUDA installation]'
  '--cuda-path[CUDA installation path]'
  '-cxx-isystem[add directory to the C++ SYSTEM include search path]'
  '-C[include comments in preprocessed output]'
  '-c[only run preprocess, compile, and assemble steps]'
  '-dD[print macro definitions in -E mode in addition to normal output]'
  '-dependency-dot[filename to write DOT-formatted header dependencies to]'
  '-dependency-file[filename (or -) to write dependency output to]'
  '-dI[print include directives in -E mode in addition to normal output]'
  '-dM[print macro definitions in -E mode instead of normal output]'
  '-D[<value>      Define <macro> to <value> (or 1 if <value> omitted)]'
  '-emit-ast[emit Clang AST files for source inputs]'
  '-emit-interface-stubs[generate Inteface Stub Files.]'
  '-emit-llvm[use the LLVM representation for assembler and object files]'
  '-emit-merged-ifs[generate Interface Stub Files, emit merged text not binary.]'
  '--emit-static-lib[enable linker job to emit a static library.]'
  '-enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang[trivial automatic variable initialization to zero is only here for benchmarks, itll eventually be removed, and Im OK with that because Im only using it to benchmark]'
  '-E[only run the preprocessor]'
  '-fAAPCSBitfieldLoad[follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).]'
  '-faddrsig[emit an address-significance table]'
  '-faligned-allocation[enable C++17 aligned allocation functions]'
  '-fallow-editor-placeholders[treat editor placeholders as valid source code]'
  '-fansi-escape-codes[use ANSI escape codes for diagnostics]'
  '-fapple-kext[use Apples kernel extensions ABI]'
  '-fapple-link-rtlib[force linking the clang builtins runtime library]'
  '-fapple-pragma-pack[enable Apple gcc-compatible #pragma pack handling]'
  '-fapplication-extension[code to those available for App Extensions]'
  '-fasm-blocks[]'
  '-fautolink[]'
  '-fbasic-block-sections[place each functions basic blocks in unique sections (ELF Only) : all | labels | none | list=<file>]'
  '-fblocks[enable the blocks language feature]'
  '-fborland-extensions[accept non-standard constructs supported by the Borland compiler]'
  '-fbuild-session-file[use the last modification time of <file> as the build session timestamp]'
  '-fbuild-session-timestamp[since Epoch in seconds>]'
  '-fbuiltin-module-map[load the clang builtins module map file.]'
  '-fc[++-static-destructors]'
  '-fcall-saved-x10[make the x10 register call-saved (AArch64 only)]'
  '-fcall-saved-x11[make the x11 register call-saved (AArch64 only)]'
  '-fcall-saved-x12[make the x12 register call-saved (AArch64 only)]'
  '-fcall-saved-x13[make the x13 register call-saved (AArch64 only)]'
  '-fcall-saved-x14[make the x14 register call-saved (AArch64 only)]'
  '-fcall-saved-x15[make the x15 register call-saved (AArch64 only)]'
  '-fcall-saved-x18[make the x18 register call-saved (AArch64 only)]'
  '-fcall-saved-x8[make the x8 register call-saved (AArch64 only)]'
  '-fcall-saved-x9[make the x9 register call-saved (AArch64 only)]'
  '-fcaret-diagnostics[]'
  '-fcf-protection[instrument control-flow architecture protection. Options: return, branch, full, none.]'
  '-fcf-protection[enable cf-protection in full mode]'
  '-fchar8[_t               Enable C++ builtin type char8_t]'
  '-fclang-abi-compat[attempt to match the ABI of Clang <version>]'
  '-fcolor-diagnostics[enable colors in diagnostics]'
  '-fcomment-block-commands[treat each comma separated argument in <arg> as a documentation comment block command]'
  '-fcommon[place uninitialized global variables in a common block]'
  '-fcomplete-member-pointers[require member pointer base types to be complete if they would be significant under the Microsoft ABI]'
  '-fconvergent-functions[assume functions may be convergent]'
  '-fcoroutines-ts[enable support for the C++ Coroutines TS]'
  '-fcoverage-mapping[generate coverage mapping to enable code coverage analysis]'
  '-fcs-profile-generate[generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fcs-profile-generate[generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fcuda-approx-transcendentals[use approximate transcendental functions]'
  '-fcuda-flush-denormals-to-zero[flush denormal floating point values to zero in CUDA device mode.]'
  '-fcuda-short-ptr[use 32-bit pointers for accessing const/local/shared address spaces]'
  '-fcxx-exceptions[enable C++ exceptions]'
  '-fdata-sections[place each data in its own section]'
  '-fdebug-compilation-dir[the compilation directory to embed in the debug info.]'
  '-fdebug-default-version[default DWARF version to use, if a -g option caused DWARF debug info to be produced]'
  '-fdebug-info-for-profiling[emit extra debug info to make sample profile more accurate]'
  '-fdebug-macro[emit macro debug information]'
  '-fdebug-prefix-map[remap file source paths in debug info]'
  '-fdebug-ranges-base-address[use DWARF base address selection entries in .debug_ranges]'
  '-fdebug-types-section[place debug types in their own section (ELF Only)]'
  '-fdeclspec[allow __declspec as a keyword]'
  '-fdelayed-template-parsing[parse templated function definitions at the end of the translation unit]'
  '-fdelete-null-pointer-checks[treat usage of null pointers as undefined behavior (default)]'
  '-fdiagnostics-absolute-paths[print absolute paths in diagnostics]'
  '-fdiagnostics-hotness-threshold[prevent optimization remarks from being output if they do not have at least this profile count]'
  '-fdiagnostics-parseable-fixits[print fix-its in machine parseable form]'
  '-fdiagnostics-print-source-range-info[print source range spans in numeric form]'
  '-fdiagnostics-show-hotness[enable profile hotness information in diagnostic line]'
  '-fdiagnostics-show-note-include-stack[display include stacks for diagnostic notes]'
  '-fdiagnostics-show-option[print option name with mappable diagnostics]'
  '-fdiagnostics-show-template-tree[print a template comparison tree for differing templates]'
  '-fdigraphs[enable alternative token representations <:, :>, <%, %>, %:, %:%: (default)]'
  '-fdiscard-value-names[discard value names in LLVM IR]'
  '-fdollars-in-identifiers[allow $ in identifiers]'
  '-fdouble-square-bracket-attributes[enable \[\[\]\] attributes in all C and C++ language modes]'
  '-fdwarf-directory-asm[]'
  '-fdwarf-exceptions[use DWARF style exceptions]'
  '-fembed-bitcode-marker[embed placeholder LLVM IR data as a marker]'
  '-fembed-bitcode[embed LLVM bitcode (option: off, all, bitcode, marker)]'
  '-fembed-bitcode[embed LLVM IR bitcode as data]'
  '-femit-all-decls[emit all declarations, even if unused]'
  '-femulated-tls[use emutls functions to access thread_local variables]'
  '-fenable-matrix[enable matrix data type and related builtin functions]'
  '-fexceptions[enable support for exception handling]'
  '-fexperimental-new-constant-interpreter[enable the experimental new constant interpreter]'
  '-fexperimental-new-pass-manager[enables an experimental new pass manager in LLVM.]'
  '-fexperimental-relative-c[++-abi-vtables]'
  '-fexperimental-strict-floating-point[enables experimental strict floating point in LLVM.]'
  '-ffast-math[allow aggressive, lossy floating-point optimizations]'
  '-ffile-prefix-map[remap file source paths in debug info and predefined preprocessor macros]'
  '-ffine-grained-bitfield-accesses[use separate accesses for consecutive bitfield runs with legal widths and alignments.]'
  '-ffixed-point[enable fixed point types]'
  '-ffixed-r19[reserve register r19 (Hexagon only)]'
  '-ffixed-r9[reserve the r9 register (ARM only)]'
  '-ffixed-x10[reserve the x10 register (AArch64/RISC-V only)]'
  '-ffixed-x11[reserve the x11 register (AArch64/RISC-V only)]'
  '-ffixed-x12[reserve the x12 register (AArch64/RISC-V only)]'
  '-ffixed-x13[reserve the x13 register (AArch64/RISC-V only)]'
  '-ffixed-x14[reserve the x14 register (AArch64/RISC-V only)]'
  '-ffixed-x15[reserve the x15 register (AArch64/RISC-V only)]'
  '-ffixed-x16[reserve the x16 register (AArch64/RISC-V only)]'
  '-ffixed-x17[reserve the x17 register (AArch64/RISC-V only)]'
  '-ffixed-x18[reserve the x18 register (AArch64/RISC-V only)]'
  '-ffixed-x19[reserve the x19 register (AArch64/RISC-V only)]'
  '-ffixed-x1[reserve the x1 register (AArch64/RISC-V only)]'
  '-ffixed-x20[reserve the x20 register (AArch64/RISC-V only)]'
  '-ffixed-x21[reserve the x21 register (AArch64/RISC-V only)]'
  '-ffixed-x22[reserve the x22 register (AArch64/RISC-V only)]'
  '-ffixed-x23[reserve the x23 register (AArch64/RISC-V only)]'
  '-ffixed-x24[reserve the x24 register (AArch64/RISC-V only)]'
  '-ffixed-x25[reserve the x25 register (AArch64/RISC-V only)]'
  '-ffixed-x26[reserve the x26 register (AArch64/RISC-V only)]'
  '-ffixed-x27[reserve the x27 register (AArch64/RISC-V only)]'
  '-ffixed-x28[reserve the x28 register (AArch64/RISC-V only)]'
  '-ffixed-x29[reserve the x29 register (AArch64/RISC-V only)]'
  '-ffixed-x2[reserve the x2 register (AArch64/RISC-V only)]'
  '-ffixed-x30[reserve the x30 register (AArch64/RISC-V only)]'
  '-ffixed-x31[reserve the x31 register (AArch64/RISC-V only)]'
  '-ffixed-x3[reserve the x3 register (AArch64/RISC-V only)]'
  '-ffixed-x4[reserve the x4 register (AArch64/RISC-V only)]'
  '-ffixed-x5[reserve the x5 register (AArch64/RISC-V only)]'
  '-ffixed-x6[reserve the x6 register (AArch64/RISC-V only)]'
  '-ffixed-x7[reserve the x7 register (AArch64/RISC-V only)]'
  '-ffixed-x8[reserve the x8 register (AArch64/RISC-V only)]'
  '-ffixed-x9[reserve the x9 register (AArch64/RISC-V only)]'
  '-fforce-dwarf-frame[always emit a debug frame section]'
  '-fforce-emit-vtables[emits more virtual tables to improve devirtualization]'
  '-fforce-enable-int128[enable support for int128_t type]'
  '-ffp-contract[form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma) | off (never fuse). Default is fast for CUDA/HIP and on otherwise.]'
  '-ffp-exception-behavior[specifies the exception behavior of floating-point operations.]'
  '-ffp-model[controls the semantics of floating-point calculations.]'
  '-ffreestanding[assert that the compilation takes place in a freestanding environment]'
  '-ffunction-sections[place each function in its own section]'
  '-fglobal-isel[enables the global instruction selector]'
  '-fgnu-inline-asm[]'
  '-fgnu-keywords[allow GNU-extension keywords regardless of language standard]'
  '-fgnu-runtime[generate output compatible with the standard GNU Objective-C runtime]'
  '-fgnu89-inline[use the gnu89 inline semantics]'
  '-fgnuc-version[sets various macros to claim compatibility with the given GCC version (default is 4.2.1)]'
  '-fgpu-allow-device-init[device side init function in HIP]'
  '-fgpu-rdc[generate relocatable device code, also known as separate compilation mode]'
  '-fhip-new-launch-api[use new kernel launching API for HIP]'
  '-fignore-exceptions[enable support for ignoring exception handling constructs]'
  '-fimplicit-module-maps[implicitly search the file system for module map files.]'
  '-finline-functions[inline suitable functions]'
  '-finline-hint-functions[functions which are (explicitly or implicitly) marked inline]'
  '-finstrument-function-entry-bare[instrument function entry only, after inlining, without arguments to the instrumentation call]'
  '-finstrument-functions-after-inlining[like -finstrument-functions, but insert the calls after inlining]'
  '-finstrument-functions[generate calls to instrument function entry and exit]'
  '-fintegrated-as[enable the integrated assembler]'
  '-fintegrated-cc1[run cc1 in-process]'
  '-fjump-tables[use jump tables for lowering switches]'
  '-fkeep-static-consts[keep static const variables if unused]'
  '-flax-vector-conversions[enable implicit vector bit-casts]'
  '-flto-jobs[controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)]'
  '-flto[set LTO mode to either full or thin]'
  '-flto[enable LTO in full mode]'
  '-fmacro-prefix-map[remap file source paths in predefined preprocessor macros]'
  '-fmath-errno[require math functions to indicate errors by setting errno]'
  '-fmax-tokens[max total number of preprocessed tokens for -Wmax-tokens.]'
  '-fmax-type-align[specify the maximum alignment to enforce on pointers lacking an explicit alignment]'
  '-fmerge-all-constants[allow merging of constants]'
  '-fmessage-length[format message diagnostics so that they fit within N columns]'
  '-fmodule-file[\]<file>]'
  '-fmodule-map-file[load this module map file]'
  '-fmodule-name[specify the name of the module to build]'
  '-fmodules-cache-path[specify the module cache path]'
  '-fmodules-decluse[require declaration of modules used within a module]'
  '-fmodules-disable-diagnostic-validation[disable validation of the diagnostic options when loading the module]'
  '-fmodules-ignore-macro[ignore the definition of the given macro when building and loading modules]'
  '-fmodules-prune-after[specify the interval (in seconds) after which a module file will be considered unused]'
  '-fmodules-prune-interval[specify the interval (in seconds) between attempts to prune the module cache]'
  '-fmodules-search-all[search even non-imported modules to resolve references]'
  '-fmodules-strict-decluse[like -fmodules-decluse but requires all headers to be in modules]'
  '-fmodules-ts[enable support for the C++ Modules TS]'
  '-fmodules-user-build-path[specify the module user build path]'
  '-fmodules-validate-input-files-content[validate PCM input files based on content if mtime differs]'
  '-fmodules-validate-once-per-build-session[dont verify input files for the modules if the module has been successfully validated or loaded during this build session]'
  '-fmodules-validate-system-headers[validate the system headers that a module depends on when loading the module]'
  '-fmodules[enable the modules language feature]'
  '-fms-compatibility-version[dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = dont define it (default))]'
  '-fms-compatibility[enable full Microsoft Visual C++ compatibility]'
  '-fms-extensions[accept some non-standard constructs supported by the Microsoft compiler]'
  '-fmsc-version[microsoft compiler version number to report in _MSC_VER (0 = dont define it (default))]'
  '-fnew-alignment[specifies the largest alignment guaranteed by ::operator new(size_t)]'
  '-fno-access-control[]'
  '-fno-addrsig[dont emit an address-significance table]'
  '-fno-allow-editor-placeholders[]'
  '-fno-asm-blocks[]'
  '-fno-assume-sane-operator-new[dont assume that C++s global operator new cant alias any pointer]'
  '-fno-autolink[disable generation of linker directives for automatic library linking]'
  '-fno-blocks[]'
  '-fno-builtin-[<value>    Disable implicit builtin knowledge of a specific function]'
  '-fno-builtin[disable implicit builtin knowledge of functions]'
  '-fno-c[++-static-destructors]'
  '-fno-caret-diagnostics[]'
  '-fno-char8[_t            Disable C++ builtin type char8_t]'
  '-fno-color-diagnostics[disable colors in diagnostics]'
  '-fno-common[compile common globals like normal definitions]'
  '-fno-complete-member-pointers[do not require member pointer base types to be complete if they would be significant under the Microsoft ABI]'
  '-fno-constant-cfstrings[creation of CodeFoundation-type constant strings]'
  '-fno-coroutines-ts[]'
  '-fno-coverage-mapping[disable code coverage analysis]'
  '-fno-crash-diagnostics[disable auto-generation of preprocessed source files and a script for reproduction during a clang crash]'
  '-fno-cuda-approx-transcendentals[dont use approximate transcendental functions]'
  '-fno-cuda-short-ptr[]'
  '-fno-cxx-exceptions[]'
  '-fno-data-sections[]'
  '-fno-debug-info-for-profiling[]'
  '-fno-debug-macro[do not emit macro debug information]'
  '-fno-debug-ranges-base-address[]'
  '-fno-declspec[disallow __declspec as a keyword]'
  '-fno-delayed-template-parsing[disable delayed template parsing]'
  '-fno-delete-null-pointer-checks[do not treat usage of null pointers as undefined behavior]'
  '-fno-diagnostics-fixit-info[do not include fixit information in diagnostics]'
  '-fno-digraphs[disallow alternative token representations <:, :>, <%, %>, %:, %:%:]'
  '-fno-discard-value-names[do not discard value names in LLVM IR]'
  '-fno-dollars-in-identifiers[disallow $ in identifiers]'
  '-fno-double-square-bracket-attributes[disable \[\[\]\] attributes in all C and C++ language modes]'
  '-fno-dwarf-directory-asm[]'
  '-fno-elide-constructors[C++ copy constructor elision]'
  '-fno-elide-type[do not elide types when printing diagnostics]'
  '-fno-exceptions[disable support for exception handling]'
  '-fno-experimental-new-pass-manager[disables an experimental new pass manager in LLVM.]'
  '-fno-experimental-relative-c[++-abi-vtables]'
  '-fno-fast-math[]'
  '-fno-fine-grained-bitfield-accesses[use large-integer access for consecutive bitfield runs.]'
  '-fno-fixed-point[disable fixed point types]'
  '-fno-force-dwarf-frame[]'
  '-fno-force-emit-vtables[]'
  '-fno-force-enable-int128[disable support for int128_t type]'
  '-fno-function-sections[]'
  '-fno-global-isel[disables the global instruction selector]'
  '-fno-gnu-inline-asm[disable GNU style inline asm]'
  '-fno-gnu89-inline[]'
  '-fno-gpu-allow-device-init[dont allow device side init function in HIP]'
  '-fno-gpu-rdc[]'
  '-fno-hip-new-launch-api[t use new kernel launching API for HIP]'
  '-fno-integrated-as[disable the integrated assembler]'
  '-fno-integrated-cc1[spawn a separate process for each cc1]'
  '-fno-jump-tables[do not use jump tables for lowering switches]'
  '-fno-keep-static-consts[t keep static const variables if unused]'
  '-fno-lto[disable LTO mode (default)]'
  '-fno-math-errno[]'
  '-fno-merge-all-constants[disallow merging of constants]'
  '-fno-no-access-control[disable C++ access control]'
  '-fno-objc-infer-related-result-type[do not infer Objective-C related result type based on method family]'
  '-fno-operator-names[do not treat C++ operator name keywords as synonyms for operators]'
  '-fno-pch-codegen[do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH]'
  '-fno-pch-debuginfo[do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere]'
  '-fno-plt[use GOT indirection instead of PLT to make external function calls (x86 only)]'
  '-fno-preserve-as-comments[do not preserve comments in inline assembly]'
  '-fno-profile-generate[disable generation of profile instrumentation.]'
  '-fno-profile-instr-generate[disable generation of profile instrumentation.]'
  '-fno-profile-instr-use[disable using instrumentation data for profile-guided optimization]'
  '-fno-register-global-dtors-with-atexit[dont use atexit or __cxa_atexit to register global destructors]'
  '-fno-reroll-loops[]'
  '-fno-rewrite-imports[]'
  '-fno-rewrite-includes[]'
  '-fno-ropi[]'
  '-fno-rtlib-add-rpath[do not add -rpath with architecture-specific resource directory to the linker flags]'
  '-fno-rtti-data[disable generation of RTTI data]'
  '-fno-rtti[disable generation of rtti information]'
  '-fno-rwpi[]'
  '-fno-sanitize-address-poison-custom-array-cookie[disable poisoning array cookies when using custom operator new\[\] in AddressSanitizer]'
  '-fno-sanitize-address-use-after-scope[disable use-after-scope detection in AddressSanitizer]'
  '-fno-sanitize-address-use-odr-indicator[disable ODR indicator globals]'
  '-fno-sanitize-blacklist[t use blacklist file for sanitizers]'
  '-fno-sanitize-cfi-canonical-jump-tables[do not make the jump table addresses canonical in the symbol table]'
  '-fno-sanitize-cfi-cross-dso[disable control flow integrity (CFI) checks for cross-DSO calls.]'
  '-fno-sanitize-coverage[disable specified features of coverage instrumentation for Sanitizers]'
  '-fno-sanitize-memory-track-origins[disable origins tracking in MemorySanitizer]'
  '-fno-sanitize-memory-use-after-dtor[disable use-after-destroy detection in MemorySanitizer]'
  '-fno-sanitize-recover[disable recovery for specified sanitizers]'
  '-fno-sanitize-stats[disable sanitizer statistics gathering.]'
  '-fno-sanitize-thread-atomics[disable atomic operations instrumentation in ThreadSanitizer]'
  '-fno-sanitize-thread-func-entry-exit[disable function entry/exit instrumentation in ThreadSanitizer]'
  '-fno-sanitize-thread-memory-access[disable memory access instrumentation in ThreadSanitizer]'
  '-fno-sanitize-trap[disable trapping for specified sanitizers]'
  '-fno-sanitize-trap[disable trapping for all sanitizers]'
  '-fno-short-wchar[force wchar_t to be an unsigned int]'
  '-fno-show-column[do not include column number on diagnostics]'
  '-fno-show-source-location[do not include source location information with diagnostics]'
  '-fno-signed-char[char is unsigned]'
  '-fno-signed-zeros[allow optimizations that ignore the sign of floating point zeros]'
  '-fno-spell-checking[disable spell-checking]'
  '-fno-split-lto-unit[]'
  '-fno-stack-clash-protection[disable stack clash protection]'
  '-fno-stack-protector[disable the use of stack protectors]'
  '-fno-stack-size-section[]'
  '-fno-standalone-debug[limit debug information produced to reduce size of debug binary]'
  '-fno-strict-float-cast-overflow[relax language rules and try to match the behavior of the targets native float-to-int conversion instructions]'
  '-fno-strict-return[dont treat control flow paths that fall off the end of a non-void function as unreachable]'
  '-fno-sycl[disable SYCL kernels compilation for device]'
  '-fno-temp-file[directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes]'
  '-fno-threadsafe-statics[not emit code to make initialization of local statics thread safe]'
  '-fno-trigraphs[do not process trigraph sequences]'
  '-fno-unique-basic-block-section-names[]'
  '-fno-unique-internal-linkage-names[]'
  '-fno-unique-section-names[dont use unique names for text and data sections]'
  '-fno-unroll-loops[turn off loop unroller]'
  '-fno-use-cxa-atexit[dont use __cxa_atexit for calling destructors]'
  '-fno-use-init-array[use .ctors/.dtors instead of .init_array/.fini_array]'
  '-fno-use-line-directives[]'
  '-fno-virtual-function-elimination[]'
  '-fno-whole-program-vtables[]'
  '-fno-xray-always-emit-customevents[]'
  '-fno-xray-always-emit-typedevents[]'
  '-fno-xray-function-index[omit function index section at the expense of single-function patching performance]'
  '-fno-xray-ignore-loops[]'
  '-fno-xray-instrument[]'
  '-fno-zero-initialized-in-bss[dont place zero initialized data in BSS]'
  '-fno-zvector[]'
  '-fobjc-arc-exceptions[use EH-safe code when synthesizing retains and releases in -fobjc-arc]'
  '-fobjc-arc[synthesize retain and release calls for Objective-C pointers]'
  '-fobjc-exceptions[enable Objective-C exceptions]'
  '-fobjc-runtime[specify the target Objective-C runtime kind and version]'
  '-fobjc-weak[enable ARC-style weak references in Objective-C]'
  '-fopenmp-simd[emit OpenMP code only for SIMD-based constructs.]'
  '-fopenmp-targets[specify comma-separated list of triples OpenMP offloading targets to be supported]'
  '-fopenmp[parse OpenMP pragmas and generate parallel code.]'
  '-foptimization-record-file[specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.]'
  '-foptimization-record-passes[only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)]'
  '-forder-file-instrumentation[generate instrumented code to collect order file into default.profraw file (overridden by = form of option or LLVM_PROFILE_FILE env var)]'
  '-fpack-struct[specify the default maximum struct packing alignment]'
  '-fpascal-strings[recognize and construct Pascal-style string literals]'
  '-fpass-plugin[load pass plugin from a dynamic shared object file (only with new pass manager).]'
  '-fpatchable-function-entry[M>]'
  '-fpcc-struct-return[override the default ABI to return all structs on the stack]'
  '-fpch-codegen[generate code for uses of this PCH that assumes an explicit object file will be built for the PCH]'
  '-fpch-debuginfo[generate debug info for types in an object file built from this PCH and do not generate them elsewhere]'
  '-fpch-instantiate-templates[instantiate templates already while building a PCH]'
  '-fpch-validate-input-files-content[validate PCH input files based on content if mtime differs]'
  '-fplt[]'
  '-fplugin[load the named plugin (dynamic shared object)]'
  '-fprebuilt-module-path[specify the prebuilt module path]'
  '-fpreserve-as-comments[]'
  '-fprofile-exclude-files[instrument only functions from files where names dont match all the regexes separated by a semi-colon]'
  '-fprofile-filter-files[instrument only functions from files where names match any regex separated by a semi-colon]'
  '-fprofile-generate[generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-generate[generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-generate[generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-generate[generate instrumented code to collect execution counts into default.profraw file (overridden by = form of option or LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-use[use instrumentation data for profile-guided optimization]'
  '-fprofile-remapping-file[use the remappings described in <file> to match the profile data against names in the program]'
  '-fprofile-sample-accurate[specifies that the sample profile is accurate]'
  '-fprofile-sample-use[enable sample-based profile guided optimizations]'
  '-fprofile-use[use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.]'
  '-freciprocal-math[allow division operations to be reassociated]'
  '-freg-struct-return[override the default ABI to return small structs in registers]'
  '-fregister-global-dtors-with-atexit[use atexit or __cxa_atexit to register global destructors]'
  '-frelaxed-template-template-args[enable C++17 relaxed template template argument matching]'
  '-freroll-loops[turn on loop reroller]'
  '-frewrite-imports[]'
  '-frewrite-includes[]'
  '-fropi[generate read-only position independent code (ARM only)]'
  '-frtlib-add-rpath[add -rpath with architecture-specific resource directory to the linker flags]'
  '-frtti-data[]'
  '-frtti[]'
  '-frwpi[generate read-write position independent code (ARM only)]'
  '-fsanitize-address-field-padding[level of field padding for AddressSanitizer]'
  '-fsanitize-address-globals-dead-stripping[enable linker dead stripping of globals in AddressSanitizer]'
  '-fsanitize-address-poison-custom-array-cookie[enable poisoning array cookies when using custom operator new\[\] in AddressSanitizer]'
  '-fsanitize-address-use-after-scope[enable use-after-scope detection in AddressSanitizer]'
  '-fsanitize-address-use-odr-indicator[enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size]'
  '-fsanitize-blacklist[path to blacklist file for sanitizers]'
  '-fsanitize-cfi-canonical-jump-tables[make the jump table addresses canonical in the symbol table]'
  '-fsanitize-cfi-cross-dso[enable control flow integrity (CFI) checks for cross-DSO calls.]'
  '-fsanitize-cfi-icall-generalize-pointers[generalize pointers in CFI indirect call type signature checks]'
  '-fsanitize-coverage-allowlist[restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones]'
  '-fsanitize-coverage-blacklist[deprecated, use -fsanitize-coverage-blocklist= instead]'
  '-fsanitize-coverage-blocklist[disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones]'
  '-fsanitize-coverage-whitelist[deprecated, use -fsanitize-coverage-allowlist= instead]'
  '-fsanitize-coverage[specify the type of coverage instrumentation for Sanitizers]'
  '-fsanitize-hwaddress-abi[select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.]'
  '-fsanitize-memory-track-origins[enable origins tracking in MemorySanitizer]'
  '-fsanitize-memory-track-origins[enable origins tracking in MemorySanitizer]'
  '-fsanitize-memory-use-after-dtor[enable use-after-destroy detection in MemorySanitizer]'
  '-fsanitize-recover[enable recovery for specified sanitizers]'
  '-fsanitize-stats[enable sanitizer statistics gathering.]'
  '-fsanitize-system-blacklist[path to system blacklist file for sanitizers]'
  '-fsanitize-thread-atomics[enable atomic operations instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-thread-func-entry-exit[enable function entry/exit instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-thread-memory-access[enable memory access instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-trap[enable trapping for specified sanitizers]'
  '-fsanitize-trap[enable trapping for all sanitizers]'
  '-fsanitize-undefined-strip-path-components[strip (or keep only, if negative) a given number of path components when emitting check metadata.]'
  '-fsanitize[turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks]'
  '-fsave-optimization-record[generate an optimization record file in a specific format]'
  '-fsave-optimization-record[generate a YAML optimization record file]'
  '-fseh-exceptions[use SEH style exceptions]'
  '-fshort-enums[allocate to an enum type only as many bytes as it needs for the declared range of possible values]'
  '-fshort-wchar[force wchar_t to be a short unsigned int]'
  '-fshow-column[]'
  '-fshow-overloads[which overload candidates to show when overload resolution fails: best|all; defaults to all]'
  '-fsigned-char[char is signed]'
  '-fsized-deallocation[enable C++14 sized global deallocation functions]'
  '-fsjlj-exceptions[use SjLj style exceptions]'
  '-fslp-vectorize[enable the superword-level parallelism vectorization passes]'
  '-fsplit-dwarf-inlining[provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF]'
  '-fsplit-lto-unit[enables splitting of the LTO unit]'
  '-fstack-clash-protection[enable stack clash protection]'
  '-fstack-protector-all[enable stack protectors for all functions]'
  '-fstack-protector-strong[enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable]'
  '-fstack-protector[enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca, which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable]'
  '-fstack-size-section[emit section containing metadata on function stack sizes]'
  '-fstandalone-debug[emit full debug info for all types used by the program]'
  '-fstrict-enums[enable optimizations based on the strict definition of an enums value range]'
  '-fstrict-float-cast-overflow[assume that overflowing float-to-int casts are undefined (default)]'
  '-fstrict-return[]'
  '-fstrict-vtable-pointers[enable optimizations based on the strict rules for overwriting polymorphic C++ objects]'
  '-fsycl[enable SYCL kernels compilation for device]'
  '-fsystem-module[build this module as a system module. Only used with -emit-module]'
  '-fthin-link-bitcode[write minimized bitcode to <file> for the ThinLTO thin link only]'
  '-fthinlto-index[perform ThinLTO importing using provided function summary index]'
  '-ftime-trace-granularity[minimum time granularity (in microseconds) traced by time profiler]'
  '-ftime-trace[turn on time profiler. Generates JSON file based on output filename.]'
  '-ftrap-function[issue call to specified function rather than a trap instruction]'
  '-ftrapv-handler[name>]'
  '-ftrapv[trap on integer overflow]'
  '-ftrigraphs[process trigraph sequences]'
  '-ftrivial-auto-var-init-stop-after[stop initializing trivial automatic stack variables after the specified number of instances]'
  '-ftrivial-auto-var-init[initialize trivial automatic stack variables: uninitialized (default) | pattern]'
  '-funique-basic-block-section-names[use unique names for basic block sections (ELF Only)]'
  '-funique-internal-linkage-names[uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path]'
  '-funique-section-names[]'
  '-funroll-loops[turn on loop unroller]'
  '-fuse-init-array[]'
  '-fuse-line-directives[use #line in preprocessed output]'
  '-fvalidate-ast-input-files-content[compute and store the hash of input files used to build an AST. Files with mismatching mtimes are considered valid if both contents is identical]'
  '-fveclib[use the given vector functions library]'
  '-fvectorize[enable the loop vectorization passes]'
  '-fverbose-asm[generate verbose assembly output]'
  '-fvirtual-function-elimination[enables dead virtual function elimination optimization. Requires -flto=full]'
  '-fvisibility-global-new-delete-hidden[give global C++ operator new and delete declarations hidden visibility]'
  '-fvisibility-inlines-hidden[give inline C++ member functions hidden visibility by default]'
  '-fvisibility-ms-compat[give global types default visibility and global functions and variables hidden visibility by default]'
  '-fvisibility[set the default symbol visibility for all global declarations]'
  '-fwasm-exceptions[use WebAssembly style exceptions]'
  '-fwhole-program-vtables[whole-program vtable optimization. Requires -flto]'
  '-fwrapv[treat signed integer overflow as twos complement]'
  '-fwritable-strings[store string literals as writable data]'
  '-fxray-always-emit-customevents[always emit __xray_customevent(...) calls even if the containing function is not always instrumented]'
  '-fxray-always-emit-typedevents[always emit __xray_typedevent(...) calls even if the containing function is not always instrumented]'
  '-fxray-always-instrument[<value>]'
  '-fxray-attr-list[<value>]'
  '-fxray-function-index[]'
  '-fxray-ignore-loops[dont instrument functions with loops unless they also meet the minimum function size]'
  '-fxray-instruction-threshold[<value>]'
  '-fxray-instrumentation-bundle[<value>]'
  '-fxray-instrument[generate XRay instrumentation sleds on function entry and exit]'
  '-fxray-link-deps[tells clang to add the link dependencies for XRay.]'
  '-fxray-modes[<value>   List of modes to link in by default into XRay instrumented binaries.]'
  '-fxray-never-instrument[<value>]'
  '-fzero-initialized-in-bss[]'
  '-fzvector[enable System z vector language extension]'
  '-F[add directory to framework include search path]'
  '--gcc-toolchain[use the gcc toolchain at the given directory]'
  '-gcodeview-ghash[emit type record hashes in a .debug$H section]'
  '-gcodeview[generate CodeView debug information]'
  '-gdwarf-2[generate source-level debug information with dwarf version 2]'
  '-gdwarf-3[generate source-level debug information with dwarf version 3]'
  '-gdwarf-4[generate source-level debug information with dwarf version 4]'
  '-gdwarf-5[generate source-level debug information with dwarf version 5]'
  '-gdwarf[generate source-level debug information with the default dwarf version]'
  '-gembed-source[embed source text in DWARF debug sections]'
  '-gline-directives-only[emit debug line info directives only]'
  '-gline-tables-only[emit debug line number tables only]'
  '-gmodules[generate debug info with external references to clang modules or precompiled headers]'
  '-gno-embed-source[restore the default behavior of not embedding source text in DWARF debug sections]'
  '-gno-inline-line-tables[t emit inline line tables]'
  '--gpu-max-threads-per-block[default max threads per block for kernel launch bounds for HIP]'
  '-gsplit-dwarf[set DWARF fission mode to either split or single]'
  '-gz[DWARF debug sections compression type]'
  '-gz[DWARF debug sections compression type]'
  '-G[put objects of at most <size> bytes into small data section (MIPS / Hexagon)]'
  '-g[generate source-level debug information]'
  '--help-hidden[display help for hidden options]'
  '-help[display available options]'
  '--hip-device-lib[HIP device library]'
  '--hip-link[link clang-offload-bundler bundles for HIP]'
  '--hip-version[HIP version in the format of major.minor.patch]'
  '-H[show header includes and nesting depth]'
  '-I-[restrict all prior -I flags to double-quoted inclusion and remove current directory from include path]'
  '-ibuiltininc[enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it]'
  '-idirafter[add directory to AFTER include search path]'
  '-iframeworkwithsysroot[add directory to SYSTEM framework search path, absolute paths are relative to -isysroot]'
  '-iframework[add directory to SYSTEM framework search path]'
  '-imacros[include macros from file before parsing]'
  '-include-pch[include precompiled header file]'
  '-include[include file before parsing]'
  '-index-header-map[make the next included directory (-I or -F) an indexer header map]'
  '-iprefix[set the -iwithprefix/-iwithprefixbefore prefix]'
  '-iquote[add directory to QUOTE include search path]'
  '-isysroot[set the system root directory (usually /)]'
  '-isystem-after[add directory to end of the SYSTEM include search path]'
  '-isystem[add directory to SYSTEM include search path]'
  '-ivfsoverlay[overlay the virtual filesystem described by file over the real file system]'
  '-iwithprefixbefore[set directory to include search path with prefix]'
  '-iwithprefix[set directory to SYSTEM include search path with prefix]'
  '-iwithsysroot[add directory to SYSTEM include search path, absolute paths are relative to -isysroot]'
  '-I[add directory to include search path]'
  '--libomptarget-nvptx-path[path to libomptarget-nvptx libraries]'
  '-L[add directory to library search path]'
  '-mabicalls[enable SVR4-style position-independent code (Mips only)]'
  '-maix-struct-return[return all structs in memory (PPC32 only)]'
  '-malign-branch-boundary[specify the boundarys size to align branches]'
  '-malign-branch[specify types of branches to align]'
  '-malign-double[align doubles to two words in structs (x86 only)]'
  '-mbackchain[link stack frames through backchain on System Z]'
  '-mbranch-protection[enforce targets of indirect branches and function returns]'
  '-mbranches-within-32B-boundaries[align selected branches (fused, jcc, jmp) within 32-byte boundary]'
  '-mcmodel[equivalent to -mcmodel=medium, compatible with RISC-V gcc.]'
  '-mcmodel[equivalent to -mcmodel=small, compatible with RISC-V gcc.]'
  '-mcmse[allow use of CMSE (Armv8-M Security Extensions)]'
  '-mcode-object-v3[enable code object v3 (AMDGPU only)]'
  '-mcrc[allow use of CRC instructions (ARM/Mips only)]'
  '-mcumode[CU wavefront execution mode is used (AMDGPU only)]'
  '-mdouble[force double to be 32 bits or 64 bits]'
  '-MD[write a depfile containing user and system headers]'
  '-meabi[set EABI type, e.g. 4, 5 or gnu (default depends on triple)]'
  '-membedded-data[place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)]'
  '-menable-experimental-extensions[enable use of experimental RISC-V extensions.]'
  '-mexec-model[execution model (WebAssembly only)]'
  '-mexecute-only[disallow generation of data access to code sections (ARM only)]'
  '-mextern-sdata[assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)]'
  '-mfentry[insert calls to fentry at function entry (x86/SystemZ only)]'
  '-mfix-cortex-a53-835769[cortex-A53 erratum 835769 (AArch64 only)]'
  '-mfp32[use 32-bit floating point registers (MIPS only)]'
  '-mfp64[use 64-bit floating point registers (MIPS only)]'
  '-MF[write depfile output from -MMD, -MD, -MM, or -M to <file>]'
  '-mgeneral-regs-only[generate code which only uses the general purpose registers (AArch64 only)]'
  '-mglobal-merge[enable merging of globals]'
  '-mgpopt[use GP relative accesses for symbols known to be in a small data section (MIPS)]'
  '-MG[add missing headers to depfile]'
  '-mharden-sls[select straight-line speculation hardening scope]'
  '-mhvx-length[set Hexagon Vector Length]'
  '-mhvx[enable Hexagon Vector eXtensions]'
  '-mhvx[enable Hexagon Vector eXtensions]'
  '-miamcu[use Intel MCU ABI]'
  '--migrate[run the migrator]'
  '-mincremental-linker-compatible[(integrated-as) Emit an object file which can be used with an incremental linker]'
  '-mindirect-jump[change indirect jump instructions to inhibit speculation]'
  '-mios-version-min[set iOS deployment target]'
  '-MJ[write a compilation database entry per input]'
  '-mllvm[additional arguments to forward to LLVMs option processing]'
  '-mlocal-sdata[extend the -G behaviour to object local data (MIPS)]'
  '-mlong-calls[generate branches with extended addressability, usually via indirect jumps.]'
  '-mlong-double-128[force long double to be 128 bits]'
  '-mlong-double-64[force long double to be 64 bits]'
  '-mlong-double-80[force long double to be 80 bits, padded to 128 bits for storage]'
  '-mlvi-cfi[enable only control-flow mitigations for Load Value Injection (LVI)]'
  '-mlvi-hardening[enable all mitigations for Load Value Injection (LVI)]'
  '-mmacosx-version-min[set Mac OS X deployment target]'
  '-mmadd4[enable the generation of 4-operand madd.s, madd.d and related instructions.]'
  '-MMD[write a depfile containing user headers]'
  '-mmemops[enable generation of memop instructions]'
  '-mms-bitfields[set the default structure layout to be compatible with the Microsoft compiler standard]'
  '-mmsa[enable MSA ASE (MIPS only)]'
  '-mmt[enable MT ASE (MIPS only)]'
  '-MM[like -MMD, but also implies -E and writes to stdout by default]'
  '-mno-abicalls[disable SVR4-style position-independent code (Mips only)]'
  '-mno-code-object-v3[disable code object v3 (AMDGPU only)]'
  '-mno-crc[disallow use of CRC instructions (Mips only)]'
  '-mno-cumode[WGP wavefront execution mode is used (AMDGPU only)]'
  '-mno-embedded-data[do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)]'
  '-mno-execute-only[allow generation of data access to code sections (ARM only)]'
  '-mno-extern-sdata[do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)]'
  '-mno-fix-cortex-a53-835769[dont workaround Cortex-A53 erratum 835769 (AArch64 only)]'
  '-mno-global-merge[disable merging of globals]'
  '-mno-gpopt[do not use GP relative accesses for symbols known to be in a small data section (MIPS)]'
  '-mno-hvx[disable Hexagon Vector eXtensions]'
  '-mno-implicit-float[dont generate implicit floating point instructions]'
  '-mno-incremental-linker-compatible[(integrated-as) Emit an object file which cannot be used with an incremental linker]'
  '-mno-local-sdata[do not extend the -G behaviour to object local data (MIPS)]'
  '-mno-long-calls[restore the default behaviour of not generating long calls]'
  '-mno-lvi-cfi[disable control-flow mitigations for Load Value Injection (LVI)]'
  '-mno-lvi-hardening[disable mitigations for Load Value Injection (LVI)]'
  '-mno-madd4[disable the generation of 4-operand madd.s, madd.d and related instructions.]'
  '-mno-memops[disable generation of memop instructions]'
  '-mno-movt[disallow use of movt/movw pairs (ARM only)]'
  '-mno-ms-bitfields[do not set the default structure layout to be compatible with the Microsoft compiler standard]'
  '-mno-msa[disable MSA ASE (MIPS only)]'
  '-mno-mt[disable MT ASE (MIPS only)]'
  '-mno-neg-immediates[disallow converting instructions with negative immediates to their negation or inversion.]'
  '-mno-nvj[disable generation of new-value jumps]'
  '-mno-nvs[disable generation of new-value stores]'
  '-mno-outline[disable function outlining (AArch64 only)]'
  '-mno-packets[disable generation of instruction packets]'
  '-mno-relax[disable linker relaxation]'
  '-mno-restrict-it[allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode]'
  '-mno-save-restore[disable using library calls for save and restore]'
  '-mno-seses[disable speculative execution side effect suppression (SESES)]'
  '-mno-sram-ecc[disable SRAM ECC (AMDGPU only)]'
  '-mno-stack-arg-probe[disable stack probes which are enabled by default]'
  '-mno-tls-direct-seg-refs[disable direct TLS access through segment registers]'
  '-mno-unaligned-access[force all memory accesses to be aligned (AArch32/AArch64 only)]'
  '-mno-wavefrontsize64[wavefront size 32 is used]'
  '-mno-xnack[disable XNACK (AMDGPU only)]'
  '-mnocrc[disallow use of CRC instructions (ARM only)]'
  '-mnop-mcount[generate mcount/__fentry__ calls as nops. To activate they need to be patched in.]'
  '-mnvj[enable generation of new-value jumps]'
  '-mnvs[enable generation of new-value stores]'
  '-module-dependency-dir[directory to dump module dependencies to]'
  '-module-file-info[provide information about a particular module file]'
  '-momit-leaf-frame-pointer[omit frame pointer setup for leaf functions]'
  '-moutline[enable function outlining (AArch64 only)]'
  '-mpacked-stack[use packed stack layout (SystemZ only).]'
  '-mpackets[enable generation of instruction packets]'
  '-mpad-max-prefix-size[specify maximum number of prefixes to use for padding]'
  '-mpie-copy-relocations[use copy relocations support for PIE builds]'
  '-mprefer-vector-width[specifies preferred vector width for auto-vectorization. Defaults to none which allows target specific decisions.]'
  '-MP[create phony target for each dependency (other than main file)]'
  '-mqdsp6-compat[enable hexagon-qdsp6 backward compatibility]'
  '-MQ[specify name of main file output to quote in depfile]'
  '-mrecord-mcount[generate a __mcount_loc section entry for each __fentry__ call.]'
  '-mrelax-all[(integrated-as) Relax all machine instructions]'
  '-mrelax[enable linker relaxation]'
  '-mrestrict-it[disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.]'
  '-mrtd[make StdCall calling convention the default]'
  '-msave-restore[enable using library calls for save and restore]'
  '-mseses[enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations]'
  '-msign-return-address[select return address signing scope]'
  '-msmall-data-limit[put global and static data smaller than the limit into a special section]'
  '-msoft-float[use software floating point]'
  '-msram-ecc[enable SRAM ECC (AMDGPU only)]'
  '-mstack-alignment[set the stack alignment]'
  '-mstack-arg-probe[enable stack probes]'
  '-mstack-probe-size[set the stack probe size]'
  '-mstackrealign[force realign the stack at entry to every function]'
  '-msvr4-struct-return[return small structs in registers (PPC32 only)]'
  '-mthread-model[the thread model to use, e.g. posix, single (posix by default)]'
  '-mtls-direct-seg-refs[enable direct TLS access through segment registers (default)]'
  '-mtls-size[specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)]'
  '-mtp[thread pointer access method (AArch32/AArch64 only)]'
  '-mtune[accepted for compatibility with GCC. Currently has no effect.]'
  '-MT[specify name of main file output in depfile]'
  '-munaligned-access[allow memory accesses to be unaligned (AArch32/AArch64 only)]'
  '-MV[use NMake/Jom format for the depfile]'
  '-mwavefrontsize64[wavefront size 64 is used]'
  '-mxnack[enable XNACK (AMDGPU only)]'
  '-M[like -MD, but also implies -E and writes to stdout by default]'
  '--no-cuda-include-ptx[do not include PTX for the following GPU architecture (e.g. sm_35) or all. May be specified more than once.]'
  '--no-cuda-version-check[t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.]'
  '--no-offload-arch[remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. all resets the list to its default value.]'
  '--no-system-header-prefix[treat all #include paths starting with <prefix> as not including a system header.]'
  '-nobuiltininc[disable builtin #include directories]'
  '-nogpulib[do not link device library for CUDA/HIP device compilation]'
  '-nostdinc[++             Disable standard #include directories for the C++ standard library]'
  '-ObjC[++                 Treat source input files as Objective-C++ inputs]'
  '-objcmt-atomic-property[migration to atomic properties]'
  '-objcmt-migrate-all[enable migration to modern ObjC]'
  '-objcmt-migrate-annotation[enable migration to property and method annotations]'
  '-objcmt-migrate-designated-init[enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods]'
  '-objcmt-migrate-instancetype[enable migration to infer instancetype for method result type]'
  '-objcmt-migrate-literals[enable migration to modern ObjC literals]'
  '-objcmt-migrate-ns-macros[enable migration to NS_ENUM/NS_OPTIONS macros]'
  '-objcmt-migrate-property-dot-syntax[enable migration of setter/getter messages to property-dot syntax]'
  '-objcmt-migrate-property[enable migration to modern ObjC property]'
  '-objcmt-migrate-protocol-conformance[enable migration to add protocol conformance on classes]'
  '-objcmt-migrate-readonly-property[enable migration to modern ObjC readonly property]'
  '-objcmt-migrate-readwrite-property[enable migration to modern ObjC readwrite property]'
  '-objcmt-migrate-subscripting[enable migration to modern ObjC subscripting]'
  '-objcmt-ns-nonatomic-iosonly[enable migration to use NS_NONATOMIC_IOSONLY macro for setting propertys atomic attribute]'
  '-objcmt-returns-innerpointer-property[enable migration to annotate property with NS_RETURNS_INNER_POINTER]'
  '-objcmt-whitelist-dir-path[only modify files with a filename contained in the provided directory path]'
  '-ObjC[treat source input files as Objective-C inputs]'
  '--offload-arch[CUDA/HIP offloading device architecture (e.g. sm_35, gfx906).  May be specified more than once.]'
  '-o[write output to <file>]'
  '-pg[enable mcount instrumentation]'
  '-pipe[use pipes between commands, when possible]'
  '--precompile[only precompile the input]'
  '-print-effective-triple[the effective target triple]'
  '-print-file-name[print the full library path of <file>]'
  '-print-ivar-layout[enable Objective-C Ivar layout bitmap print trace]'
  '-print-libgcc-file-name[the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")]'
  '-print-prog-name[print the full program path of <name>]'
  '-print-resource-dir[print the resource directory pathname]'
  '-print-search-dirs[print the paths used for finding libraries and programs]'
  '-print-supported-cpus[print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)]'
  '-print-target-triple[print the normalized target triple]'
  '-print-targets[print the registered targets]'
  '-pthread[support POSIX threads in generated code]'
  '--ptxas-path[path to ptxas (used for compiling CUDA code)]'
  '-P[disable linemarker output in -E mode]'
  '-Qn[do not emit metadata containing compiler name and version]'
  '-Qunused-arguments[dont emit warning for unused driver arguments]'
  '-Qy[emit metadata containing compiler name and version]'
  '-relocatable-pch[whether to build a relocatable precompiled header]'
  '-rewrite-legacy-objc[rewrite Legacy Objective-C source to C++]'
  '-rewrite-objc[rewrite Objective-C source to C++]'
  '--rocm-device-lib-path[ROCm device library path. Alternative to rocm-path.]'
  '--rocm-path[ROCm installation path, used for finding and automatically linking required bitcode libraries.]'
  '-Rpass-analysis[report transformation analysis from optimization passes whose name matches the given POSIX regular expression]'
  '-Rpass-missed[report missed transformations by optimization passes whose name matches the given POSIX regular expression]'
  '-Rpass[report transformations performed by optimization passes whose name matches the given POSIX regular expression]'
  '-rtlib[compiler runtime library to use]'
  '-R[<remark>              Enable the specified remark]'
  '-save-stats[save llvm statistics.]'
  '-save-stats[save llvm statistics.]'
  '-save-temps[save intermediate compilation results.]'
  '-save-temps[save intermediate compilation results]'
  '-serialize-diagnostics[serialize compiler diagnostics to a file]'
  '-shared-libsan[dynamically link the sanitizer runtime]'
  '-static-libsan[statically link the sanitizer runtime]'
  '-static-openmp[use the static host OpenMP runtime while linking.]'
  '-std[language standard to compile for]'
  '-stdlib[++-isystem <directory>]'
  '-stdlib[C++ standard library to use]'
  '-sycl-std[SYCL language standard to compile for.]'
  '--system-header-prefix[treat all #include paths starting with <prefix> as including a system header.]'
  '-S[only run preprocess and compilation steps]'
  '--target[generate code for the given target]'
  '-Tbss[set starting address of BSS to <addr>]'
  '-Tdata[set starting address of DATA to <addr>]'
  '-time[time individual commands]'
  '-traditional-cpp[enable some traditional CPP emulation]'
  '-trigraphs[process trigraph sequences]'
  '-Ttext[set starting address of TEXT to <addr>]'
  '-T[specify <script> as linker script]'
  '-undef[undef all system defines]'
  '-unwindlib[unwind library to use]'
  '-U[undefine macro <macro>]'
  '--verify-debug-info[verify the binary representation of debug output]'
  '-verify-pch[load and verify that a pre-compiled header file is not stale]'
  '--version[print version information]'
  '-v[show commands to run and use verbose output]'
  '-Wa[<arg>               Pass the comma separated arguments in <arg> to the assembler]'
  '-Wdeprecated[enable warnings for deprecated constructs and define __DEPRECATED]'
  '-Wl[<arg>               Pass the comma separated arguments in <arg> to the linker]'
  '-working-directory[resolve file paths relative to the specified directory]'
  '-Wp[<arg>               Pass the comma separated arguments in <arg> to the preprocessor]'
  '-W[<warning>             Enable the specified warning]'
  '-w[suppress all warnings]'
  '-Xanalyzer[pass <arg> to the static analyzer]'
  '-Xarch[_device <arg>     Pass <arg> to the CUDA/HIP device compilation]'
  '-Xarch[_host <arg>       Pass <arg> to the CUDA/HIP host compilation]'
  '-Xassembler[pass <arg> to the assembler]'
  '-Xclang[pass <arg> to the clang compiler]'
  '-Xcuda-fatbinary[pass <arg> to fatbinary invocation]'
  '-Xcuda-ptxas[pass <arg> to the ptxas assembler]'
  '-Xlinker[pass <arg> to the linker]'
  '-Xopenmp-target[<arg>]'
  '-Xopenmp-target[pass <arg> to the target offloading toolchain.]'
  '-Xpreprocessor[pass <arg> to the preprocessor]'
  '-x[treat subsequent input files as having type <language>]'
  '-z[pass -z <arg> to the linker]'
  '*:filename:_files'
)

_arguments -s $arguments
