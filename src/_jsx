#compdef jsx

local arguments

arguments=(
  {-V,--version}'[output the version number]'
  {-c,--config}'[JSON configuration file (no file or - means STDIN)]'
  {-w,--watch}'[continually rebuild]'
  {-x,--extension}'[| coffee | ...> File extension to assume when resolving module identifiers]'
  '--relativize[rewrite all module identifiers to be relative]'
  '--follow-requires[scan modules for required dependencies]'
  '--use-provides-module[respect @providesModules pragma in files]'
  '--cache-dir[alternate directory to use for disk cache]'
  '--no-cache-dir[disable the disk cache]'
  '--source-charset[8 | win1252 | ...> Charset of source (default: utf8)]'
  '--output-charset[8 | win1252 | ...> Charset of output (default: utf8)]'
  '--harmony[turns on JS transformations such as ES6 Classes etc.]'
  '--target[specify your target version of ECMAScript. Valid values are "es3" and "es5". The default is "es5". "es3" will avoid uses of defineProperty and will quote reserved words. WARNING: "es5" is not properly supported, even with the use of es5shim, es5sham. If you need to support IE8, use "es3". (default: es5)]'
  '--strip-types[strips out type annotations.]'
  '--es6module[parses the file as a valid ES6 module. (Note that this means implicit strict mode)]'
  '--non-strict-es6module[parses the file as an ES6 module, except disables implicit strict-mode. (This is useful if youre porting non-ES6 modules to ES6, but havent yet verified that they are strict-mode safe yet)]'
  '--source-map-inline[embed inline sourcemap in transformed source]'
  '(- * :)'{-h,--help}'[output usage information]'
  '*:filename:_files'
)

_arguments -s $arguments
