#compdef nosetests

local arguments

arguments=(
  '(- * :)'{-h,--help}'[show this help message and exit]'
  {-V,--version}'[output nose version and exit]'
  {-p,--plugins}'[output list of available plugins and exit. Combine]'
  {-v,--verbose}'[be more verbose. \[NOSE_VERBOSE\]]'
  '--verbosity[set verbosity; --verbosity=2 is the same as -v]'
  {-q,--quiet}'[be less verbose]'
  {-c,--config}'[load configuration from config file(s). May be]'
  {-w,--where}'[look for tests in this directory. May be specified]'
  '--py3where[3WHERE Look for tests in this directory under Python 3.x.]'
  {-m,--match,--testmatch}'[files, directories, function names, and class names]'
  '--tests[run these tests (comma-separated list). This argument]'
  {-l,--debug}'[activate debug logging for one or more systems.]'
  '--debug-log[log debug messages to this file (default: sys.stderr)]'
  {--logging-config,--log-config}'[load logging config from this file -- bypasses all]'
  {-I,--ignore-files}'[completely ignore any file that matches this regular]'
  {-e,--exclude}'[dont run tests that match regular expression]'
  {-i,--include}'[this regular expression will be applied to files]'
  {-x,--stop}'[stop running tests after the first error or failure]'
  {-P,--no-path-adjustment}'[dont make any changes to sys.path when loading tests]'
  '--exe[look for tests in python modules that are executable.]'
  '--noexe[DO NOT look for tests in python modules that are]'
  '--traverse-namespace[traverse through all path entries of a namespace]'
  {--first-package-wins,--first-pkg-wins,--1st-pkg-wins}'[noses importer will normally evict a package from]'
  '--no-byte-compile[prevent nose from byte-compiling the source into .pyc]'
  {-a,--attr}'[run only tests that have attributes specified by ATTR]'
  {-A,--eval-attr}'[run only tests for whose attributes the Python]'
  {-s,--nocapture}'[dont capture stdout (any stdout output will be]'
  '--nologcapture[disable logging capture plugin. Logging configuration]'
  '--logging-format[specify custom format to print statements. Uses the]'
  '--logging-datefmt[specify custom date/time format to print statements.]'
  '--logging-filter[specify which statements to filter in/out. By default]'
  '--logging-clear-handlers[clear all other logging handlers]'
  '--logging-level[set the log level to capture]'
  '--with-coverage[enable plugin Coverage: Activate a coverage report]'
  '--cover-package[restrict coverage output to selected packages]'
  '--cover-erase[erase previously collected coverage statistics before]'
  '--cover-tests[include test modules in coverage report]'
  '--cover-min-percentage[minimum percentage of coverage for tests to pass]'
  '--cover-inclusive[include all python files under working directory in]'
  '--cover-html[produce HTML coverage information]'
  '--cover-html-dir[produce HTML coverage information in dir]'
  '--cover-branches[include branch coverage in coverage report]'
  '--cover-xml[produce XML coverage information]'
  '--cover-xml-file[produce XML coverage information in file]'
  '--pdb[drop into debugger on failures or errors]'
  '--pdb-failures[drop into debugger on failures]'
  '--pdb-errors[drop into debugger on errors]'
  '--no-deprecated[disable special handling of DeprecatedTest exceptions.]'
  '--with-doctest[enable plugin Doctest: Activate doctest plugin to]'
  '--doctest-tests[also look for doctests in test modules. Note that]'
  '--doctest-extension[also look for doctests in files with this extension]'
  '--doctest-result-variable[change the variable name set to the result of the last]'
  '--doctest-fixtures[find fixtures for a doctest file in module with this]'
  '--doctest-options[specify options to pass to doctest. Eg.]'
  '--with-isolation[enable plugin IsolationPlugin: Activate the isolation]'
  {-d,--detailed-errors,--failure-detail}'[add detail to error output by attempting to evaluate]'
  '--with-profile[enable plugin Profile: Use this plugin to run tests]'
  '--profile-sort[set sort order for profiler output]'
  '--profile-stats-file[profiler stats file; default is a new temp file on]'
  '--profile-restrict[restrict profiler output. See help for pstats.Stats]'
  '--no-skip[disable special handling of SkipTest exceptions.]'
  '--with-id[enable plugin TestId: Activate to add a test id (like]'
  '--id-file[store test ids found in test runs in this file.]'
  '--failed[run the tests that failed in the last test run.]'
  '--processes[spread test run among this many processes. Set a]'
  '--process-timeout[set timeout for return of results from each test]'
  '--process-restartworker[if set, will restart each worker process once their]'
  '--with-xunit[enable plugin Xunit: This plugin provides test results]'
  '--xunit-file[path to xml file to store the xunit report in. Default]'
  '--xunit-testsuite-name[name of the testsuite in the xunit xml, generated by]'
  '--all-modules[enable plugin AllModules: Collect tests from all]'
  '--collect-only[enable collect-only: Collect and output test names]'
  '*:filename:_files'
)

_arguments -s $arguments
