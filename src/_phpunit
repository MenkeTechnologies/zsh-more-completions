#compdef phpunit

local arguments

arguments=(
  '--coverage-clover[generate code coverage report in Clover XML format]'
  '--coverage-cobertura[generate code coverage report in Cobertura XML format]'
  '--coverage-crap4j[generate code coverage report in Crap4J XML format]'
  '--coverage-html[generate code coverage report in HTML format]'
  '--coverage-php[export PHP_CodeCoverage object to file]'
  '--coverage-text[generate code coverage report in text format \[default: standard output\]]'
  '--coverage-xml[generate code coverage report in PHPUnit XML format]'
  '--coverage-cache[cache static analysis results]'
  '--warm-coverage-cache[warm static analysis cache]'
  '--coverage-filter[include <dir> in code coverage analysis]'
  '--path-coverage[perform path coverage analysis]'
  '--disable-coverage-ignore[disable annotations for ignoring code coverage]'
  '--no-coverage[ignore code coverage configuration]'
  '--log-junit[log test execution in JUnit XML format to file]'
  '--log-teamcity[log test execution in TeamCity format to file]'
  '--testdox-html[write agile documentation in HTML format to file]'
  '--testdox-text[write agile documentation in Text format to file]'
  '--testdox-xml[write agile documentation in XML format to file]'
  '--reverse-list[print defects in reverse order]'
  '--no-logging[ignore logging configuration]'
  '--list-suites[list available test suites]'
  '--testsuite[filter which testsuite to run]'
  '--list-groups[list available test groups]'
  '--group[only runs tests from the specified group(s)]'
  '--exclude-group[exclude tests from the specified group(s)]'
  '--covers[only runs tests annotated with "@covers <name>"]'
  '--uses[only runs tests annotated with "@uses <name>"]'
  '--list-tests[list available tests]'
  '--list-tests-xml[list available tests in XML format]'
  '--filter[filter which tests to run]'
  '--test-suffix[only search for test in files with specified suffix(es). Default: Test.php,.phpt]'
  '--dont-report-useless-tests[not report tests that do not test anything]'
  '--strict-coverage[be strict about @covers annotation usage]'
  '--strict-global-state[be strict about changes to global state]'
  '--disallow-test-output[be strict about output during tests]'
  '--disallow-resource-usage[be strict about resource usage during small tests]'
  '--enforce-time-limit[enforce time limit based on test size]'
  '--default-time-limit[timeout in seconds for tests without @small, @medium or @large]'
  '--disallow-todo-tests[disallow @todo-annotated tests]'
  '--process-isolation[run each test in a separate PHP process]'
  '--globals-backup[backup and restore $GLOBALS for each test]'
  '--static-backup[backup and restore static attributes for each test]'
  '--colors[use colors in output ("never", "auto" or "always")]'
  '--columns[number of columns to use for progress output]'
  '--columns[use maximum number of columns for progress output]'
  '--stderr[write to STDERR instead of STDOUT]'
  '--stop-on-defect[stop execution upon first not-passed test]'
  '--stop-on-error[stop execution upon first error]'
  '--stop-on-failure[stop execution upon first error or failure]'
  '--stop-on-warning[stop execution upon first warning]'
  '--stop-on-risky[stop execution upon first risky test]'
  '--stop-on-skipped[stop execution upon first skipped test]'
  '--stop-on-incomplete[stop execution upon first incomplete test]'
  '--fail-on-incomplete[treat incomplete tests as failures]'
  '--fail-on-risky[treat risky tests as failures]'
  '--fail-on-skipped[treat skipped tests as failures]'
  '--fail-on-warning[treat tests with warnings as failures]'
  '-v[|--verbose                Output more verbose information]'
  '--debug[display debugging information]'
  '--repeat[runs the test(s) repeatedly]'
  '--teamcity[report test execution progress in TeamCity format]'
  '--testdox[report test execution progress in TestDox format]'
  '--testdox-group[only include tests from the specified group(s)]'
  '--testdox-exclude-group[exclude tests from the specified group(s)]'
  '--no-interaction[disable TestDox progress animation]'
  '--printer[testListener implementation to use]'
  '--order-by[run tests in order: default|defects|duration|no-depends|random|reverse|size]'
  '--random-order-seed[use a specific random seed <N> for random order]'
  '--cache-result[write test results to cache file]'
  '--do-not-cache-result[do not write test results to cache file]'
  '--prepend[A PHP script that is included as early as possible]'
  '--bootstrap[A PHP script that is included before the tests run]'
  '-c[|--configuration <file>   Read configuration from XML file]'
  '--no-configuration[ignore default configuration file (phpunit.xml)]'
  '--extensions[A comma separated list of PHPUnit extensions to load]'
  '--no-extensions[do not load PHPUnit extensions]'
  '--include-path[(s)>    Prepend PHPs include_path with given path(s)]'
  '-d[value\]>            Sets a php.ini value]'
  '--cache-result-file[specify result cache path and filename]'
  '--generate-configuration[generate configuration file with suggested settings]'
  '--migrate-configuration[migrate configuration file to current format]'
  '-h[|--help                   Prints this usage information]'
  '--version[prints the version and exits]'
  '--atleast-version[checks that version is greater than min and exits]'
  '--check-version[check whether PHPUnit is the latest version]'
  '*:filename:_files'
)

_arguments -s $arguments
