#compdef pmixcc

local arguments

arguments=(
  '--amdgpu-arch-tool[tool used for detecting AMD GPU arch in the system.]'
  '--analyzer-output[static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).]'
  '--analyze[run the static analyzer]'
  '-arcmt-migrate-emit-errors[emit ARC errors even if the migrator can fix them]'
  '-arcmt-migrate-report-output[output path for the plist report]'
  '-B[search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file]'
  '-b[pass -b <arg> to the linker on AIX]'
  '-cc1-args[pass cc1 options to depscan afterwards]'
  '-CC[include comments from within macros in preprocessed output]'
  '-cl-denorms-are-zero[openCL only. Allow denormals to be flushed to zero.]'
  '-cl-ext[openCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by + or -.]'
  '-cl-fast-relaxed-math[openCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.]'
  '-cl-finite-math-only[openCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.]'
  '-cl-fp32-correctly-rounded-divide-sqrt[openCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.]'
  '-cl-kernel-arg-info[openCL only. Generate kernel argument metadata.]'
  '-cl-mad-enable[openCL only. Allow use of less precise MAD computations in the generated binary.]'
  '-cl-no-signed-zeros[openCL only. Allow use of less precise no signed zeros computations in the generated binary.]'
  '-cl-no-stdinc[openCL only. Disables all standard includes containing non-native compiler types and functions.]'
  '-cl-opt-disable[openCL only. This option disables all optimizations. By default optimizations are enabled.]'
  '-cl-single-precision-constant[openCL only. Treat double precision floating-point constant as single precision constant.]'
  '-cl-std[openCL language standard to compile for.]'
  '-cl-strict-aliasing[openCL only. This option is added for compatibility with OpenCL 1.0.]'
  '-cl-uniform-work-group-size[openCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel]'
  '-cl-unsafe-math-optimizations[openCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.]'
  '--config[specify configuration file]'
  '--cuda-compile-host-device[compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.]'
  '--cuda-device-only[compile CUDA code for device only]'
  '--cuda-feature[manually specify the CUDA feature to use]'
  '--cuda-host-only[compile CUDA code for host only. Has no effect on non-CUDA compilations.]'
  '--cuda-include-ptx[include PTX for the following GPU architecture (e.g. sm_35) or all. May be specified more than once.]'
  '--cuda-noopt-device-debug[enable device-side debug info generation. Disables ptxas optimizations.]'
  '--cuda-path-ignore-env[ignore environment variables to detect CUDA installation]'
  '--cuda-path[CUDA installation path]'
  '-cuid[an ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.]'
  '-cxx-isystem[add directory to the C++ SYSTEM include search path]'
  '-C[include comments in preprocessed output]'
  '-c[only run preprocess, compile, and assemble steps]'
  '-darwin-target-variant-triple[specify the darwin target variant triple]'
  '-darwin-target-variant[generate code for an additional runtime variant of the deployment target]'
  '-dD[print macro definitions in -E mode in addition to normal output]'
  '-dependency-dot[filename to write DOT-formatted header dependencies to]'
  '-dependency-file[filename (or -) to write dependency output to]'
  '-dI[print include directives in -E mode in addition to normal output]'
  '-dM[print macro definitions in -E mode instead of normal output]'
  '-dsym-dir[directory to output dSYMs (if any) to]'
  '-dump-depscan-tree[emit the CAS identifier for the tree instead of the full -cc1]'
  '-dumpdir[use <dumpfpx> as a prefix to form auxiliary and dump file names]'
  '-D[<value>      Define <macro> to <value> (or 1 if <value> omitted)]'
  '-emit-ast[emit Clang AST files for source inputs]'
  '--emit-extension-symbol-graphs[generate additional symbol graphs for extended modules.]'
  '-emit-interface-stubs[generate Interface Stub Files.]'
  '-emit-llvm[use the LLVM representation for assembler and object files]'
  '-emit-merged-ifs[generate Interface Stub Files, emit merged text not binary.]'
  '--emit-static-lib[enable linker job to emit a static library.]'
  '-emit-symbol-graph[generate Extract API information as a side effect of compilation.]'
  '--end-no-unused-arguments[start emitting warnings for unused driver arguments]'
  '--extract-api-ignores[comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.]'
  '-extract-api[extract API information]'
  '-E[only run the preprocessor]'
  '-faapcs-bitfield-load[follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).]'
  '-faapcs-bitfield-width[follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).]'
  '-faddrsig[emit an address-significance table]'
  '-falign-loops[N must be a power of two. Align loops to the boundary]'
  '-faligned-allocation[enable C++17 aligned allocation functions]'
  '-fallow-editor-placeholders[treat editor placeholders as valid source code]'
  '-faltivec-src-compat[source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for xl, vector for gcc) as well as behavior when initializing with a scalar (splatting for xl, element zero only for gcc). For mixed, the compatibility is as gcc for vector bool/vector pixel and as xl for other types. Current default is mixed.]'
  '-fansi-escape-codes[use ANSI escape codes for diagnostics]'
  '-fapinotes-cache-path[does nothing; API notes are no longer cached separately from modules]'
  '-fapinotes-modules[enable module-based external API notes support]'
  '-fapinotes-swift-version[specify the Swift version to use when filtering API notes]'
  '-fapinotes[enable external API notes support]'
  '-fapple-kext[use Apples kernel extensions ABI]'
  '-fapple-link-rtlib[force linking the clang builtins runtime library]'
  '-fapple-pragma-pack[enable Apple gcc-compatible #pragma pack handling]'
  '-fapplication-extension[code to those available for App Extensions]'
  '-fapprox-func[allow certain math function calls to be replaced with an approximately equivalent calculation]'
  '-fasync-exceptions[enable EH Asynchronous exceptions]'
  '-fbasic-block-sections[place each functions basic blocks in unique sections (ELF Only)]'
  '-fbinutils-version[.minor>]'
  '-fblocks[enable the blocks language feature]'
  '-fborland-extensions[accept non-standard constructs supported by the Borland compiler]'
  '-fbranch-target-identification[emit branch target identification instructions for indirect branch destinations]'
  '-fbuild-session-file[use the last modification time of <file> as the build session timestamp]'
  '-fbuild-session-timestamp[since Epoch in seconds>]'
  '-fbuiltin-headers-in-system-modules[builtin headers belong to system modules, and _Builtin_ modules are ignored for cstdlib headers]'
  '-fbuiltin-module-map[load the clang builtins module map file.]'
  '-fc[++-abi=<value>       C++ ABI to use. This will override the target C++ ABI.]'
  '-fcall-saved-x10[make the x10 register call-saved (AArch64 only)]'
  '-fcall-saved-x11[make the x11 register call-saved (AArch64 only)]'
  '-fcall-saved-x12[make the x12 register call-saved (AArch64 only)]'
  '-fcall-saved-x13[make the x13 register call-saved (AArch64 only)]'
  '-fcall-saved-x14[make the x14 register call-saved (AArch64 only)]'
  '-fcall-saved-x15[make the x15 register call-saved (AArch64 only)]'
  '-fcall-saved-x18[make the x18 register call-saved (AArch64 only)]'
  '-fcall-saved-x8[make the x8 register call-saved (AArch64 only)]'
  '-fcall-saved-x9[make the x9 register call-saved (AArch64 only)]'
  '-fcaret-diagnostics-max-lines[set the maximum number of source lines to show in a caret diagnostic (0 = no limit).]'
  '-fcf-protection[instrument control-flow architecture protection]'
  '-fcf-protection[enable cf-protection in full mode]'
  '-fchar8[_t               Enable C++ builtin type char8_t]'
  '-fcheck-new[do not assume C++ operator new may not return NULL]'
  '-fclang-abi-compat[attempt to match the ABI of Clang <version>]'
  '-fcolor-diagnostics[enable colors in diagnostics]'
  '-fcomment-block-commands[treat each comma separated argument in <arg> as a documentation comment block command]'
  '-fcommon[place uninitialized global variables in a common block]'
  '-fcomplete-member-pointers[require member pointer base types to be complete if they would be significant under the Microsoft ABI]'
  '-fconstexpr-backtrace-limit[set the maximum number of entries to print in a constexpr evaluation backtrace (0 = no limit)]'
  '-fconstexpr-depth[set the maximum depth of recursive constexpr function calls]'
  '-fconstexpr-steps[set the maximum number of steps in constexpr function evaluation]'
  '-fcoro-aligned-allocation[prefer aligned allocation for C++ Coroutines]'
  '-fcoroutines[enable support for the C++ Coroutines]'
  '-fcoverage-compilation-dir[the compilation directory to embed in the coverage mapping.]'
  '-fcoverage-mapping[generate coverage mapping to enable code coverage analysis]'
  '-fcoverage-prefix-map[<new>]'
  '-fcrash-diagnostics-dir[put crash-report files in <dir>]'
  '-fcrash-diagnostics[set level of crash diagnostic reporting, (option: off, compiler, all)]'
  '-fcrash-diagnostics[enable crash diagnostic reporting (default)]'
  '-fcs-profile-generate[generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fcs-profile-generate[generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fcuda-approx-transcendentals[use approximate transcendental functions]'
  '-fcuda-short-ptr[use 32-bit pointers for accessing const/local/shared address spaces]'
  '-fcxx-exceptions[enable C++ exceptions]'
  '-fcxx-modules[enable modules for C++]'
  '-fdata-sections[place each data in its own section]'
  '-fdebug-compilation-dir[the compilation directory to embed in the debug info]'
  '-fdebug-default-version[default DWARF version to use, if a -g option caused DWARF debug info to be produced]'
  '-fdebug-info-for-profiling[emit extra debug info to make sample profile more accurate]'
  '-fdebug-macro[emit macro debug information]'
  '-fdebug-prefix-map[<new>]'
  '-fdebug-ranges-base-address[use DWARF base address selection entries in .debug_ranges]'
  '-fdebug-types-section[place debug types in their own section (ELF Only)]'
  '-fdeclspec[allow __declspec as a keyword]'
  '-fdefine-target-os-macros[enable predefined target OS macros]'
  '-fdelayed-template-parsing[parse templated function definitions at the end of the translation unit]'
  '-fdelete-null-pointer-checks[treat usage of null pointers as undefined behavior (default)]'
  '-fdepscan-daemon[specify the path to the daemon to be used. Clang will use the daemon specified, rather than try to spawn its own based on parent processes.]'
  '-fdepscan-include-tree[set dep-scanner to produce the include tree]'
  '-fdepscan-prefix-map-sdk[with -fdepscan, auto-detect the SDK path on-disk and remap it to the given path (see -fdepscan-prefix-map=).]'
  '-fdepscan-prefix-map-toolchain[with -fdepscan, auto-detect the toolchain path on-disk and remap it to the given path (see -fdepscan-prefix-map=).]'
  '-fdepscan-prefix-map[<new>]'
  '-fdepscan-share-identifier[share depscan daemon for Clang invocations using the same string identifier.]'
  '-fdepscan-share-parent[share state based on the PID of the parent command if the name matches. See also -fdepscan-share-stop.]'
  '-fdepscan-share-parent[share state based on the PID of the parent command. See also -fdepscan-share-stop.]'
  '-fdepscan-share-stop[stop looking for the command named by -fdepscan-share if a process with the name of the provided argument is found first. Also blocks -fdepscan-share=parent if the parent has this name. E.g., -fdepscan -fdepscan-share=ninja -fdepscan-share-stop=cmake looks for ninja and cmake in the process tree; if ninja is found first, state is shared based on ninjas PID; if cmake is found first, state is not shared.]'
  '-fdepscan-share[if the argument is the name of a command in the process tree, share state based on its PID. E.g., -fdepscan -fdepscan-share=ninja will search for ninja in the process tree and share state based on its PID if found. See also -fdepscan-share-stop.]'
  '-fdepscan[scan for dependencies ahead of compiling, generating a pruned CAS tree to send to -fcas-fs. Values are auto, daemon (see -fdepscan-share and -fdepscan-share-parent), inline, or off (default).]'
  '-fdepscan[turn on -fdepscan=auto.]'
  '-fdiagnostics-absolute-paths[print absolute paths in diagnostics]'
  '-fdiagnostics-hotness-threshold[prevent optimization remarks from being output if they do not have at least this profile count. Use auto to apply the threshold from profile summary]'
  '-fdiagnostics-misexpect-tolerance[prevent misexpect diagnostics from being output if the profile counts are within N% of the expected.]'
  '-fdiagnostics-parseable-fixits[print fix-its in machine parseable form]'
  '-fdiagnostics-print-source-range-info[print source range spans in numeric form]'
  '-fdiagnostics-show-hotness[enable profile hotness information in diagnostic line]'
  '-fdiagnostics-show-note-include-stack[display include stacks for diagnostic notes]'
  '-fdiagnostics-show-option[print option name with mappable diagnostics]'
  '-fdiagnostics-show-template-tree[print a template comparison tree for differing templates]'
  '-fdigraphs[enable alternative token representations <:, :>, <%, %>, %:, %:%: (default)]'
  '-fdirect-access-external-data[dont use GOT indirection to reference external data symbols]'
  '-fdiscard-value-names[discard value names in LLVM IR]'
  '-fdollars-in-identifiers[allow $ in identifiers]'
  '-fdriver-only[only run the driver.]'
  '-fdwarf-exceptions[use DWARF style exceptions]'
  '-feliminate-unused-debug-types[do not emit  debug info for defined but unused types]'
  '-fembed-bitcode-marker[embed placeholder LLVM IR data as a marker]'
  '-fembed-bitcode[embed LLVM bitcode]'
  '-fembed-bitcode[embed LLVM IR bitcode as data]'
  '-fembed-offload-object[embed Offloading device-side binary into host object file as a section.]'
  '-femit-all-decls[emit all declarations, even if unused]'
  '-femit-compact-unwind-non-canonical[try emitting Compact-Unwind for non-canonical entries. Maybe overriden by other constraints]'
  '-femit-dwarf-unwind[when to emit DWARF unwind (EH frame) info]'
  '-femulated-tls[use emutls functions to access thread_local variables]'
  '-fenable-matrix[enable matrix data type and related builtin functions]'
  '-fexceptions[enable support for exception handling]'
  '-fexcess-precision[allows control over excess precision on targets where native support for the precision types is not available. By default, excess precision is used to calculate intermediate results following the rules specified in ISO C99.]'
  '-fexperimental-library[control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes]'
  '-fexperimental-new-constant-interpreter[enable the experimental new constant interpreter]'
  '-fexperimental-relative-c[++-abi-vtables]'
  '-fexperimental-sanitize-metadata-ignorelist[disable sanitizer metadata for modules and functions that match the provided special case list]'
  '-fexperimental-sanitize-metadata[specify the type of metadata to emit for binary analysis sanitizers]'
  '-fexperimental-strict-floating-point[enables the use of non-default rounding modes and non-default exception handling on targets that are not currently ready.]'
  '-fextend-arguments[controls how scalar integer arguments are extended in calls to unprototyped and varargs functions]'
  '-ffast-math[allow aggressive, lossy floating-point optimizations]'
  '-ffile-compilation-dir[the compilation directory to embed in the debug info and coverage mapping.]'
  '-ffile-prefix-map[remap file source paths in debug info, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.]'
  '-ffile-reproducible[use the targets platform-specific path separator character when expanding the __FILE__ macro]'
  '-ffine-grained-bitfield-accesses[use separate accesses for consecutive bitfield runs with legal widths and alignments.]'
  '-ffinite-loops[assume all loops are finite.]'
  '-ffinite-math-only[allow floating-point optimizations that assume arguments and results are not NaNs or +-inf. This defines the \_\_FINITE\_MATH\_ONLY\_\_ preprocessor macro.]'
  '-ffixed-a0[reserve the a0 register (M68k only)]'
  '-ffixed-a1[reserve the a1 register (M68k only)]'
  '-ffixed-a2[reserve the a2 register (M68k only)]'
  '-ffixed-a3[reserve the a3 register (M68k only)]'
  '-ffixed-a4[reserve the a4 register (M68k only)]'
  '-ffixed-a5[reserve the a5 register (M68k only)]'
  '-ffixed-a6[reserve the a6 register (M68k only)]'
  '-ffixed-d0[reserve the d0 register (M68k only)]'
  '-ffixed-d1[reserve the d1 register (M68k only)]'
  '-ffixed-d2[reserve the d2 register (M68k only)]'
  '-ffixed-d3[reserve the d3 register (M68k only)]'
  '-ffixed-d4[reserve the d4 register (M68k only)]'
  '-ffixed-d5[reserve the d5 register (M68k only)]'
  '-ffixed-d6[reserve the d6 register (M68k only)]'
  '-ffixed-d7[reserve the d7 register (M68k only)]'
  '-ffixed-point[enable fixed point types]'
  '-ffixed-r19[reserve register r19 (Hexagon only)]'
  '-ffixed-r9[reserve the r9 register (ARM only)]'
  '-ffixed-x10[reserve the x10 register (AArch64/RISC-V only)]'
  '-ffixed-x11[reserve the x11 register (AArch64/RISC-V only)]'
  '-ffixed-x12[reserve the x12 register (AArch64/RISC-V only)]'
  '-ffixed-x13[reserve the x13 register (AArch64/RISC-V only)]'
  '-ffixed-x14[reserve the x14 register (AArch64/RISC-V only)]'
  '-ffixed-x15[reserve the x15 register (AArch64/RISC-V only)]'
  '-ffixed-x16[reserve the x16 register (AArch64/RISC-V only)]'
  '-ffixed-x17[reserve the x17 register (AArch64/RISC-V only)]'
  '-ffixed-x18[reserve the x18 register (AArch64/RISC-V only)]'
  '-ffixed-x19[reserve the x19 register (AArch64/RISC-V only)]'
  '-ffixed-x1[reserve the x1 register (AArch64/RISC-V only)]'
  '-ffixed-x20[reserve the x20 register (AArch64/RISC-V only)]'
  '-ffixed-x21[reserve the x21 register (AArch64/RISC-V only)]'
  '-ffixed-x22[reserve the x22 register (AArch64/RISC-V only)]'
  '-ffixed-x23[reserve the x23 register (AArch64/RISC-V only)]'
  '-ffixed-x24[reserve the x24 register (AArch64/RISC-V only)]'
  '-ffixed-x25[reserve the x25 register (AArch64/RISC-V only)]'
  '-ffixed-x26[reserve the x26 register (AArch64/RISC-V only)]'
  '-ffixed-x27[reserve the x27 register (AArch64/RISC-V only)]'
  '-ffixed-x28[reserve the x28 register (AArch64/RISC-V only)]'
  '-ffixed-x29[reserve the x29 register (AArch64/RISC-V only)]'
  '-ffixed-x2[reserve the x2 register (AArch64/RISC-V only)]'
  '-ffixed-x30[reserve the x30 register (AArch64/RISC-V only)]'
  '-ffixed-x31[reserve the x31 register (AArch64/RISC-V only)]'
  '-ffixed-x3[reserve the x3 register (AArch64/RISC-V only)]'
  '-ffixed-x4[reserve the x4 register (AArch64/RISC-V only)]'
  '-ffixed-x5[reserve the x5 register (AArch64/RISC-V only)]'
  '-ffixed-x6[reserve the x6 register (AArch64/RISC-V only)]'
  '-ffixed-x7[reserve the x7 register (AArch64/RISC-V only)]'
  '-ffixed-x8[reserve the x8 register (AArch64/RISC-V only)]'
  '-ffixed-x9[reserve the x9 register (AArch64/RISC-V only)]'
  '-fforce-dwarf-frame[always emit a debug frame section]'
  '-fforce-emit-vtables[emits more virtual tables to improve devirtualization]'
  '-fforce-enable-int128[enable support for int128_t type]'
  '-ffp-contract[form fused FP ops (e.g. FMAs)]'
  '-ffp-eval-method[specifies the evaluation method to use for floating-point arithmetic.]'
  '-ffp-exception-behavior[specifies the exception behavior of floating-point operations.]'
  '-ffp-model[controls the semantics of floating-point calculations.]'
  '-ffreestanding[assert that the compilation takes place in a freestanding environment]'
  '-ffuchsia-api-level[set Fuchsia API level]'
  '-ffunction-sections[place each function in its own section]'
  '-fgeneric-block-helpers[generic block helpers for copying/destroying blocks]'
  '-fglobal-isel[enables the global instruction selector]'
  '-fgnu-keywords[allow GNU-extension keywords regardless of language standard]'
  '-fgnu-runtime[generate output compatible with the standard GNU Objective-C runtime]'
  '-fgnu89-inline[use the gnu89 inline semantics]'
  '-fgnuc-version[sets various macros to claim compatibility with the given GCC version (default is 4.2.1)]'
  '-fgpu-allow-device-init[device side init function in HIP (experimental)]'
  '-fgpu-default-stream[specify default stream. The default value is legacy. (HIP only)]'
  '-fgpu-defer-diag[defer host/device related diagnostic messages for CUDA/HIP]'
  '-fgpu-flush-denormals-to-zero[flush denormal floating point values to zero in CUDA/HIP device mode.]'
  '-fgpu-rdc[generate relocatable device code, also known as separate compilation mode]'
  '-fgpu-sanitize[enable sanitizer for AMDGPU target]'
  '-fhip-emit-relocatable[compile HIP source to relocatable]'
  '-fhip-fp32-correctly-rounded-divide-sqrt[specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)]'
  '-fhip-kernel-arg-name[specify that kernel argument names are preserved (HIP only)]'
  '-fhip-new-launch-api[use new kernel launching API for HIP]'
  '-fhonor-infinities[specify that floating-point optimizations are not allowed that assume arguments and results are not +-inf.]'
  '-fhonor-nans[specify that floating-point optimizations are not allowed that assume arguments and results are not NANs.]'
  '-fignore-exceptions[enable support for ignoring exception handling constructs]'
  '-fimplicit-module-maps[implicitly search the file system for module map files.]'
  '-fin-descriptor-block-flags[emit in-descriptor block flags]'
  '-fincremental-extensions[enable incremental processing extensions such as processingstatements on the global scope.]'
  '-finline-functions[inline suitable functions]'
  '-finline-hint-functions[functions which are (explicitly or implicitly) marked inline]'
  '-finline-max-stacksize[suppress inlining of functions whose stack size exceeds the given value]'
  '-finput-charset[specify the default character set for source files]'
  '-finstrument-function-entry-bare[instrument function entry only, after inlining, without arguments to the instrumentation call]'
  '-finstrument-functions-after-inlining[like -finstrument-functions, but insert the calls after inlining]'
  '-finstrument-functions[generate calls to instrument function entry and exit]'
  '-fintegrated-as[enable the integrated assembler]'
  '-fintegrated-cc1[run cc1 in-process]'
  '-fintegrated-objemitter[internal machine object code emitter.]'
  '-fjmc[enable just-my-code debugging]'
  '-fjump-tables[use jump tables for lowering switches]'
  '-fkeep-persistent-storage-variables[enable keeping all variables that have a persistent storage duration, including global, static and thread-local variables, to guarantee that they can be directly addressed]'
  '-fkeep-static-consts[keep static const variables even if unused]'
  '-flax-vector-conversions[enable implicit vector bit-casts]'
  '-flto-jobs[controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)]'
  '-flto[enable LTO in full mode]'
  '-flto[enable LTO in full mode]'
  '-flto[set LTO mode]'
  '-flto[enable LTO in full mode]'
  '-fmacro-backtrace-limit[set the maximum number of entries to print in a macro expansion backtrace (0 = no limit)]'
  '-fmacro-prefix-map[remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.]'
  '-fmath-errno[require math functions to indicate errors by setting errno]'
  '-fmax-tokens[max total number of preprocessed tokens for -Wmax-tokens.]'
  '-fmax-type-align[specify the maximum alignment to enforce on pointers lacking an explicit alignment]'
  '-fmemory-profile-use[use memory profile for profile-guided memory optimization]'
  '-fmemory-profile[enable heap memory profiling and dump results into <directory>]'
  '-fmemory-profile[enable heap memory profiling]'
  '-fmerge-all-constants[allow merging of constants]'
  '-fmessage-length[format message diagnostics so that they fit within N columns]'
  '-fminimize-whitespace[ignore the whitespace from the input file when emitting preprocessor output. It will only contain whitespace when necessary, e.g. to keep two minus signs from merging into to an increment operator. Useful with the -P option to normalize whitespace such that two files with only formatting changes are equal.]'
  '-fmodule-file[\]<file>]'
  '-fmodule-header[build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.]'
  '-fmodule-header[build a C++20 Header Unit from a header.]'
  '-fmodule-map-file[load this module map file]'
  '-fmodule-name[specify the name of the module to build]'
  '-fmodule-output[save intermediate module file results when compiling a standard C++ module unit.]'
  '-fmodule-output[save intermediate module file results when compiling a standard C++ module unit.]'
  '-fmodule-related-to-pch[module as related to a PCH]'
  '-fmodulemap-allow-subdirectory-search[allow to search for module maps in subdirectories of search paths]'
  '-fmodules-cache-path[specify the module cache path]'
  '-fmodules-decluse[require declaration of modules used within a module]'
  '-fmodules-disable-diagnostic-validation[disable validation of the diagnostic options when loading the module]'
  '-fmodules-ignore-macro[ignore the definition of the given macro when building and loading modules]'
  '-fmodules-prune-after[specify the interval (in seconds) after which a module file will be considered unused]'
  '-fmodules-prune-interval[specify the interval (in seconds) between attempts to prune the module cache]'
  '-fmodules-search-all[search even non-imported modules to resolve references]'
  '-fmodules-skip-diagnostic-options[disable writing diagnostic options]'
  '-fmodules-skip-header-search-paths[disable writing header search paths]'
  '-fmodules-strict-decluse[like -fmodules-decluse but requires all headers to be in modules]'
  '-fmodules-user-build-path[specify the module user build path]'
  '-fmodules-validate-input-files-content[validate PCM input files based on content if mtime differs]'
  '-fmodules-validate-once-per-build-session[dont verify input files for the modules if the module has been successfully validated or loaded during this build session]'
  '-fmodules-validate-system-headers[validate the system headers that a module depends on when loading the module]'
  '-fmodules[enable the modules language feature]'
  '-fms-compatibility-version[dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = dont define it (default))]'
  '-fms-compatibility[enable full Microsoft Visual C++ compatibility]'
  '-fms-extensions[accept some non-standard constructs supported by the Microsoft compiler]'
  '-fms-hotpatch[ensure that all functions can be hotpatched at runtime]'
  '-fms-runtime-lib[select Windows run-time library]'
  '-fmsc-version[microsoft compiler version number to report in _MSC_VER (0 = dont define it (default))]'
  '-fnew-alignment[specifies the largest alignment guaranteed by ::operator new(size_t)]'
  '-fnew-infallible[enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.]'
  '-fno-aapcs-bitfield-width[do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).]'
  '-fno-access-control[disable C++ access control]'
  '-fno-addrsig[dont emit an address-significance table]'
  '-fno-apinotes-modules[disable module-based external API notes support]'
  '-fno-apinotes[disable external API notes support]'
  '-fno-assume-sane-operator-new[dont assume that C++s global operator new cant alias any pointer]'
  '-fno-assume-unique-vtables[disable optimizations based on vtable pointer identity]'
  '-fno-autolink[disable generation of linker directives for automatic library linking]'
  '-fno-builtin-[<value>    Disable implicit builtin knowledge of a specific function]'
  '-fno-builtin[disable implicit builtin knowledge of functions]'
  '-fno-c[++-static-destructors]'
  '-fno-char8[_t            Disable C++ builtin type char8_t]'
  '-fno-color-diagnostics[disable colors in diagnostics]'
  '-fno-common[compile common globals like normal definitions]'
  '-fno-complete-member-pointers[do not require member pointer base types to be complete if they would be significant under the Microsoft ABI]'
  '-fno-constant-cfstrings[creation of CodeFoundation-type constant strings]'
  '-fno-constant-nsarray-literals[disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals]'
  '-fno-constant-nsdictionary-literals[disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals]'
  '-fno-constant-nsnumber-literals[disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals]'
  '-fno-convergent-functions[assume all functions may be convergent.]'
  '-fno-coverage-mapping[disable code coverage analysis]'
  '-fno-crash-diagnostics[disable auto-generation of preprocessed source files and a script for reproduction during a clang crash]'
  '-fno-cuda-approx-transcendentals[dont use approximate transcendental functions]'
  '-fno-cxx-modules[disable modules for C++]'
  '-fno-debug-macro[do not emit macro debug information]'
  '-fno-declspec[disallow __declspec as a keyword]'
  '-fno-define-target-os-macros[disable predefined target OS macros]'
  '-fno-delayed-template-parsing[disable delayed template parsing]'
  '-fno-delete-null-pointer-checks[do not treat usage of null pointers as undefined behavior]'
  '-fno-depscan-share[turn off -fdepscan-share and -fdepscan-share-parent.]'
  '-fno-diagnostics-fixit-info[do not include fixit information in diagnostics]'
  '-fno-diagnostics-show-line-numbers[show line numbers in diagnostic code snippets]'
  '-fno-digraphs[disallow alternative token representations <:, :>, <%, %>, %:, %:%:]'
  '-fno-direct-access-external-data[use GOT indirection to reference external data symbols]'
  '-fno-discard-value-names[do not discard value names in LLVM IR]'
  '-fno-dollars-in-identifiers[disallow $ in identifiers]'
  '-fno-elide-constructors[C++ copy constructor elision]'
  '-fno-elide-type[do not elide types when printing diagnostics]'
  '-fno-eliminate-unused-debug-types[emit  debug info for defined but unused types]'
  '-fno-exceptions[disable support for exception handling]'
  '-fno-experimental-relative-c[++-abi-vtables]'
  '-fno-experimental-sanitize-metadata[disable emitting metadata for binary analysis sanitizers]'
  '-fno-file-reproducible[use the hosts platform-specific path separator character when expanding the __FILE__ macro]'
  '-fno-fine-grained-bitfield-accesses[use large-integer access for consecutive bitfield runs.]'
  '-fno-finite-loops[do not assume that any loop is finite.]'
  '-fno-fixed-point[disable fixed point types]'
  '-fno-force-enable-int128[disable support for int128_t type]'
  '-fno-generic-block-helpers[dont use generic block helpers for copying/destroying blocks]'
  '-fno-global-isel[disables the global instruction selector]'
  '-fno-gnu-inline-asm[disable GNU style inline asm]'
  '-fno-gpu-allow-device-init[dont allow device side init function in HIP (experimental)]'
  '-fno-gpu-defer-diag[dont defer host/device related diagnostic messages for CUDA/HIP]'
  '-fno-hip-emit-relocatable[do not override toolchain to compile HIP source to relocatable]'
  '-fno-hip-fp32-correctly-rounded-divide-sqrt[dont specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)]'
  '-fno-hip-kernel-arg-name[dont specify that kernel argument names are preserved (HIP only)]'
  '-fno-hip-new-launch-api[t use new kernel launching API for HIP]'
  '-fno-in-descriptor-block-flags[dont emit in-descriptor block flags]'
  '-fno-integrated-as[disable the integrated assembler]'
  '-fno-integrated-cc1[spawn a separate process for each cc1]'
  '-fno-integrated-objemitter[use external machine object code emitter.]'
  '-fno-jump-tables[do not use jump tables for lowering switches]'
  '-fno-keep-persistent-storage-variables[disable keeping all variables that have a persistent storage duration, including global, static and thread-local variables, to guarantee that they can be directly addressed]'
  '-fno-keep-static-consts[t keep static const variables even if unused]'
  '-fno-knr-functions[disable support for K&R C function declarations]'
  '-fno-lto[disable LTO mode (default)]'
  '-fno-memory-profile[disable heap memory profiling]'
  '-fno-merge-all-constants[disallow merging of constants]'
  '-fno-modules-check-relocated[<value>]'
  '-fno-modules-prune-non-affecting-module-map-files[do not prune non-affecting module map files when writing module files]'
  '-fno-new-infallible[disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.]'
  '-fno-objc-infer-related-result-type[do not infer Objective-C related result type based on method family]'
  '-fno-offload-lto[disable LTO mode (default) for offload compilation]'
  '-fno-openmp-extensions[disable all Clang extensions for OpenMP directives and clauses]'
  '-fno-operator-names[do not treat C++ operator name keywords as synonyms for operators]'
  '-fno-optimize-sibling-calls[disable tail call optimization, keeping the call stack accurate]'
  '-fno-pch-codegen[do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH]'
  '-fno-pch-debuginfo[do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere]'
  '-fno-plt[use GOT indirection instead of PLT to make external function calls (x86 only)]'
  '-fno-preserve-as-comments[do not preserve comments in inline assembly]'
  '-fno-profile-generate[disable generation of profile instrumentation.]'
  '-fno-profile-instr-generate[disable generation of profile instrumentation.]'
  '-fno-profile-instr-use[disable using instrumentation data for profile-guided optimization]'
  '-fno-pseudo-probe-for-profiling[do not emit pseudo probes for sample profiling]'
  '-fno-ptrauth-abi-version[disable Pointer Authentication ABI versioning]'
  '-fno-ptrauth-kernel-abi-version[disable Pointer Authentication kernel ABI versioning]'
  '-fno-register-global-dtors-with-atexit[dont use atexit or __cxa_atexit to register global destructors]'
  '-fno-rtlib-add-rpath[do not add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, do not add -rpath with HIP runtime library directory to the linker flags]'
  '-fno-rtti-data[disable generation of RTTI data]'
  '-fno-rtti[disable generation of rtti information]'
  '-fno-sanitize-address-globals-dead-stripping[disable linker dead stripping of globals in AddressSanitizer]'
  '-fno-sanitize-address-outline-instrumentation[use default code inlining logic for the address sanitizer]'
  '-fno-sanitize-address-poison-custom-array-cookie[disable poisoning array cookies when using custom operator new\[\] in AddressSanitizer]'
  '-fno-sanitize-address-use-after-scope[disable use-after-scope detection in AddressSanitizer]'
  '-fno-sanitize-address-use-odr-indicator[disable ODR indicator globals]'
  '-fno-sanitize-cfi-canonical-jump-tables[do not make the jump table addresses canonical in the symbol table]'
  '-fno-sanitize-cfi-cross-dso[disable control flow integrity (CFI) checks for cross-DSO calls.]'
  '-fno-sanitize-coverage[disable features of coverage instrumentation for Sanitizers]'
  '-fno-sanitize-hwaddress-experimental-aliasing[disable aliasing mode in HWAddressSanitizer]'
  '-fno-sanitize-ignorelist[dont use ignorelist file for sanitizers]'
  '-fno-sanitize-memory-param-retval[disable detection of uninitialized parameters and return values]'
  '-fno-sanitize-memory-track-origins[disable origins tracking in MemorySanitizer]'
  '-fno-sanitize-memory-use-after-dtor[disable use-after-destroy detection in MemorySanitizer]'
  '-fno-sanitize-recover[disable recovery for specified sanitizers]'
  '-fno-sanitize-stable-abi[conventional ABI instrumentation for sanitizer runtime. Default: Conventional]'
  '-fno-sanitize-stats[disable sanitizer statistics gathering.]'
  '-fno-sanitize-thread-atomics[disable atomic operations instrumentation in ThreadSanitizer]'
  '-fno-sanitize-thread-func-entry-exit[disable function entry/exit instrumentation in ThreadSanitizer]'
  '-fno-sanitize-thread-memory-access[disable memory access instrumentation in ThreadSanitizer]'
  '-fno-sanitize-trap[disable trapping for specified sanitizers]'
  '-fno-sanitize-trap[disable trapping for all sanitizers]'
  '-fno-short-wchar[force wchar_t to be an unsigned int]'
  '-fno-show-column[do not include column number on diagnostics]'
  '-fno-show-source-location[do not include source location information with diagnostics]'
  '-fno-signed-char[char is unsigned]'
  '-fno-signed-zeros[allow optimizations that ignore the sign of floating point zeros]'
  '-fno-spell-checking[disable spell-checking]'
  '-fno-split-machine-functions[disable late function splitting using profile information (x86 ELF)]'
  '-fno-split-stack[wouldnt use segmented stack]'
  '-fno-stack-check[disable stack checking]'
  '-fno-stack-clash-protection[disable stack clash protection]'
  '-fno-stack-protector[disable the use of stack protectors]'
  '-fno-standalone-debug[limit debug information produced to reduce size of debug binary]'
  '-fno-strict-float-cast-overflow[relax language rules and try to match the behavior of the targets native float-to-int conversion instructions]'
  '-fno-strict-return[dont treat control flow paths that fall off the end of a non-void function as unreachable]'
  '-fno-sycl[disables SYCL kernels compilation for device]'
  '-fno-temp-file[directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes]'
  '-fno-threadsafe-statics[not emit code to make initialization of local statics thread safe]'
  '-fno-trap-function-returns[the trap function specified by -ftrap-function never returns]'
  '-fno-trigraphs[do not process trigraph sequences]'
  '-fno-typed-cxx-delete[disable use of typed variants of C++ delete()]'
  '-fno-typed-cxx-new-delete[disable use of typed variants of C++ new() and delete()]'
  '-fno-typed-memory-operations-experimental[disable Typed Memory Operations call site rewriting]'
  '-fno-unified-lto[use distinct LTO pipelines]'
  '-fno-unique-section-names[dont use unique names for text and data sections]'
  '-fno-unroll-loops[turn off loop unroller]'
  '-fno-use-cxa-atexit[dont use __cxa_atexit for calling destructors]'
  '-fno-use-init-array[use .ctors/.dtors instead of .init_array/.fini_array]'
  '-fno-visibility-inlines-hidden-static-local-var[disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)]'
  '-fno-xray-function-index[omit function index section at the expense of single-function patching performance]'
  '-fno-zero-initialized-in-bss[dont place zero initialized data in BSS]'
  '-fobjc-arc-exceptions[use EH-safe code when synthesizing retains and releases in -fobjc-arc]'
  '-fobjc-arc[synthesize retain and release calls for Objective-C pointers]'
  '-fobjc-disable-direct-methods-for-testing[ignore attribute objc_direct so that direct methods can be tested]'
  '-fobjc-encode-cxx-class-template-spec[fully encode c++ class template specialization]'
  '-fobjc-exceptions[enable Objective-C exceptions]'
  '-fobjc-relative-method-lists[enable relative method lists]'
  '-fobjc-runtime[specify the target Objective-C runtime kind and version]'
  '-fobjc-weak[enable ARC-style weak references in Objective-C]'
  '-foffload-lto[set LTO mode for offload compilation]'
  '-foffload-lto[enable LTO in full mode for offload compilation]'
  '-fomit-frame-pointer[omit the frame pointer from functions that dont need it. Some stack unwinding cases, such as profilers and sanitizers, may prefer specifying -fno-omit-frame-pointer. On many targets, -O1 and higher omit the frame pointer by default. -m\[no-\]omit-leaf-frame-pointer takes precedence for leaf functions]'
  '-fopenmp-extensions[enable all Clang extensions for OpenMP directives and clauses]'
  '-fopenmp-offload-mandatory[do not create a host fallback if offloading to the device fails.]'
  '-fopenmp-simd[emit OpenMP code only for SIMD-based constructs.]'
  '-fopenmp-target-debug[enable debugging in the OpenMP offloading device RTL]'
  '-fopenmp-target-jit[emit code that can be JIT compiled for OpenMP offloading. Implies -foffload-lto=full]'
  '-fopenmp-targets[specify comma-separated list of triples OpenMP offloading targets to be supported]'
  '-fopenmp-version[set OpenMP version (e.g. 45 for OpenMP 4.5, 50 for OpenMP 5.0). Default value is 50 for Clang and 11 for Flang]'
  '-fopenmp[parse OpenMP pragmas and generate parallel code.]'
  '-foperator-arrow-depth[maximum number of operator->s to call for a member access]'
  '-foptimization-record-file[specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.]'
  '-foptimization-record-passes[only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)]'
  '-forder-file-instrumentation[generate instrumented code to collect order file into default.profraw file (overridden by = form of option or LLVM_PROFILE_FILE env var)]'
  '-fpack-struct[specify the default maximum struct packing alignment]'
  '-fpascal-strings[recognize and construct Pascal-style string literals]'
  '-fpass-plugin[load pass plugin from a dynamic shared object file (only with new pass manager).]'
  '-fpatchable-function-entry[M>]'
  '-fpcc-struct-return[override the default ABI to return all structs on the stack]'
  '-fpch-codegen[generate code for uses of this PCH that assumes an explicit object file will be built for the PCH]'
  '-fpch-debuginfo[generate debug info for types in an object file built from this PCH and do not generate them elsewhere]'
  '-fpch-instantiate-templates[instantiate templates already while building a PCH]'
  '-fpch-validate-input-files-content[validate PCH input files based on content if mtime differs]'
  '-fplugin-arg-[<name>-<arg>]'
  '-fplugin[load the named plugin (dynamic shared object)]'
  '-fprebuilt-implicit-modules[look up implicit modules in the prebuilt module path]'
  '-fprebuilt-module-path[specify the prebuilt module path]'
  '-fproc-stat-report[save subprocess statistics to the given file]'
  '-fproc-stat-report[<value>]'
  '-fprofile-arcs[instrument code to produce gcov data files (*.gcda)]'
  '-fprofile-exclude-files[instrument only functions from files where names dont match all the regexes separated by a semi-colon]'
  '-fprofile-filter-files[instrument only functions from files where names match any regex separated by a semi-colon]'
  '-fprofile-function-groups[partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group]'
  '-fprofile-generate[generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-generate[generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-generate[generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-generate[generate instrumented code to collect execution counts into default.profraw file (overridden by = form of option or LLVM_PROFILE_FILE env var)]'
  '-fprofile-instr-use[use instrumentation data for profile-guided optimization]'
  '-fprofile-list[filename defining the list of functions/files to instrument. The file uses the sanitizer special case list format.]'
  '-fprofile-remapping-file[use the remappings described in <file> to match the profile data against names in the program]'
  '-fprofile-sample-accurate[specifies that the sample profile is accurate]'
  '-fprofile-sample-use[enable sample-based profile guided optimizations]'
  '-fprofile-selected-function-group[partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive]'
  '-fprofile-update[set update method of profile counters]'
  '-fprofile-use[use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.]'
  '-fprotect-parens[determines whether the optimizer honors parentheses when floating-point expressions are evaluated]'
  '-fpseudo-probe-for-profiling[emit pseudo probes for sample profiling]'
  '-fptrauth-abi-version[pointer Authentication ABI version]'
  '-fptrauth-auth-traps[enable traps on authentication failures]'
  '-fptrauth-block-descriptor-pointers[enable signing block descriptors]'
  '-fptrauth-calls[enable signing and authentication of all indirect calls]'
  '-fptrauth-function-pointer-type-discrimination[enabling type discrimination on C function pointers]'
  '-fptrauth-indirect-gotos[enable signing and authentication of indirect goto targets]'
  '-fptrauth-intrinsics[enable pointer-authentication intrinsics]'
  '-fptrauth-kernel-abi-version[enable Pointer Authentication kernel ABI version]'
  '-fptrauth-objc-class-ro[signing and authentication for ObjC class_ro pointers]'
  '-fptrauth-objc-interface-sel[enable signing and authentication of Objective-C objects SEL fields]'
  '-fptrauth-objc-isa-masking[pre- and post-authentication masking mode of objective-c isa pointers]'
  '-fptrauth-objc-isa-mode[authentication mode for ObjC isa field. Full auth if unspecified]'
  '-fptrauth-objc-isa[enable signing and authentication of Objective-C objects isa field]'
  '-fptrauth-returns[enable signing and authentication of return addresses]'
  '-fptrauth-soft[enable software lowering of pointer authentication]'
  '-fptrauth-type-info-discriminated-vtable-pointer[enable type and address discrimination of vtable pointer of std::type_info]'
  '-fptrauth-vtable-pointer-address-discrimination[enable address discrimination of vtable pointers]'
  '-fptrauth-vtable-pointer-type-discrimination[enable type discrimination of vtable pointers]'
  '-frandomize-layout-seed-file[file holding the seed used by the randomize structure layout feature]'
  '-frandomize-layout-seed[the seed used by the randomize structure layout feature]'
  '-freciprocal-math[allow division operations to be reassociated]'
  '-freg-struct-return[override the default ABI to return small structs in registers]'
  '-fregister-global-dtors-with-atexit[use atexit or __cxa_atexit to register global destructors]'
  '-frelaxed-template-template-args[enable C++17 relaxed template template argument matching]'
  '-freroll-loops[turn on loop reroller]'
  '-fropi[generate read-only position independent code (ARM only)]'
  '-frtlib-add-rpath[add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, also add -rpath with HIP runtime library directory to the linker flags]'
  '-frwpi[generate read-write position independent code (ARM only)]'
  '-fsafe-buffer-usage-suggestions[display suggestions to update code associated with -Wunsafe-buffer-usage warnings]'
  '-fsample-profile-use-profi[use profi to infer block and edge counts]'
  '-fsanitize-address-destructor[set the kind of module destructors emitted by AddressSanitizer instrumentation. These destructors are emitted to unregister instrumented global variables when code is unloaded (e.g. via `dlclose()`).]'
  '-fsanitize-address-field-padding[level of field padding for AddressSanitizer]'
  '-fsanitize-address-globals-dead-stripping[enable linker dead stripping of globals in AddressSanitizer]'
  '-fsanitize-address-outline-instrumentation[always generate function calls for address sanitizer instrumentation]'
  '-fsanitize-address-poison-custom-array-cookie[enable poisoning array cookies when using custom operator new\[\] in AddressSanitizer]'
  '-fsanitize-address-use-after-return[select the mode of detecting stack use-after-return in AddressSanitizer]'
  '-fsanitize-address-use-after-scope[enable use-after-scope detection in AddressSanitizer]'
  '-fsanitize-address-use-odr-indicator[enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size]'
  '-fsanitize-blacklist[alias for -fsanitize-ignorelist]'
  '-fsanitize-cfi-canonical-jump-tables[make the jump table addresses canonical in the symbol table]'
  '-fsanitize-cfi-cross-dso[enable control flow integrity (CFI) checks for cross-DSO calls.]'
  '-fsanitize-cfi-icall-experimental-normalize-integers[normalize integers in CFI indirect call type signature checks]'
  '-fsanitize-cfi-icall-generalize-pointers[generalize pointers in CFI indirect call type signature checks]'
  '-fsanitize-coverage-allowlist[restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones]'
  '-fsanitize-coverage-ignorelist[disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones]'
  '-fsanitize-coverage[specify the type of coverage instrumentation for Sanitizers]'
  '-fsanitize-hwaddress-abi[select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.]'
  '-fsanitize-hwaddress-experimental-aliasing[enable aliasing mode in HWAddressSanitizer]'
  '-fsanitize-ignorelist[path to ignorelist file for sanitizers]'
  '-fsanitize-memory-param-retval[enable detection of uninitialized parameters and return values]'
  '-fsanitize-memory-track-origins[enable origins tracking in MemorySanitizer]'
  '-fsanitize-memory-track-origins[enable origins tracking in MemorySanitizer]'
  '-fsanitize-memory-use-after-dtor[enable use-after-destroy detection in MemorySanitizer]'
  '-fsanitize-memtag-mode[set default MTE mode to sync (default) or async]'
  '-fsanitize-recover[enable recovery for specified sanitizers]'
  '-fsanitize-stable-abi[stable  ABI instrumentation for sanitizer runtime. Default: Conventional]'
  '-fsanitize-stats[enable sanitizer statistics gathering.]'
  '-fsanitize-system-ignorelist[path to system ignorelist file for sanitizers]'
  '-fsanitize-thread-atomics[enable atomic operations instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-thread-func-entry-exit[enable function entry/exit instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-thread-memory-access[enable memory access instrumentation in ThreadSanitizer (default)]'
  '-fsanitize-trap[enable trapping for specified sanitizers]'
  '-fsanitize-trap[enable trapping for all sanitizers]'
  '-fsanitize-undefined-strip-path-components[strip (or keep only, if negative) a given number of path components when emitting check metadata.]'
  '-fsanitize[turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks]'
  '-fsave-optimization-record[generate an optimization record file in a specific format]'
  '-fsave-optimization-record[generate a YAML optimization record file]'
  '-fseh-exceptions[use SEH style exceptions]'
  '-fshort-enums[allocate to an enum type only as many bytes as it needs for the declared range of possible values]'
  '-fshort-wchar[force wchar_t to be a short unsigned int]'
  '-fshow-overloads[which overload candidates to show when overload resolution fails. Defaults to all]'
  '-fshow-skipped-includes[skipped includes in -H output.]'
  '-fsigned-char[char is signed]'
  '-fsized-deallocation[enable C++14 sized global deallocation functions]'
  '-fsjlj-exceptions[use SjLj style exceptions]'
  '-fslp-vectorize[enable the superword-level parallelism vectorization passes]'
  '-fsmall-block-descriptors[enable small block descriptors]'
  '-fspell-checking-limit[set the maximum number of times to perform spell checking on unrecognized identifiers (0 = no limit)]'
  '-fsplit-dwarf-inlining[provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF]'
  '-fsplit-lto-unit[enables splitting of the LTO unit]'
  '-fsplit-machine-functions[enable late function splitting using profile information (x86 ELF)]'
  '-fsplit-stack[use segmented stack]'
  '-fstack-check[enable stack checking]'
  '-fstack-clash-protection[enable stack clash protection]'
  '-fstack-protector-all[enable stack protectors for all functions]'
  '-fstack-protector-strong[enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable]'
  '-fstack-protector[enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the functions return address. The reference stack guard value is stored in a global variable.]'
  '-fstack-size-section[emit section containing metadata on function stack sizes]'
  '-fstack-usage[emit .su file containing information on function stack sizes]'
  '-fstandalone-debug[emit full debug info for all types used by the program]'
  '-fstrict-enums[enable optimizations based on the strict definition of an enums value range]'
  '-fstrict-flex-arrays[enable optimizations based on the strict definition of flexible arrays]'
  '-fstrict-float-cast-overflow[assume that overflowing float-to-int casts are undefined (default)]'
  '-fstrict-vtable-pointers[enable optimizations based on the strict rules for overwriting polymorphic C++ objects]'
  '-fsuppress-conflicting-types[ignore errors from conflicting types in function declarations]'
  '-fswift-async-fp[control emission of Swift async extended frame info]'
  '-fsycl[enables SYCL kernels compilation for device]'
  '-fsyntax-only[run the preprocessor, parser and semantic analysis stages]'
  '-fsystem-module[build this module as a system module. Only used with -emit-module]'
  '-ftarget-variant-availability-checks[enable availability checks for the target variant platform]'
  '-ftemplate-backtrace-limit[set the maximum number of entries to print in a template instantiation backtrace (0 = no limit)]'
  '-ftemplate-depth[set the maximum depth of recursive template instantiation]'
  '-ftest-coverage[produce gcov notes files (*.gcno)]'
  '-fthin-link-bitcode[write minimized bitcode to <file> for the ThinLTO thin link only]'
  '-fthinlto-index[perform ThinLTO importing using provided function summary index]'
  '-ftime-report[(For new pass manager) per-pass: one report for each pass; per-pass-run: one report for each pass invocation]'
  '-ftime-trace-granularity[minimum time granularity (in microseconds) traced by time profiler]'
  '-ftime-trace[similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file]'
  '-ftime-trace[turn on time profiler. Generates JSON file based on output filename.]'
  '-ftrap-function-returns[trap function specified by -ftrap-function may return normally]'
  '-ftrap-function[issue call to specified function rather than a trap instruction]'
  '-ftrapv-handler[name>]'
  '-ftrapv[trap on integer overflow]'
  '-ftrigraphs[process trigraph sequences]'
  '-ftrivial-auto-var-init-skip-cpp-obj[do not auto-initialize objects initialized by a C++ constructor]'
  '-ftrivial-auto-var-init-skip-non-pod[do not auto-initialize non-POD objects]'
  '-ftrivial-auto-var-init-skip-non-ptr-array[do not auto-initialize arrays other than arrays of pointers]'
  '-ftrivial-auto-var-init-skip-stl[do not auto-initialize variables in STL namespace]'
  '-ftrivial-auto-var-init-stop-after[stop initializing trivial automatic stack variables after the specified number of instances]'
  '-ftrivial-auto-var-init[initialize trivial automatic stack variables. Defaults to uninitialized]'
  '-ftrivial-auto-var-zero-init-max-size[zero initialize only first N bytes of each stack variable; 0 value turns off the limit.]'
  '-ftyped-cxx-delete[enable use of typed variants of C++ delete()]'
  '-ftyped-cxx-new-delete[enable use of typed variants of C++ new() and delete()]'
  '-ftyped-memory-operations-experimental[enable Typed Memory Operations call site rewriting]'
  '-funified-lto[use the unified LTO pipeline]'
  '-funique-basic-block-section-names[use unique names for basic block sections (ELF Only)]'
  '-funique-internal-linkage-names[uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path]'
  '-funroll-loops[turn on loop unroller]'
  '-funsafe-math-optimizations[allow unsafe floating-point math optimizations which may decrease precision]'
  '-fuse-cuid[method to generate IDs for compilation units for single source offloading languages CUDA and HIP: hash (IDs generated by hashing file path and command line options) | random (IDs generated as random numbers) | none (disabled). Default is hash. This option will be overridden by option -cuid=\[ID\] if it is specified.]'
  '-fuse-line-directives[use #line in preprocessed output]'
  '-fvalidate-ast-input-files-content[compute and store the hash of input files used to build an AST. Files with mismatching mtimes are considered valid if both contents is identical]'
  '-fveclib[use the given vector functions library]'
  '-fvectorize[enable the loop vectorization passes]'
  '-fverbose-asm[generate verbose assembly output]'
  '-fvirtual-function-elimination[enables dead virtual function elimination optimization. Requires -flto=full]'
  '-fvisibility-dllexport[the visibility for dllexport definitions \[-fvisibility-from-dllstorageclass\]]'
  '-fvisibility-externs-dllimport[the visibility for dllimport external declarations \[-fvisibility-from-dllstorageclass\]]'
  '-fvisibility-externs-nodllstorageclass[the visibility for external declarations without an explicit DLL dllstorageclass \[-fvisibility-from-dllstorageclass\]]'
  '-fvisibility-from-dllstorageclass[set the visibility of symbols in the generated code from their DLL storage class]'
  '-fvisibility-global-new-delete-hidden[give global C++ operator new and delete declarations hidden visibility]'
  '-fvisibility-inlines-hidden-static-local-var[when -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default]'
  '-fvisibility-inlines-hidden[give inline C++ member functions hidden visibility by default]'
  '-fvisibility-ms-compat[give global types default visibility and global functions and variables hidden visibility by default]'
  '-fvisibility-nodllstorageclass[the visibility for definitions without an explicit DLL export class \[-fvisibility-from-dllstorageclass\]]'
  '-fvisibility[set the default symbol visibility for all global definitions]'
  '-fwasm-exceptions[use WebAssembly style exceptions]'
  '-fwhole-program-vtables[whole-program vtable optimization. Requires -flto]'
  '-fwrapv[treat signed integer overflow as twos complement]'
  '-fwritable-strings[store string literals as writable data]'
  '-fxl-pragma-pack[enable IBM XL #pragma pack handling]'
  '-fxray-always-emit-customevents[always emit __xray_customevent(...) calls even if the containing function is not always instrumented]'
  '-fxray-always-emit-typedevents[always emit __xray_typedevent(...) calls even if the containing function is not always instrumented]'
  '-fxray-always-instrument[DEPRECATED: Filename defining the whitelist for imbuing the always instrument XRay attribute.]'
  '-fxray-attr-list[filename defining the list of functions/types for imbuing XRay attributes.]'
  '-fxray-function-groups[only instrument 1 of N groups]'
  '-fxray-ignore-loops[dont instrument functions with loops unless they also meet the minimum function size]'
  '-fxray-instruction-threshold[sets the minimum function size to instrument with XRay]'
  '-fxray-instrumentation-bundle[select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is all.  function includes both function-entry and function-exit.]'
  '-fxray-instrument[generate XRay instrumentation sleds on function entry and exit]'
  '-fxray-link-deps[link XRay runtime library when -fxray-instrument is specified (default)]'
  '-fxray-modes[list of modes to link in by default into XRay instrumented binaries.]'
  '-fxray-never-instrument[DEPRECATED: Filename defining the whitelist for imbuing the never instrument XRay attribute.]'
  '-fxray-selected-function-group[when using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1]'
  '-fzero-call-used-regs[clear call-used registers upon function return (AArch64/x86 only)]'
  '-fzvector[enable System z vector language extension]'
  '-F[add directory to framework include search path]'
  '--gcc-install-dir[use GCC installation in the specified directory. The directory ends with path components like lib{,32,64}/gcc{,-cross}/$triple/$version. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation]'
  '--gcc-toolchain[specify a directory where Clang can find include and lib{,32,64}/gcc{,-cross}/$triple/$version. Clang will use the GCC installation with the largest version]'
  '-gcodeview-command-line[compiler path and command line into CodeView debug information]'
  '-gcodeview-ghash[emit type record hashes in a .debug$H section]'
  '-gcodeview[generate CodeView debug information]'
  '-gdwarf-2[generate source-level debug information with dwarf version 2]'
  '-gdwarf-3[generate source-level debug information with dwarf version 3]'
  '-gdwarf-4[generate source-level debug information with dwarf version 4]'
  '-gdwarf-5[generate source-level debug information with dwarf version 5]'
  '-gdwarf32[enables DWARF32 format for ELF binaries, if debug information emission is enabled.]'
  '-gdwarf64[enables DWARF64 format for ELF binaries, if debug information emission is enabled.]'
  '-gdwarf[generate source-level debug information with the default dwarf version]'
  '-gembed-source[embed source text in DWARF debug sections]'
  '-gen-reproducer[emit reproducer on (option: off, crash (default), error, always)]'
  '-gline-directives-only[emit debug line info directives only]'
  '-gline-tables-only[emit debug line number tables only]'
  '-gmodules[generate debug info with external references to clang modules or precompiled headers]'
  '-gno-codeview-command-line[dont emit compiler path and command line into CodeView debug information]'
  '-gno-embed-source[restore the default behavior of not embedding source text in DWARF debug sections]'
  '-gno-inline-line-tables[t emit inline line tables.]'
  '--gpu-bundle-output[bundle output files of HIP device compilation]'
  '--gpu-instrument-lib[instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit]'
  '--gpu-max-threads-per-block[default max threads per block for kernel launch bounds for HIP]'
  '-greproducible[tune debug info to be reproducible.]'
  '-gsplit-dwarf[set DWARF fission mode]'
  '-gstrict-dwarf[restrict DWARF features to those defined in the specified version, avoiding features from later versions.]'
  '-gz[DWARF debug sections compression type]'
  '-G[put objects of at most <size> bytes into small data section (MIPS / Hexagon)]'
  '-g[generate source-level debug information]'
  '--help-hidden[display help for hidden options]'
  '-help[display available options]'
  '--hip-device-lib[HIP device library]'
  '--hip-link[link clang-offload-bundler bundles for HIP]'
  '--hip-path[HIP runtime installation path, used for finding HIP version and adding HIP include path.]'
  '--hip-version[HIP version in the format of major.minor.patch]'
  '--hipspv-pass-plugin[path to a pass plugin for HIP to SPIR-V passes.]'
  '-H[show header includes and nesting depth]'
  '-I-[restrict all prior -I flags to double-quoted inclusion and remove current directory from include path]'
  '-iapinotes-modules[add directory to the API notes search path referenced by module name]'
  '-iapinotes-path[include API notes file]'
  '-ibuiltininc[enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it]'
  '-idirafter[add directory to AFTER include search path]'
  '-iframeworkwithsysroot[add directory to SYSTEM framework search path, absolute paths are relative to -isysroot]'
  '-iframework[add directory to SYSTEM framework search path]'
  '-imacros[include macros from file before parsing]'
  '-include-pch[include precompiled header file]'
  '-include[include file before parsing]'
  '-index-header-map[make the next included directory (-I or -F) an indexer header map]'
  '-index-ignore-macros[ignore macros during indexing]'
  '-index-ignore-pcms[ignore symbols from imported pcm modules]'
  '-index-ignore-system-symbols[ignore symbols from system headers]'
  '-index-record-codegen-name[record the codegen name for symbols]'
  '-index-store-path[enable indexing with the specified data store path]'
  '-index-unit-output-path[use <path> as the output path for this compilation unit in the index unit file]'
  '-iprefix[set the -iwithprefix/-iwithprefixbefore prefix]'
  '-iquote[add directory to QUOTE include search path]'
  '-isysroot[set the system root directory (usually /)]'
  '-isystem-after[add directory to end of the SYSTEM include search path]'
  '-isystem[add directory to SYSTEM include search path]'
  '-ivfsoverlay[overlay the virtual filesystem described by file over the real file system]'
  '-ivfsstatcache[use the stat data cached in file instead of doing filesystem syscalls. See clang-stat-cache utility.]'
  '-iwithprefixbefore[set directory to include search path with prefix]'
  '-iwithprefix[set directory to SYSTEM include search path with prefix]'
  '-iwithsysroot[add directory to SYSTEM include search path, absolute paths are relative to -isysroot]'
  '-I[add directory to the end of the list of include search paths]'
  '--libomptarget-amdgcn-bc-path[path to libomptarget-amdgcn bitcode library]'
  '--libomptarget-amdgpu-bc-path[path to libomptarget-amdgcn bitcode library]'
  '--libomptarget-nvptx-bc-path[path to libomptarget-nvptx bitcode library]'
  '-L[add directory to library search path]'
  '-mabi[enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.]'
  '-mabicalls[enable SVR4-style position-independent code (Mips only)]'
  '-maix-struct-return[return all structs in memory (PPC32 only)]'
  '-malign-branch-boundary[specify the boundarys size to align branches]'
  '-malign-branch[specify types of branches to align]'
  '-malign-double[align doubles to two words in structs (x86 only)]'
  '-maltivec[enable AltiVec vector initializer syntax]'
  '-mamdgpu-ieee[sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)]'
  '-march[for a list of available architectures for the target use -mcpu=help]'
  '-mbackchain[link stack frames through backchain on System Z]'
  '-mbranch-protection[enforce targets of indirect branches and function returns]'
  '-mbranches-within-32B-boundaries[align selected branches (fused, jcc, jmp) within 32-byte boundary]'
  '-mcabac[enable CABAC instructions]'
  '-mcmodel[equivalent to -mcmodel=medium, compatible with RISC-V gcc.]'
  '-mcmodel[equivalent to -mcmodel=small, compatible with RISC-V gcc.]'
  '-mcmse[allow use of CMSE (Armv8-M Security Extensions)]'
  '-mcode-object-version[specify code object ABI version. Defaults to 4. (AMDGPU only)]'
  '-mcpu[for a list of available CPUs for the target use -mcpu=help]'
  '-mcrbits[control the CR-bit tracking feature on PowerPC. ``-mcrbits`` (the enablement of CR-bit tracking support) is the default for POWER8 and above, as well as for all other CPUs when optimization is applied (-O2 and above).]'
  '-mcrc[allow use of CRC instructions (ARM/Mips only)]'
  '-mcumode[specify CU wavefront execution mode (AMDGPU only)]'
  '-mdefault-visibility-export-mapping[mapping between default visibility and export]'
  '-mdouble[force double to be <n> bits]'
  '-MD[write a depfile containing user and system headers]'
  '-meabi[set EABI type. Default depends on triple)]'
  '-membedded-data[place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)]'
  '-menable-experimental-extensions[enable use of experimental RISC-V extensions.]'
  '-mexec-model[execution model (WebAssembly only)]'
  '-mexecute-only[disallow generation of data access to code sections (ARM only)]'
  '-mextern-sdata[assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)]'
  '-mfentry[insert calls to fentry at function entry (x86/SystemZ only)]'
  '-mfix-cmse-cve-2021-35465[work around VLLDM erratum CVE-2021-35465 (ARM only)]'
  '-mfix-cortex-a53-835769[cortex-A53 erratum 835769 (AArch64 only)]'
  '-mfix-cortex-a57-aes-1742098[work around Cortex-A57 Erratum 1742098 (ARM only)]'
  '-mfix-cortex-a72-aes-1655431[work around Cortex-A72 Erratum 1655431 (ARM only)]'
  '-mfp32[use 32-bit floating point registers (MIPS only)]'
  '-mfp64[use 64-bit floating point registers (MIPS only)]'
  '-mframe-chain[select the frame chain model used to emit frame records (Arm only).]'
  '-mfunction-return[replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)]'
  '-MF[write depfile output from -MMD, -MD, -MM, or -M to <file>]'
  '-mgeneral-regs-only[generate code which only uses the general purpose registers (AArch64/x86 only)]'
  '-mglobal-merge[enable merging of globals]'
  '-mgpopt[use GP relative accesses for symbols known to be in a small data section (MIPS)]'
  '-mguard[enable or disable Control Flow Guard checks and guard tables emission]'
  '-MG[add missing headers to depfile]'
  '-mharden-sls[select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)]'
  '-mhvx-ieee-fp[enable Hexagon HVX IEEE floating-point]'
  '-mhvx-length[set Hexagon Vector Length]'
  '-mhvx-qfloat[enable Hexagon HVX QFloat instructions]'
  '-mhvx[enable Hexagon Vector eXtensions]'
  '-mhvx[enable Hexagon Vector eXtensions]'
  '-miamcu[use Intel MCU ABI]'
  '-mignore-xcoff-visibility[not emit the visibility attribute for asm in AIX OS or give all symbols unspecified visibility in XCOFF object file]'
  '--migrate[run the migrator]'
  '-mincremental-linker-compatible[(integrated-as) Emit an object file which can be used with an incremental linker]'
  '-mindirect-branch-cs-prefix[add cs prefix to call and jmp to indirect thunk]'
  '-mindirect-jump[change indirect jump instructions to inhibit speculation]'
  '-mios-version-min[set iOS deployment target]'
  '-MJ[write a compilation database entry per input]'
  '-mllvm[alias for -mllvm]'
  '-mllvm[additional arguments to forward to LLVMs option processing]'
  '-mlocal-sdata[extend the -G behaviour to object local data (MIPS)]'
  '-mlong-calls[generate branches with extended addressability, usually via indirect jumps.]'
  '-mlong-double-128[force long double to be 128 bits]'
  '-mlong-double-64[force long double to be 64 bits]'
  '-mlong-double-80[force long double to be 80 bits, padded to 128 bits for storage]'
  '-mlvi-cfi[enable only control-flow mitigations for Load Value Injection (LVI)]'
  '-mlvi-hardening[enable all mitigations for Load Value Injection (LVI)]'
  '-mmacos-version-min[set macOS deployment target]'
  '-mmadd4[enable the generation of 4-operand madd.s, madd.d and related instructions.]'
  '-mmark-bti-property[add .note.gnu.property with BTI to assembly files (AArch64 only)]'
  '-MMD[write a depfile containing user headers]'
  '-mmemops[enable generation of memop instructions]'
  '-mmlir[additional arguments to forward to MLIRs option processing]'
  '-mms-bitfields[set the default structure layout to be compatible with the Microsoft compiler standard]'
  '-mmsa[enable MSA ASE (MIPS only)]'
  '-mmt[enable MT ASE (MIPS only)]'
  '-MM[like -MMD, but also implies -E and writes to stdout by default]'
  '-mno-abicalls[disable SVR4-style position-independent code (Mips only)]'
  '-mno-bti-at-return-twice[do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)]'
  '-mno-crc[disallow use of CRC instructions (Mips only)]'
  '-mno-cumode[specify WGP wavefront execution mode (AMDGPU only)]'
  '-mno-embedded-data[do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)]'
  '-mno-execute-only[allow generation of data access to code sections (ARM only)]'
  '-mno-extern-sdata[do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)]'
  '-mno-fix-cmse-cve-2021-35465[dont work around VLLDM erratum CVE-2021-35465 (ARM only)]'
  '-mno-fix-cortex-a53-835769[dont workaround Cortex-A53 erratum 835769 (AArch64 only)]'
  '-mno-fix-cortex-a57-aes-1742098[dont work around Cortex-A57 Erratum 1742098 (ARM only)]'
  '-mno-fix-cortex-a72-aes-1655431[dont work around Cortex-A72 Erratum 1655431 (ARM only)]'
  '-mno-fmv[disable function multiversioning]'
  '-mno-gather[disable generation of gather instructions in auto-vectorization(x86 only)]'
  '-mno-global-merge[disable merging of globals]'
  '-mno-gpopt[do not use GP relative accesses for symbols known to be in a small data section (MIPS)]'
  '-mno-hvx-ieee-fp[disable Hexagon HVX IEEE floating-point]'
  '-mno-hvx-qfloat[disable Hexagon HVX QFloat instructions]'
  '-mno-hvx[disable Hexagon Vector eXtensions]'
  '-mno-implicit-float[dont generate implicit floating point or vector instructions]'
  '-mno-implicit-sme[dont generate implicit SME instructions or mode switches]'
  '-mno-incremental-linker-compatible[(integrated-as) Emit an object file which cannot be used with an incremental linker]'
  '-mno-local-sdata[do not extend the -G behaviour to object local data (MIPS)]'
  '-mno-long-calls[restore the default behaviour of not generating long calls]'
  '-mno-lvi-cfi[disable control-flow mitigations for Load Value Injection (LVI)]'
  '-mno-lvi-hardening[disable mitigations for Load Value Injection (LVI)]'
  '-mno-madd4[disable the generation of 4-operand madd.s, madd.d and related instructions.]'
  '-mno-memops[disable generation of memop instructions]'
  '-mno-movt[disallow use of movt/movw pairs (ARM only)]'
  '-mno-ms-bitfields[do not set the default structure layout to be compatible with the Microsoft compiler standard]'
  '-mno-msa[disable MSA ASE (MIPS only)]'
  '-mno-mt[disable MT ASE (MIPS only)]'
  '-mno-neg-immediates[disallow converting instructions with negative immediates to their negation or inversion.]'
  '-mno-nvj[disable generation of new-value jumps]'
  '-mno-nvs[disable generation of new-value stores]'
  '-mno-outline-atomics[dont generate local calls to out-of-line atomic operations]'
  '-mno-outline[disable function outlining (AArch64 only)]'
  '-mno-packets[disable generation of instruction packets]'
  '-mno-pic-data-is-text-relative[dont assume data segments are relative to text segment]'
  '-mno-relax[disable linker relaxation]'
  '-mno-restrict-it[allow generation of complex IT blocks.]'
  '-mno-save-restore[disable using library calls for save and restore]'
  '-mno-scatter[disable generation of scatter instructions in auto-vectorization(x86 only)]'
  '-mno-seses[disable speculative execution side effect suppression (SESES)]'
  '-mno-stack-arg-probe[disable stack probes which are enabled by default]'
  '-mno-tgsplit[disable threadgroup split execution mode (AMDGPU only)]'
  '-mno-tls-direct-seg-refs[disable direct TLS access through segment registers]'
  '-mno-unaligned-access[force all memory accesses to be aligned (AArch32/AArch64/LoongArch only)]'
  '-mno-wavefrontsize64[specify wavefront size 32 mode (AMDGPU only)]'
  '-mnocrc[disallow use of CRC instructions (ARM only)]'
  '-mnop-mcount[generate mcount/__fentry__ calls as nops. To activate they need to be patched in.]'
  '-mnvj[enable generation of new-value jumps]'
  '-mnvs[enable generation of new-value stores]'
  '-module-dependency-dir[directory to dump module dependencies to]'
  '-module-file-info[provide information about a particular module file]'
  '-momit-leaf-frame-pointer[omit frame pointer setup for leaf functions]'
  '-moutline-atomics[generate local calls to out-of-line atomic operations]'
  '-moutline[enable function outlining (AArch64 only)]'
  '-mpacked-stack[use packed stack layout (SystemZ only).]'
  '-mpackets[enable generation of instruction packets]'
  '-mpad-max-prefix-size[specify maximum number of prefixes to use for padding]'
  '-mpic-data-is-text-relative[assume data segments are relative to text segment]'
  '-mprefer-vector-width[specifies preferred vector width for auto-vectorization. Defaults to none which allows target specific decisions.]'
  '-mprintf-kind[specify the printf lowering scheme (AMDGPU only), allowed values are "hostcall"(printing happens during kernel execution, this scheme relies on hostcalls which require system to support pcie atomics) and "buffered"(printing happens after all kernel threads exit, this uses a printf buffer and does not rely on pcie atomic support)]'
  '-MP[create phony target for each dependency (other than main file)]'
  '-mqdsp6-compat[enable hexagon-qdsp6 backward compatibility]'
  '-MQ[specify name of main file output to quote in depfile]'
  '-mrecip[control use of approximate reciprocal and reciprocal square root instructions followed by <n> iterations of Newton-Raphson refinement. <value> = ( \[!\] \[vec-\] (rcp|sqrt) \[(h|s|d)\] \[:<n>\] ) | all | default | none]'
  '-mrecip[equivalent to -mrecip=all]'
  '-mrecord-mcount[generate a __mcount_loc section entry for each __fentry__ call.]'
  '-mrelax-all[(integrated-as) Relax all machine instructions]'
  '-mrelax[enable linker relaxation]'
  '-mrestrict-it[disallow generation of complex IT blocks. It is off by default.]'
  '-mrtd[make StdCall calling convention the default]'
  '-mrvv-vector-bits[specify the size in bits of an RVV vector register. Defaults to the vector length agnostic value of "scalable". Accepts power of 2 values between 64 and 65536. Also accepts "zvl" to use the value implied by -march/-mcpu. Value will be reflected in __riscv_v_fixed_vlen preprocessor define (RISC-V only)]'
  '-msave-restore[enable using library calls for save and restore]'
  '-mseses[enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations]'
  '-msign-return-address[select return address signing scope]'
  '-mskip-rax-setup[skip setting up RAX register when passing variable arguments (x86 only)]'
  '-msmall-data-limit[put global and static data smaller than the limit into a special section]'
  '-msoft-float[use software floating point]'
  '-mstack-alignment[set the stack alignment]'
  '-mstack-arg-probe[enable stack probes]'
  '-mstack-probe-size[set the stack probe size]'
  '-mstack-protector-guard-offset[use the given offset for addressing the stack-protector guard]'
  '-mstack-protector-guard-reg[use the given reg for addressing the stack-protector guard]'
  '-mstack-protector-guard-symbol[use the given symbol for addressing the stack-protector guard]'
  '-mstack-protector-guard[use the given guard (global, tls) for addressing the stack-protector guard]'
  '-mstackrealign[force realign the stack at entry to every function]'
  '-msve-vector-bits[specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)]'
  '-msvr4-struct-return[return small structs in registers (PPC32 only)]'
  '-mtargetos[set the deployment target to be the specified OS and OS version]'
  '-mtgsplit[enable threadgroup split execution mode (AMDGPU only)]'
  '-mthread-model[the thread model to use. Defaults to posix)]'
  '-mtls-direct-seg-refs[enable direct TLS access through segment registers (default)]'
  '-mtls-size[specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)]'
  '-mtp[thread pointer access method. For AArch32: soft uses a function call, or tpidrurw, tpidruro or tpidrprw use the three CP15 registers. cp15 is an alias for tpidruro. For AArch64: tpidr_el0, tpidr_el1, tpidr_el2, tpidr_el3 or tpidrro_el0 use the five system registers. elN is an alias for tpidr_elN.]'
  '-mtune[only supported on AArch64, PowerPC, RISC-V, SystemZ, and X86]'
  '-MT[specify name of main file output in depfile]'
  '-munaligned-access[allow memory accesses to be unaligned (AArch32/AArch64/LoongArch only)]'
  '-munsafe-fp-atomics[enable generation of unsafe floating point atomic instructions. May generate more efficient code, but may not respect rounding and denormal modes, and may give incorrect results for certain memory destinations. (AMDGPU only)]'
  '-mvscale-max[specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64/RISC-V only)]'
  '-mvscale-min[specify the vscale minimum. Defaults to "1". (AArch64/RISC-V only)]'
  '-MV[use NMake/Jom format for the depfile]'
  '-mwavefrontsize64[specify wavefront size 64 mode (AMDGPU only)]'
  '-mxcoff-build-id[0xHEXSTRING>]'
  '-mxcoff-roptr[place constant objects with relocatable address values in the RO data section and add -bforceimprw to the linker flags (AIX only)]'
  '-mzos-hlq-clang[high level qualifier for z/OS C++RT side deck datasets]'
  '-mzos-hlq-csslib[high level qualifier for z/OS CSSLIB dataset]'
  '-mzos-hlq-le[high level qualifier for z/OS Language Environment datasets]'
  '-mzos-sys-include[path to system headers on z/OS]'
  '-M[like -MD, but also implies -E and writes to stdout by default]'
  '--no-cuda-include-ptx[do not include PTX for the following GPU architecture (e.g. sm_35) or all. May be specified more than once.]'
  '--no-cuda-version-check[t error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.]'
  '--no-default-config[disable loading default configuration files]'
  '--no-gpu-bundle-output[do not bundle output files of HIP device compilation]'
  '-no-hip-rt[do not link against HIP runtime libraries]'
  '--no-offload-arch[remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. all resets the list to its default value.]'
  '--no-offload-new-driver[t Use the new driver for offloading compilation.]'
  '--no-system-header-prefix[treat all #include paths starting with <prefix> as not including a system header.]'
  '-nobuiltininc[disable builtin #include directories]'
  '-nogpuinc[do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers]'
  '-nogpulib[do not link device library for CUDA/HIP device compilation]'
  '-nohipwrapperinc[do not include the default HIP wrapper headers and include paths]'
  '-nostdinc[++             Disable standard #include directories for the C++ standard library]'
  '--nvptx-arch-tool[tool used for detecting NVIDIA GPU arch in the system.]'
  '-ObjC[++                 Treat source input files as Objective-C++ inputs]'
  '-objcmt-allowlist-dir-path[only modify files with a filename contained in the provided directory path]'
  '-objcmt-atomic-property[migration to atomic properties]'
  '-objcmt-migrate-all[enable migration to modern ObjC]'
  '-objcmt-migrate-annotation[enable migration to property and method annotations]'
  '-objcmt-migrate-designated-init[enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods]'
  '-objcmt-migrate-instancetype[enable migration to infer instancetype for method result type]'
  '-objcmt-migrate-literals[enable migration to modern ObjC literals]'
  '-objcmt-migrate-ns-macros[enable migration to NS_ENUM/NS_OPTIONS macros]'
  '-objcmt-migrate-property-dot-syntax[enable migration of setter/getter messages to property-dot syntax]'
  '-objcmt-migrate-property[enable migration to modern ObjC property]'
  '-objcmt-migrate-protocol-conformance[enable migration to add protocol conformance on classes]'
  '-objcmt-migrate-readonly-property[enable migration to modern ObjC readonly property]'
  '-objcmt-migrate-readwrite-property[enable migration to modern ObjC readwrite property]'
  '-objcmt-migrate-subscripting[enable migration to modern ObjC subscripting]'
  '-objcmt-ns-nonatomic-iosonly[enable migration to use NS_NONATOMIC_IOSONLY macro for setting propertys atomic attribute]'
  '-objcmt-returns-innerpointer-property[enable migration to annotate property with NS_RETURNS_INNER_POINTER]'
  '-objcmt-whitelist-dir-path[alias for -objcmt-allowlist-dir-path]'
  '-ObjC[treat source input files as Objective-C inputs]'
  '-object-file-name[set the output <file> for debug infos]'
  '--offload-arch[specify an offloading device architecture for CUDA, HIP, or OpenMP. (e.g. sm_35). If native is used the compiler will detect locally installed architectures. For HIP offloading, the device architecture can be followed by target ID features delimited by a colon (e.g. gfx908:xnack+:sramecc-). May be specified more than once.]'
  '--offload-device-only[only compile for the offloading device.]'
  '--offload-host-device[only compile for the offloading host.]'
  '--offload-host-only[only compile for the offloading host.]'
  '--offload-link[use the new offloading linker to perform the link job.]'
  '--offload-new-driver[use the new driver for offloading compilation.]'
  '--offload[specify comma-separated list of offloading target triples (CUDA and HIP only)]'
  '-o[write output to <file>]'
  '-pedantic[warn on language extensions]'
  '-pg[enable mcount instrumentation]'
  '-pipe[use pipes between commands, when possible]'
  '--precompile[only precompile the input]'
  '--pretty-sgf[emit pretty printed symbol graphs]'
  '-print-diagnostic-options[print all of Clangs warning options]'
  '-print-effective-triple[the effective target triple]'
  '-print-file-name[print the full library path of <file>]'
  '-print-ivar-layout[enable Objective-C Ivar layout bitmap print trace]'
  '-print-libgcc-file-name[the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")]'
  '-print-multi-flags-experimental[print the flags used for selecting multilibs (experimental)]'
  '-print-prog-name[print the full program path of <name>]'
  '-print-resource-dir[print the resource directory pathname]'
  '-print-rocm-search-dirs[the paths used for finding ROCm installation]'
  '-print-runtime-dir[print the directory pathname containing clangs runtime libraries]'
  '-print-search-dirs[print the paths used for finding libraries and programs]'
  '-print-supported-cpus[print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)]'
  '-print-target-triple[print the normalized target triple]'
  '-print-targets[print the registered targets]'
  '-pthread[support POSIX threads in generated code]'
  '--ptxas-path[path to ptxas (used for compiling CUDA code)]'
  '-P[disable linemarker output in -E mode]'
  '-p[enable mcount instrumentation with prof]'
  '-Qn[do not emit metadata containing compiler name and version]'
  '-Qunused-arguments[dont emit warning for unused driver arguments]'
  '-Qy[emit metadata containing compiler name and version]'
  '-relocatable-pch[whether to build a relocatable precompiled header]'
  '-rewrite-legacy-objc[rewrite Legacy Objective-C source to C++]'
  '-rewrite-objc[rewrite Objective-C source to C++]'
  '--rocm-device-lib-path[ROCm device library path. Alternative to rocm-path.]'
  '--rocm-path[ROCm installation path, used for finding and automatically linking required bitcode libraries.]'
  '-Rpass-analysis[report transformation analysis from optimization passes whose name matches the given POSIX regular expression]'
  '-Rpass-missed[report missed transformations by optimization passes whose name matches the given POSIX regular expression]'
  '-Rpass[report transformations performed by optimization passes whose name matches the given POSIX regular expression]'
  '-rtlib[compiler runtime library to use]'
  '-R[<remark>              Enable the specified remark]'
  '-save-stats[save llvm statistics.]'
  '-save-stats[save llvm statistics.]'
  '-save-temps[save intermediate compilation results.]'
  '-save-temps[save intermediate compilation results]'
  '-serialize-diagnostics[serialize compiler diagnostics to a file]'
  '-shared-libsan[dynamically link the sanitizer runtime]'
  '--start-no-unused-arguments[dont emit warnings about unused arguments for the following arguments]'
  '-static-libsan[statically link the sanitizer runtime (Not supported for ASan, TSan or UBSan on darwin)]'
  '-static-openmp[use the static host OpenMP runtime while linking.]'
  '-std[language standard to compile for]'
  '-stdlib[++-isystem <directory>]'
  '-stdlib[C++ standard library to use]'
  '-sycl-std[SYCL language standard to compile for.]'
  '--symbol-graph-dir[directory in which to emit symbol graphs.]'
  '--system-header-prefix[treat all #include paths starting with <prefix> as including a system header.]'
  '-S[only run preprocess and compilation steps]'
  '--target[generate code for the given target]'
  '-time[time individual commands]'
  '-traditional-cpp[enable some traditional CPP emulation]'
  '-trigraphs[process trigraph sequences]'
  '-T[specify <script> as linker script]'
  '-undef[undef all system defines]'
  '-unwindlib[unwind library to use]'
  '-U[undefine macro <macro>]'
  '--verify-debug-info[verify the binary representation of debug output]'
  '-verify-pch[load and verify that a pre-compiled header file is not stale]'
  '--version[print version information]'
  '-vfsoverlay[overlay the virtual filesystem described by file over the real file system. Additionally, pass this overlay file to the linker if it supports it]'
  '-v[show commands to run and use verbose output]'
  '-Wa[<arg>               Pass the comma separated arguments in <arg> to the assembler]'
  '-Wdeprecated[enable warnings for deprecated constructs and define __DEPRECATED]'
  '-Wl[<arg>               Pass the comma separated arguments in <arg> to the linker]'
  '-working-directory[resolve file paths relative to the specified directory]'
  '-Wp[<arg>               Pass the comma separated arguments in <arg> to the preprocessor]'
  '-W[<warning>             Enable the specified warning]'
  '-w[suppress all warnings]'
  '-Xanalyzer[pass <arg> to the static analyzer]'
  '-Xarch[_device <arg>     Pass <arg> to the CUDA/HIP device compilation]'
  '-Xarch[_host <arg>       Pass <arg> to the CUDA/HIP host compilation]'
  '-Xassembler[pass <arg> to the assembler]'
  '-Xclang[alias for -Xclang]'
  '-Xclang[pass <arg> to clang -cc1]'
  '-Xcuda-fatbinary[pass <arg> to fatbinary invocation]'
  '-Xcuda-ptxas[pass <arg> to the ptxas assembler]'
  '-Xlinker[pass <arg> to the linker]'
  '-Xoffload-linker[<triple> <arg>]'
  '-Xopenmp-target[<arg>]'
  '-Xopenmp-target[pass <arg> to the target offloading toolchain.]'
  '-Xpreprocessor[pass <arg> to the preprocessor]'
  '-x[treat subsequent input files as having type <language>]'
  '-z[pass -z <arg> to the linker]'
  '*:filename:_files'
)

_arguments -s $arguments
