#compdef ld64.lld.darwinnew12

local arguments

arguments=(
  '-filelist[read names of files to link from <file>]'
  '-sectcreate[<section> <file>]'
  '-compatibility[_version <version>]'
  '-current[_version <version>]'
  '-install[_name <name> Set an internal install path in a dylib]'
  '-save-temps[intermediate LTO compilation results]'
  '-t[log every file the linker loads: object, archive, and dylib]'
  '-why[_load   Log why each object file is loaded from a static library]'
  '-all[_load              Load all members of all static archive libraries]'
  '-force[_load <path>     Load all members static archive library at <path>]'
  '-framework[search for <name>.framework/<name> on the framework search path]'
  '-F[add dir to the framework search path]'
  '-L[add dir to the library search path]'
  '-l[<name>               Search for lib<name>.dylib or lib<name>.a on the library search path]'
  '-ObjC[load all members of static archives that are an Objective-C class or category.]'
  '-search[_dylibs_first   Search for lib<name>.dylib on first pass, then for lib<name>.a on second pass through search path (default for Xcode 3 and earlier)]'
  '-search[_paths_first    Search for lib<name>.dylib and lib<name>.a at each step in traversing search path (default for Xcode 4 and later)]'
  '-syslibroot[prepend <rootdir> to all library and framework search paths]'
  '-weak-l[<name>          Like -l<name>, but mark library and its references as weak imports]'
  '-weak[_framework <name> Like -framework <name>, but mark framework and its references as weak imports]'
  '-weak[_library <path>   Like bare <path>, but mark library and its references as weak imports]'
  '-Z[remove standard directories from the library and framework search paths]'
  '--color-diagnostics[always,never\]]'
  '--color-diagnostics[alias for --color-diagnostics=always]'
  '--help-hidden[display help for hidden options]'
  '--lto-legacy-pass-manager[use the legacy pass manager in LLVM]'
  '--no-color-diagnostics[for --color-diagnostics=never]'
  '--no-lto-legacy-pass-manager[use the new pass manager in LLVM]'
  '--reproduce[write tar file containing inputs and command to reproduce link]'
  '--version[display the version number and exit]'
  '-no[_pie Do not build a position independent executable (default for macOS 10.6 and earlier)]'
  '-pie[build a position independent executable (default for macOS 10.7 and later)]'
  '-no[_implicit_dylibs Do not optimize public dylib transitive symbol references]'
  '-order[_file <file>  Layout functions and data according to specification in <file>]'
  '-platform[_version <platform> <min_version> <sdk_version>]'
  '-demangle[symbol names in diagnostics]'
  '-arch[the architecture (e.g. ppc, ppc64, i386, x86_64)]'
  '-bundle[produce a bundle]'
  '-dylib[produce a shared library]'
  '-dynamic[link dynamically (default)]'
  '-execute[produce a main executable (default)]'
  '-o[the name of the output file (default: `a.out)]'
  '-e[make <symbol> the entry point of an executable (default is "start" from crt1.o)]'
  '-fatal[_warnings         Treat warnings as errors]'
  '-headerpad[_max_install_names]'
  '-headerpad[allocate hex <size> extra space for future expansion of the load commands via install_name_tool (default is 0x20)]'
  '-lto[_library <path>     Deprecated & ignored. LLD supports LTO directly, without using an external dylib.]'
  '-mcpu[processor family target for LTO code generation]'
  '-mllvm[options to pass to LLVM]'
  '-no[_adhoc_codesign      Do not write an ad-hoc code signature to the output file.]'
  '-object[_path_lto <path> Retain any temporary mach-o file in <path> that would otherwise be deleted during LTO]'
  '-sub[_library <name>     Re-export the dylib as <name>]'
  '-sub[_umbrella <name>    Re-export the framework as <name>]'
  '-v[print the linker version and search paths and exit]'
  '-rpath[add <path> to dyld search list for dylibs with load path prefix `@rpath/]'
  '-undefined[handle undefined symbols according to <treatment>: error, warning, suppress, or dynamic_lookup (default is error)]'
  '*:filename:_files'
)

_arguments -s $arguments
