#compdef hyperfine

local arguments

arguments=(
  {-w,--warmup}'[perform NUM warmup runs before the actual benchmark. This can be used to fill]'
  {-m,--min-runs}'[perform at least NUM runs for each command (default: 10).]'
  {-M,--max-runs}'[perform at most NUM runs for each command. By default, there is no limit.]'
  {-r,--runs}'[perform exactly NUM runs for each command. If this option is not specified]'
  {-s,--setup}'[execute CMD before each set of timing runs. This is useful for compiling your]'
  {-p,--prepare}'[execute CMD before each timing run. This is useful for clearing disk caches]'
  {-c,--cleanup}'[execute CMD after the completion of all benchmarking runs for each individual]'
  {-P,--parameter-scan}'[<MIN> <MAX>]'
  {-D,--parameter-step-size}'[this argument requires --parameter-scan to be specified as well. Traverse the]'
  {-L,--parameter-list}'[<VALUES>]'
  '--style[set output style type (default: auto). Set this to basic to disable output]'
  {-S,--shell}'[set the shell to use for executing benchmarked commands. This can be the name]'
  '--norc[". It can also be set to "default" to explicitly select the default]'
  '-N[an alias for --shell=none.]'
  {-i,--ignore-failure}'[ignore non-zero exit codes of the benchmarked programs.]'
  {-u,--time-unit}'[set the time unit to be used. Possible values: millisecond, second.]'
  '--export-asciidoc[export the timing summary statistics as an AsciiDoc table to the given FILE.]'
  '--export-csv[export the timing summary statistics as CSV to the given FILE. If you need the]'
  '--export-json[export the timing summary statistics and timings of individual runs as JSON to]'
  '--export-markdown[export the timing summary statistics as a Markdown table to the given FILE.]'
  '--show-output[print the stdout and stderr of the benchmark instead of suppressing it. This]'
  {-n,--command-name}'[give a meaningful name to a command. This can be specified multiple times if]'
  {-h,--help}'[print help information]'
  {-V,--version}'[print version information]'
  '*:filename:_files'
)

_arguments -s $arguments
