#compdef cucumber

local arguments

arguments=(
  {-r,--require}'[require files before executing the features. If this]'
  '--retry[specify the number of times to retry failing tests (default: 0)]'
  '--i18n-languages[list all available languages]'
  '--i18n-keywords[list keywords for in a particular language]'
  '--fail-fast[exit immediately following the first failing scenario]'
  {-f,--format}'[how to format features (Default: pretty). Available formats:]'
  '--init[initializes folder structure and generates conventional files for]'
  {-o,--out}'[write output to a file/directory instead of STDOUT. This option]'
  {-t,--tags}'[only execute the features or scenarios with tags matching TAG_EXPRESSION.]'
  {-n,--name}'[only execute the feature elements which match part of the given name.]'
  {-e,--exclude}'[dont run feature files or require ruby files matching PATTERN]'
  {-p,--profile}'[pull commandline arguments from cucumber.yml which can be defined as]'
  {-P,--no-profile}'[disables all profile loading to avoid using the default profile.]'
  {-c,--}'[whether or not to use ANSI color in the output. Cucumber decides]'
  {-d,--dry-run}'[invokes formatters without executing the steps.]'
  {-m,--no-multiline}'[dont print multiline strings and tables under steps.]'
  {-s,--no-source}'[dont print the file and line of the step definition with the steps.]'
  {-i,--no-snippets}'[dont print snippets for pending steps.]'
  {-I,--snippet-type}'[use different snippet type (Default: cucumber_expression). Available types:]'
  {-q,--quiet}'[alias for --no-snippets --no-source.]'
  '--no-duration[dont print the duration at the end of the summary]'
  {-b,--backtrace}'[show full backtrace for all errors.]'
  {-S,--}'[fail if there are any strict affected results]'
  {-w,--wip}'[fail if there are any passing scenarios.]'
  {-v,--verbose}'[show the files and features loaded.]'
  {-g,--guess}'[guess best match for Ambiguous steps.]'
  {-l,--lines}'[run given line numbers. Equivalent to FILE:LINE syntax]'
  {-x,--expand}'[expand Scenario Outline Tables in output.]'
  '--order[run examples in the specified order. Available types:]'
  '--version[show version.]'
  '(- * :)'{-h,--help}'[youre looking at it.]'
  '*:filename:_files'
)

_arguments -s $arguments
