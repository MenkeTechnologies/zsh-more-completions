#compdef text2image

local arguments

arguments=(
  '--exposure[exposure level in photocopier  (type:int default:0)]'
  '--resolution[pixels per inch  (type:int default:300)]'
  '--xsize[width of output image  (type:int default:3600)]'
  '--ysize[height of output image  (type:int default:4800)]'
  '--max[_pages  Maximum number of pages to output (0=unlimited)  (type:int default:0)]'
  '--margin[margin round edges of image  (type:int default:100)]'
  '--ptsize[size of printed text  (type:int default:12)]'
  '--leading[inter-line space (in pixels)  (type:int default:12)]'
  '--box[_padding  Padding around produced bounding boxes  (type:int default:0)]'
  '--glyph[_resized_size  Each glyph is square with this side length in pixels  (type:int default:0)]'
  '--glyph[_num_border_pixels_to_pad  Final_size=glyph_resized_size+2*glyph_num_border_pixels_to_pad  (type:int default:0)]'
  '--tlog[_level  Minimum logging level for tlog() output  (type:int default:0)]'
  '--debug[_level  Level of Trainer debugging  (type:int default:0)]'
  '--load[_images  Load images with tr files  (type:int default:0)]'
  '--char[_spacing  Inter-character space in ems  (type:double default:0)]'
  '--underline[_start_prob  Fraction of words to underline (value in \[0,1\])  (type:double default:0)]'
  '--underline[_continuation_prob  Fraction of words to underline (value in \[0,1\])  (type:double default:0)]'
  '--min[_coverage  If find_fonts==true, the minimum coverage the font has of the characters in the text file to include it, between 0 and 1.  (type:double default:1)]'
  '--clusterconfig[_min_samples_fraction  Min number of samples per proto as % of total  (type:double default:0.625)]'
  '--clusterconfig[_max_illegal  Max percentage of samples in a cluster which have more than 1 feature in that cluster  (type:double default:0.05)]'
  '--clusterconfig[_independence  Desired independence between dimensions  (type:double default:1)]'
  '--clusterconfig[_confidence  Desired confidence in prototypes created  (type:double default:1e-06)]'
  '--degrade[_image  Degrade rendered image with speckle noise, dilation/erosion and rotation  (type:bool default:true)]'
  '--rotate[_image  Rotate the image in a random way.  (type:bool default:true)]'
  '--distort[_image  Degrade rendered image with noise, blur, invert.  (type:bool default:false)]'
  '--invert[invert the image  (type:bool default:true)]'
  '--white[_noise  Add  Gaussian Noise  (type:bool default:true)]'
  '--smooth[_noise  Smoothen Noise  (type:bool default:true)]'
  '--blur[blur the image  (type:bool default:true)]'
  '--strip[_unrenderable_words  Remove unrenderable words from source text  (type:bool default:true)]'
  '--ligatures[rebuild and render ligatures  (type:bool default:false)]'
  '--find[_fonts  Search for all fonts that can render the text  (type:bool default:false)]'
  '--render[_per_font  If find_fonts==true, render each font to its own image. Image filenames are of the form output_name.font_name.tif  (type:bool default:true)]'
  '--list[_available_fonts  List available fonts and quit.  (type:bool default:false)]'
  '--render[_ngrams  Put each space-separated entity from the input file into one bounding box. The ngrams in the input file will be randomly permuted before rendering (so that there is sufficient variety of characters on each line).  (type:bool default:false)]'
  '--output[_word_boxes  Output word bounding boxes instead of character boxes. This is used for Cube training, and implied by --render_ngrams.  (type:bool default:false)]'
  '--bidirectional[_rotation  Rotate the generated characters both ways.  (type:bool default:false)]'
  '--only[_extract_font_properties  Assumes that the input file contains a list of ngrams. Renders each ngram, extracts spacing properties and records them in output_base/\[font_name\].fontinfo file.  (type:bool default:false)]'
  '--output[_individual_glyph_images  If true also outputs individual character images  (type:bool default:false)]'
  '--text[file name of text input to process  (type:string default:)]'
  '--outputbase[basename for output image/box file  (type:string default:)]'
  '--writing[_mode  Specify one of the following writing modes.]'
  '--font[font description name to use  (type:string default:Arial)]'
  '--unicharset[_file  File with characters in the unicharset. If --render_ngrams is true and --unicharset_file is specified, ngrams with characters that are not in unicharset will be omitted  (type:string default:)]'
  '--configfile[file to load more configs from  (type:string default:)]'
  '--D[directory to write output files to  (type:string default:)]'
  '--F[file listing font properties  (type:string default:font_properties)]'
  '--X[file listing font xheights  (type:string default:)]'
  '--U[file to load unicharset from  (type:string default:unicharset)]'
  '--O[file to write unicharset to  (type:string default:)]'
  '--output[_trainer  File to write trainer to  (type:string default:)]'
  '--test[_ch  UTF8 test character string  (type:string default:)]'
  '--fonts[_dir    (type:string default:)]'
  '--fontconfig[_tmpdir    (type:string default:)]'
  '*:filename:_files'
)

_arguments -s $arguments
