#compdef indenterAndDuplicateLineDeleter.sh

local arguments

arguments=(
  {-a,--archive}'[same as -dR --preserve=all]'
  '--attributes-only[dont copy the file data, just the attributes]'
  '--backup[make a backup of each existing destination file]'
  '-b[like --backup but does not accept an argument]'
  '--copy-contents[copy contents of special files when recursive]'
  '-d[same as --no-dereference --preserve=links]'
  {-f,--force}'[if an existing destination file cannot be]'
  {-i,--interactive}'[prompt before overwrite (overrides a previous -n]'
  '-H[follow command-line symbolic links in SOURCE]'
  {-l,--link}'[hard link files instead of copying]'
  {-L,--dereference}'[always follow symbolic links in SOURCE]'
  {-n,--no-clobber}'[do not overwrite an existing file (overrides]'
  {-P,--no-dereference}'[never follow symbolic links in SOURCE]'
  '-p[same as --preserve=mode,ownership,timestamps]'
  '--preserve[preserve the specified attributes (default:]'
  '--no-preserve[dont preserve the specified attributes]'
  '--parents[use full source file name under DIRECTORY]'
  {-R,-r,--recursive}'[copy directories recursively]'
  '--reflink[control clone/CoW copies. See below]'
  '--remove-destination[remove each existing destination file before]'
  '--sparse[control creation of sparse files. See below]'
  '--strip-trailing-slashes[remove any trailing slashes from each SOURCE]'
  {-s,--symbolic-link}'[make symbolic links instead of copying]'
  {-S,--suffix}'[override the usual backup suffix]'
  {-t,--target-directory}'[copy all SOURCE arguments into DIRECTORY]'
  {-T,--no-target-directory}'[treat DEST as a normal file]'
  {-u,--update}'[copy only when the SOURCE file is newer]'
  {-v,--verbose}'[explain what is being done]'
  {-x,--one-file-system}'[stay on this file system]'
  '-Z[set SELinux security context of destination]'
  '--context[like -Z, or if CTX is specified then set the]'
  '--help[display this help and exit]'
  '--version[output version information and exit]'
  '-g[run using GUI (like "gvim")]'
  '-f[or --nofork Foreground: Dont fork when starting GUI]'
  '-v[vi mode (like "vi")]'
  '-e[ex mode (like "ex")]'
  '-E[improved Ex mode]'
  '-s[silent (batch) mode (only for "ex")]'
  '-d[diff mode (like "vimdiff")]'
  '-y[easy mode (like "evim", modeless)]'
  '-R[readonly mode (like "view")]'
  '-Z[restricted mode (like "rvim")]'
  '-m[modifications (writing files) not allowed]'
  '-M[modifications in text not allowed]'
  '-b[binary mode]'
  '-l[lisp mode]'
  '-C[compatible with Vi: compatible]'
  '-N[not fully Vi compatible: nocompatible]'
  '-V[be verbose \[level N\] \[log messages to fname\]]'
  '-D[debugging mode]'
  '-n[no swap file, use memory only]'
  '-r[list swap files and exit]'
  '-r[file name) Recover crashed session]'
  '-L[same as -r]'
  '-A[start in Arabic mode]'
  '-H[start in Hebrew mode]'
  '-F[start in Farsi mode]'
  '-T[set terminal type to <terminal>]'
  '--not-a-term[skip warning for input/output not being a terminal]'
  '--ttyfail[exit if input or output is not a terminal]'
  '-u[use <vimrc> instead of any .vimrc]'
  '-U[use <gvimrc> instead of any .gvimrc]'
  '--noplugin[dont load plugin scripts]'
  '-p[open N tab pages (default: one for each file)]'
  '-o[open N windows (default: one for each file)]'
  '-O[like -o but split vertically]'
  '--cmd[execute <command> before loading any vimrc file]'
  '-c[execute <command> after loading the first file]'
  '-S[source file <session> after loading the first file]'
  '-s[read Normal mode commands from file <scriptin>]'
  '-w[append all typed commands to file <scriptout>]'
  '-W[write all typed commands to file <scriptout>]'
  '-x[edit encrypted files]'
  '-X[do not connect to X server]'
  '--remote[edit <files> in a Vim server if possible]'
  '--remote-silent[same, dont complain if there is no server]'
  '--remote-wait[as --remote but wait for files to have been edited]'
  '--remote-wait-silent[same, dont complain if there is no server]'
  '--remote-tab[\[-wait\]\[-silent\] <files> As --remote but use tab page per file]'
  '--remote-send[send <keys> to a Vim server and exit]'
  '--remote-expr[evaluate <expr> in a Vim server and print result]'
  '--serverlist[list available Vim server names and exit]'
  '--servername[send to/become the Vim server <name>]'
  '--startuptime[write startup timing messages to <file>]'
  '-i[use <viminfo> instead of .viminfo]'
  '--clean[nocompatible, Vim defaults, no plugins, no viminfo]'
  '-h[or --help Print Help (this message) and exit]'
  '--version[print version information and exit]'
  '-font[use <font> for normal text (also: -fn)]'
  '-geometry[use <geom> for initial geometry (also: -geom)]'
  '-reverse[use reverse video (also: -rv)]'
  '-display[run vim on <display> (also: --display)]'
  '--role[set a unique role to identify the main window]'
  '--socketid[open Vim inside another GTK widget]'
  '--echo-wid[make gvim echo the Window ID on stdout]'
  '*:filename:_files'
)

_arguments -s $arguments
