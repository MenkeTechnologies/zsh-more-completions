#compdef spirv-opt

local arguments

arguments=(
  '--ccp[apply the conditional constant propagation transform.  This will]'
  '--cfg-cleanup[cleanup the control flow graph. This will remove any unnecessary]'
  '--combine-access-chains[combines chained access chains to produce a single instruction]'
  '--compact-ids[remap result ids to a compact range starting from %1 and without]'
  '--convert-local-access-chains[convert constant index access chain loads/stores into]'
  '--copy-propagate-arrays[does propagation of memory references when an array is a copy of]'
  '--eliminate-common-uniform[perform load/load elimination for duplicate uniform values.]'
  '--eliminate-dead-branches[convert conditional branches with constant condition to the]'
  '--eliminate-dead-code-aggressive[delete instructions which do not contribute to a functions]'
  '--eliminate-dead-const[eliminate dead constants.]'
  '--eliminate-dead-functions[deletes functions that cannot be reached from entry points or]'
  '--eliminate-dead-inserts[deletes unreferenced inserts into composites, most notably]'
  '--eliminate-dead-variables[deletes module scope variables that are not referenced.]'
  '--eliminate-insert-extract[DEPRECATED.  This pass has been replaced by the simplification]'
  '--eliminate-local-multi-store[replace stores and loads of function scope variables that are]'
  '--eliminate-local-single-block[perform single-block store/load and load/load elimination.]'
  '--eliminate-local-single-store[replace stores and loads of function scope variables that are]'
  '--flatten-decorations[replace decoration groups with repeated OpDecorate and]'
  '--fold-spec-const-op-composite[fold the spec constants defined by OpSpecConstantOp or]'
  '--freeze-spec-const[freeze the values of specialization constants to their default]'
  '--generate-webgpu-initializers[adds initial values to OpVariable instructions that are missing]'
  '--if-conversion[convert if-then-else like assignments into OpSelect.]'
  '--inline-entry-points-exhaustive[exhaustively inline all function calls in entry point call tree]'
  '--legalize-hlsl[runs a series of optimizations that attempts to take SPIR-V]'
  '--local-redundancy-elimination[looks for instructions in the same basic block that compute the]'
  '--loop-fission[splits any top level loops in which the register pressure has]'
  '--loop-fusion[identifies adjacent loops with the same lower and upper bound.]'
  '--loop-invariant-code-motion[identifies code in loops that has the same value for every]'
  '--loop-unroll[fully unrolls loops marked with the Unroll flag]'
  '--loop-unroll-partial[partially unrolls loops marked with the Unroll flag. Takes an]'
  '--loop-peeling[execute few first (respectively last) iterations before]'
  '--loop-peeling-threshold[takes a non-0 integer argument to set the loop peeling code size]'
  '--max-id-bound[sets the maximum value for the id bound for the moudle.  The]'
  '--merge-blocks[join two blocks into a single block if the second has the]'
  '--merge-return[changes functions that have multiple return statements so they]'
  '--loop-unswitch[hoists loop-invariant conditionals out of loops by duplicating]'
  '-O[optimize for performance. Apply a sequence of transformations]'
  '-Os[optimize for size. Apply a sequence of transformations in an]'
  '-Oconfig[apply the sequence of transformations indicated in <file>.]'
  '--inline-entry-points-exhaustive[]'
  '--eliminate-dead-code-aggressive[]'
  '--eliminate-dead-code-aggressive[.spv]'
  '--merge-blocks[by all the transformations implied by]'
  '-O[.]'
  '--print-all[print SPIR-V assembly to standard error output before each pass]'
  '--private-to-local[change the scope of private variables that are used in a single]'
  '--reduce-load-size[replaces loads of composite objects where not every component is]'
  '--redundancy-elimination[looks for instructions in the same function that compute the]'
  '--relax-struct-store[allow store from one struct type to a different type with]'
  '--remove-duplicates[removes duplicate types, decorations, capabilities and extension]'
  '--replace-invalid-opcode[replaces instructions whose opcode is valid for shader modules]'
  '--ssa-rewrite[replace loads and stores to function local variables with]'
  '--scalar-replacement[replace aggregate function scope variables that are only accessed]'
  '--set-spec-const-default-value[id>:<default value> ..."]'
  '--simplify-instructions[will simplify all instructions in the function as much as]'
  '--skip-validation[will not validate the SPIR-V before optimizing.  If the SPIR-V]'
  '--strength-reduction[replaces instructions with equivalent and less expensive ones.]'
  '--strip-atomic-counter-memory[removes AtomicCountMemory bit from memory semantics values.]'
  '--strip-debug[remove all debug instructions.]'
  '--strip-reflect[remove all reflection information.  For now, this covers]'
  '--target-env[set the target environment. Without this flag the target]'
  '--time-report[print the resource utilization of each pass (e.g., CPU time]'
  '--upgrade-memory-model[upgrades the Logical GLSL450 memory model to Logical VulkanKHR.]'
  '--vector-dce[this pass looks for components of vectors that are unused, and]'
  '--vulkan-to-webgpu[turns on the prescribed passes for converting from Vulkan to]'
  '--webgpu-to-vulkan[turns on the prescribed passes for converting from WebGPU to]'
  '--workaround-1209[rewrites instructions for which there are known driver bugs to]'
  '--unify-const[remove the duplicated constants.]'
  '--validate-after-all[validate the module after each pass is performed.]'
  '(- * :)'{-h,--help}'[print this help.]'
  '--version[display optimizer version information.]'
  '*:filename:_files'
)

_arguments -s $arguments
