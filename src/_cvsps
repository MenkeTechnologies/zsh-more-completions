#compdef cvsps

local arguments

arguments=(
  '-h[this informative message]'
  '-x[(and rebuild) cvsps.cache file]'
  '-u[cvsps.cache file]'
  '-z[set the timestamp fuzz factor for identifying patch sets]'
  '-g[diffs of the selected patch sets]'
  '-s[set>\[-\[<patch set>\]\]\[,<patch set>...\] restrict patch sets by id]'
  '-a[restrict output to patch sets created by author]'
  '-f[restrict output to patch sets involving file]'
  '-d[1> -d <date2> if just one date specified, show]'
  '-b[restrict output to patch sets affecting history of branch]'
  '-l[restrict output to patch sets matching <regex> in log message]'
  '-r[1> -r <tag2> if just one tag specified, show]'
  '-p[output patch sets to individual files in <directory>]'
  '-v[very verbose parsing messages]'
  '-t[some brief memory usage statistics]'
  '--norc[invoking cvs, ignore the .cvsrc file]'
  '--summary-first[multiple patch sets are shown, put all summaries first]'
  '--test-log[cvs log> supply a captured cvs log for testing]'
  '--diff-opts[string> supply special set of options to diff]'
  '--bkcvs[hack for parsing the BK -> CVS log format]'
  '--no-rlog[rlog (its faulty in some setups)]'
  '--cvs-direct[) enable (disable) built-in cvs client code]'
  '--debuglvl[enable various debug channels.]'
  '-Z[A value 1-9 which specifies amount of compression]'
  '--root[specify cvsroot. overrides env. and working directory (cvs-direct only)]'
  '-q[quiet about warnings]'
  '-A[and report branch ancestry]'
  '*:filename:_files'
)

_arguments -s $arguments
