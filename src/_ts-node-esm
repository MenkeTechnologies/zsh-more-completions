#compdef ts-node-esm

local arguments

arguments=(
  {-e,--eval}'[evaluate code]'
  {-p,--print}'[print result of `--eval`]'
  {-r,--require}'[require a node module before execution]'
  {-i,--interactive}'[opens the REPL even if stdin does not appear to be a terminal]'
  '--esm[bootstrap with the ESM loader, enabling full ESM support]'
  '--swc[use the faster swc transpiler]'
  {-h,--help}'[print CLI usage]'
  {-v,--version}'[print module version information.  -vvv to print additional information]'
  '--showConfig[print resolved configuration and exit]'
  {-T,--transpileOnly}'[use TypeScripts faster `transpileModule` or a third-party transpiler]'
  {-H,--compilerHost}'[use TypeScripts compiler host API]'
  {-I,--ignore}'[override the path patterns to skip compilation]'
  {-P,--project}'[path to TypeScript JSON project file]'
  {-C,--compiler}'[specify a custom TypeScript compiler]'
  '--transpiler[specify a third-party, non-typechecking transpiler]'
  {-D,--ignoreDiagnostics}'[ignore TypeScript warnings by diagnostic code]'
  {-O,--compilerOptions}'[JSON object to merge with compiler options]'
  '--cwd[behave as if invoked within this working directory.]'
  '--files[load `files`, `include` and `exclude` from `tsconfig.json` on startup]'
  '--pretty[use pretty diagnostic formatter (usually enabled by default)]'
  '--cwdMode[use current directory instead of <script.ts> for config resolution]'
  '--skipProject[skip reading `tsconfig.json`]'
  '--skipIgnore[skip `--ignore` checks]'
  '--emit[emit output files into `.ts-node` directory]'
  '--scope[scope compiler to files within `scopeDir`.  Anything outside this directory is ignored.]'
  '--scopeDir[directory for `--scope`]'
  '--preferTsExts[prefer importing TypeScript files over JavaScript files]'
  '--logError[logs TypeScript errors to stderr instead of throwing exceptions]'
  '--noExperimentalReplAwait[disable top-level await in REPL.  Equivalent to nodes --no-experimental-repl-await]'
  '*:filename:_files'
)

_arguments -s $arguments
