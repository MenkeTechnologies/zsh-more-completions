#compdef llvm-objcopy-9

local arguments

arguments=(
  '--add-gnu-debuglink[add a .gnu_debuglink for <debug-file>]'
  '--add-section[file]'
  '--add-symbol[\[section:\]value\[,flags\]]'
  '--allow-broken-links[allow llvm-objcopy to remove sections even if it would leave invalid section references. The appropriate sh_link fields will be set to zero.]'
  '--binary-architecture[used when transforming an architecture-less format (such as binary) to another format]'
  '--build-id-link-dir[set directory for --build-id-link-input and --build-id-link-output to <dir>]'
  '--build-id-link-input[hard-link the input to <dir>/xx/xxx<suffix> name derived from hex build ID]'
  '--build-id-link-output[hard-link the output to <dir>/xx/xxx<suffix> name derived from hex build ID]'
  '--change-start[add <incr> to the start address. Can be specified multiple times, all values will be applied cumulatively.]'
  '--compress-debug-sections[zlib | zlib-gnu \]]'
  '--decompress-debug-sections[decompress DWARF debug sections.]'
  '--disable-deterministic-archives[disable deterministic mode when copying archives (use real values for UIDs, GIDs, and timestamps).]'
  '--discard-all[remove all local symbols except file and section symbols]'
  '--discard-locals[remove compiler-generated local symbols, (e.g. symbols starting with .L)]'
  '--dump-section[file]'
  '-D[alias for --enable-deterministic-archives]'
  '--enable-deterministic-archives[enable deterministic mode when copying archives (use zero for UIDs, GIDs, and timestamps).]'
  '--extract-dwo[remove all sections that are not DWARF .dwo sections from file]'
  '--extract-main-partition[extract main partition from the input file]'
  '--extract-partition[extract named partition from input file]'
  '--globalize-symbol[mark <symbol> as global]'
  '--globalize-symbols[reads a list of symbols from <filename> and marks them global.]'
  '-g[alias for --strip-debug]'
  '--input-target[format of the input file]'
  '--keep-file-symbols[do not remove file symbols]'
  '--keep-global-symbol[convert all symbols except <symbol> to local. May be repeated to convert all except a set of symbols to local.]'
  '--keep-global-symbols[reads a list of symbols from <filename> and runs as if --keep-global-symbol=<symbol> is set for each one. <filename> contains one symbol per line and may contain comments beginning with #. Leading and trailing whitespace is stripped from each line. May be repeated to read symbols from many files.]'
  '--keep-section[keep <section>]'
  '--keep-symbol[do not remove symbol <symbol>]'
  '--keep-symbols[reads a list of symbols from <filename> and runs as if --keep-symbol=<symbol> is set for each one. <filename> contains one symbol per line and may contain comments beginning with #. Leading and trailing whitespace is stripped from each line. May be repeated to read symbols from many files.]'
  '--localize-hidden[mark all symbols that have hidden or internal visibility as local]'
  '--localize-symbol[mark <symbol> as local]'
  '--localize-symbols[reads a list of symbols from <filename> and marks them local.]'
  '--only-keep-debug[clear sections that would not be stripped by --strip-debug. Currently only implemented for COFF.]'
  '--only-section[remove all but <section>]'
  '--output-target[format of the output file]'
  '--prefix-alloc-sections[add <prefix> to the start of every allocated section name]'
  '--prefix-symbols[add <prefix> to the start of every symbol name]'
  '--preserve-dates[preserve access and modification timestamps]'
  '--redefine-sym[new  Change the name of a symbol old to new]'
  '--redefine-syms[reads a list of symbol pairs from <filename> and runs as if --redefine-sym=<old>=<new> is set for each one. <filename> contains two symbols per line separated with whitespace and may contain comments beginning with #. Leading and trailing whitespace is stripped from each line. May be repeated to read symbols from many files.]'
  '--regex[permit regular expressions in name comparison]'
  '--remove-section[remove <section>]'
  '--rename-section[new\[,flag1,...\]]'
  '--set-section-flags[flag1\[,flag2,...\]]'
  '--set-start[set the start address to <addr>. Overrides any previous --change-start or --adjust-start values.]'
  '--split-dwo[equivalent to extract-dwo on the input file to <dwo-file>, then strip-dwo on the input file]'
  '--strip-all-gnu[compatible with GNU objcopys --strip-all]'
  '--strip-all[remove non-allocated sections outside segments. .gnu.warning* and .ARM.attribute sections are not removed]'
  '--strip-debug[remove all debug information]'
  '--strip-dwo[remove all DWARF .dwo sections from file]'
  '--strip-non-alloc[remove all non-allocated sections outside segments]'
  '--strip-sections[remove all section headers and all sections not in segments]'
  '--strip-symbol[remove symbol <symbol>]'
  '--strip-symbols[reads a list of symbols from <filename> and removes them.]'
  '--strip-unneeded-symbol[remove symbol <symbol> if it is not needed by relocations]'
  '--strip-unneeded-symbols[reads a list of symbols from <filename> and removes them if they are not needed by relocations]'
  '--strip-unneeded[remove all symbols not needed by relocations]'
  '--target[format of the input and output file]'
  '-U[alias for --disable-deterministic-archives]'
  '--version[print the version and exit.]'
  '--weaken-symbol[mark <symbol> as weak]'
  '--weaken-symbols[reads a list of symbols from <filename> and marks them weak.]'
  '--weaken[mark all global symbols as weak]'
  '*:filename:_files'
)

_arguments -s $arguments
