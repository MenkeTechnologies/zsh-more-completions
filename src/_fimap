#compdef fimap

local arguments

arguments=(
  {-s,--single}'[mode to scan a single URL for FI errors.]'
  {-m,--mass}'[mode for mass scanning. Will check every URL]'
  {-g,--google}'[mode to use Google to aquire URLs.]'
  {-B,--bing}'[use bing to get URLs.]'
  {-H,--harvest}'[mode to harvest a URL recursivly for new URLs.]'
  {-4,--autoawesome}'[with the AutoAwesome mode fimap will fetch all]'
  {-b,--enable-blind}'[enables blind FI-Bug testing when no error messages are printed.]'
  {-D,--dot-truncation}'[enables dot truncation technique to get rid of the suffix if]'
  {-M,--multiply-term}'[multiply terminal symbols like . and / in the path by X.]'
  {-u,--url}'[the URL you want to test.]'
  {-l,--list}'[the URL-LIST you want to test.]'
  {-q,--query}'[the Google Search QUERY.]'
  '--bingkey[this is your the Bing APIKey. You have to set this when you]'
  '--skip-pages[skip the first X pages from the Googlescanner.]'
  {-p,--pages}'[define the COUNT of pages to search (-g).]'
  '--results[the count of results the Googlescanner should get per page.]'
  '--googlesleep[the time in seconds the Googlescanner should wait befor each]'
  {-w,--write}'[the LIST which will be written if you have choosen]'
  {-d,--depth}'[the CRAWLDEPTH (recurse level) you want to crawl your target site]'
  {-P,--post}'[the POSTDATA you want to send. All variables inside]'
  '--cookie[define the cookie which should be send with each request.]'
  '--ttl[define the TTL (in seconds) for requests. Default is 30 seconds.]'
  '--no-auto-detect[use this switch if you dont want to let fimap automaticly detect]'
  '--bmin[define here the minimum count of directories fimap should walk thru]'
  '--bmax[define here the maximum count of directories fimap should walk thru.]'
  '--dot-trunc-min[00 The count of dots to begin with in dot-truncation mode.]'
  '--dot-trunc-max[000 The count of dots to end with in dot-truncation mode.]'
  '--dot-trunc-step[0 The step size for each round in dot-truncation mode.]'
  '--dot-trunc-ratio[.095 The maximum ratio to detect if dot truncation was successfull.]'
  '--dot-trunc-also-unix[use this if dot-truncation should also be tested on unix servers.]'
  '--force-os[forces fimap to test only files for the OS.]'
  {-x,--exploit}'[starts an interactive session where you can]'
  '-X[same as -x but also shows not exploitable which might can be]'
  {-T,--tab-complete}'[enables TAB-Completation in exploit mode. Needs readline module.]'
  '--x-host[the host to use exploits on. fimap wont prompt you for the domain]'
  '--x-vuln[the vulnerability ID you want to use. Its the same number you type]'
  '--x-cmd[the CMD you want to execute on the vulnerable system. Use this parameter]'
  {-A,--user-agent}'[the User-Agent which should be sent.]'
  '--http-proxy[setup your proxy with this option. But read this facts:]'
  '--show-my-ip[shows your internet IP, current country and user-agent.]'
  '--plugins[list all loaded plugins and quit after that.]'
  {-I,--install-plugins}'[shows some official exploit-mode plugins you can install]'
  '--update-def[checks and updates your definition files found in the]'
  '--test-rfi[A quick test to see if you have configured RFI nicely.]'
  '--merge-xml[use this if you have another fimap XMLFILE you want to]'
  {-C,--enable-color}'[enables a colorful output. Works only in linux!]'
  '--force-run[ignore the instance check and just run fimap even if a lockfile]'
  {-v,--verbose}'[verbose level you want to receive.]'
  '--credits[shows some credits.]'
  '--greetings[some greetings ;)]'
  '(- * :)'{-h,--help}'[shows this cruft.]'
  '*:filename:_files'
)

_arguments -s $arguments
