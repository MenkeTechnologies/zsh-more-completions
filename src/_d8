#compdef d8

local arguments

arguments=(
  '--use[_strict (enforce strict mode)]'
  '--es5[_readonly (activate correct semantics for inheriting readonliness)]'
  '--es52[_globals (activate new semantics for global var declarations)]'
  '--harmony[_typeof (enable harmony semantics for typeof)]'
  '--harmony[_scoping (enable harmony block scoping)]'
  '--harmony[_modules (enable harmony modules (implies block scoping))]'
  '--harmony[_proxies (enable harmony proxies)]'
  '--harmony[_collections (enable harmony collections (sets, maps, and weak maps))]'
  '--harmony[all harmony features (except typeof))]'
  '--packed[_arrays (optimizes arrays that have no holes)]'
  '--smi[_only_arrays (tracks arrays with only smi values)]'
  '--clever[_optimizations (Optimize object size, Array shift, DOM strings and string +)]'
  '--unbox[_double_arrays (automatically unbox arrays of doubles)]'
  '--string[_slices (use string slices)]'
  '--crankshaft[crankshaft)]'
  '--hydrogen[_filter (optimization filter)]'
  '--use[_range (use hydrogen range analysis)]'
  '--eliminate[_dead_phis (eliminate dead phis)]'
  '--use[_gvn (use hydrogen global value numbering)]'
  '--use[_canonicalizing (use hydrogen instruction canonicalizing)]'
  '--use[_inlining (use function inlining)]'
  '--max[_inlined_source_size (maximum source size in bytes considered for a single inlining)]'
  '--max[_inlined_nodes (maximum number of AST nodes considered for a single inlining)]'
  '--max[_inlined_nodes_cumulative (maximum cumulative number of AST nodes considered for inlining)]'
  '--loop[_invariant_code_motion (loop invariant code motion)]'
  '--collect[_megamorphic_maps_from_stub_cache (crankshaft harvests type feedback from stub cache)]'
  '--hydrogen[_stats (print statistics for hydrogen)]'
  '--trace[_hydrogen (trace generated hydrogen to file)]'
  '--trace[_phase (trace generated IR for specified phases)]'
  '--trace[_inlining (trace inlining decisions)]'
  '--trace[_alloc (trace register allocator)]'
  '--trace[_all_uses (trace all use positions)]'
  '--trace[_range (trace range analysis)]'
  '--trace[_gvn (trace global value numbering)]'
  '--trace[_representation (trace representation types)]'
  '--stress[_pointer_maps (pointer map for every instruction)]'
  '--stress[_environments (environment for every instruction)]'
  '--deopt[_every_n_times (deoptimize every n times a deopt point is passed)]'
  '--trap[_on_deopt (put a break point before deoptimizing)]'
  '--deoptimize[_uncommon_cases (deoptimize uncommon cases)]'
  '--polymorphic[_inlining (polymorphic inlining)]'
  '--use[_osr (use on-stack replacement)]'
  '--array[_bounds_checks_elimination (perform array bounds checks elimination)]'
  '--array[_index_dehoisting (perform array index dehoisting)]'
  '--dead[_code_elimination (use dead code elimination)]'
  '--trace[_dead_code_elimination (trace dead code elimination)]'
  '--trace[_osr (trace on-stack replacement)]'
  '--stress[_runs (number of stress runs)]'
  '--optimize[_closures (optimize closures)]'
  '--lookup[_sample_by_shared (when picking a function to optimize, watch for shared function info, not JSFunction itself)]'
  '--cache[_optimized_code (cache optimized code for closures)]'
  '--inline[_construct (inline constructor calls)]'
  '--inline[_arguments (inline functions with arguments object)]'
  '--inline[_accessors (inline JavaScript accessors)]'
  '--loop[_weight (loop weight for representation inference)]'
  '--optimize[_for_in (optimize functions containing for-in loops)]'
  '--opt[_safe_uint32_operations (allow uint32 values on optimize frames if they are used only insafe operations)]'
  '--parallel[_recompilation (optimizing hot functions asynchronously on a separate thread)]'
  '--trace[_parallel_recompilation (track parallel recompilation)]'
  '--parallel[_recompilation_queue_length (the length of the parallel compilation queue)]'
  '--experimental[_profiler (enable all profiler experiments)]'
  '--watch[_ic_patching (profiler considers IC stability)]'
  '--frame[_count (number of stack frames inspected by the profiler)]'
  '--self[_optimization (primitive functions trigger their own optimization)]'
  '--direct[_self_opt (call recompile stub directly when self-optimizing)]'
  '--retry[_self_opt (re-try self-optimization if it failed)]'
  '--count[_based_interrupts (trigger profiler ticks based on counting instead of timing)]'
  '--interrupt[_at_exit (insert an interrupt check at function exit)]'
  '--weighted[_back_edges (weight back edges by jump distance for interrupt triggering)]'
  '--interrupt[_budget (execution budget before interrupt is triggered)]'
  '--type[_info_threshold (percentage of ICs that must have type info to allow optimization)]'
  '--self[_opt_count (call count before self-optimization)]'
  '--trace[_opt_verbose (extra verbose compilation tracing)]'
  '--debug[_code (generate extra code (assertions) for debugging)]'
  '--code[_comments (emit comments in code disassembly)]'
  '--enable[_sse2 (enable use of SSE2 instructions if available)]'
  '--enable[_sse3 (enable use of SSE3 instructions if available)]'
  '--enable[_sse4_1 (enable use of SSE4.1 instructions if available)]'
  '--enable[_cmov (enable use of CMOV instruction if available)]'
  '--enable[_rdtsc (enable use of RDTSC instruction if available)]'
  '--enable[_sahf (enable use of SAHF instruction if available (X64 only))]'
  '--enable[_vfp3 (enable use of VFP3 instructions if available - this implies enabling ARMv7 and VFP2 instructions (ARM only))]'
  '--enable[_vfp2 (enable use of VFP2 instructions if available)]'
  '--enable[_armv7 (enable use of ARMv7 instructions if available (ARM only))]'
  '--enable[_sudiv (enable use of SDIV and UDIV instructions if available (ARM only))]'
  '--enable[_movw_movt (enable loading 32-bit constant by means of movw/movt instruction pairs (ARM only))]'
  '--enable[_unaligned_accesses (enable unaligned accesses for ARMv7 (ARM only))]'
  '--enable[_fpu (enable use of MIPS FPU instructions if available (MIPS only))]'
  '--expose[_natives_as (expose natives in global object)]'
  '--expose[_debug_as (expose debug in global object)]'
  '--expose[_gc (expose gc extension)]'
  '--expose[_externalize_string (expose externalize string extension)]'
  '--stack[_trace_limit (number of stack frames to capture)]'
  '--builtins[_in_stack_traces (show built-in functions in stack traces)]'
  '--disable[_native_files (disable builtin natives files)]'
  '--inline[_new (use fast inline allocation)]'
  '--stack[_trace_on_abort (print a stack trace if an assertion failure occurs)]'
  '--trace[function calls)]'
  '--mask[_constants_with_cookie (use random jit cookie to mask large constants)]'
  '--lazy[lazy compilation)]'
  '--trace[_opt (trace lazy optimization)]'
  '--trace[_opt_stats (trace lazy optimization statistics)]'
  '--opt[adaptive optimizations)]'
  '--always[_opt (always try to optimize functions)]'
  '--prepare[_always_opt (prepare for turning on always opt)]'
  '--trace[_deopt (trace deoptimization)]'
  '--min[_preparse_length (minimum length for automatic enable preparsing)]'
  '--always[_full_compiler (try to use the dedicated run-once backend for all code)]'
  '--max[_opt_count (maximum number of optimization attempts before giving up.)]'
  '--compilation[_cache (enable compilation cache)]'
  '--cache[_prototype_transitions (cache prototype transitions)]'
  '--trace[_debug_json (trace debugging JSON request/response)]'
  '--debugger[_auto_break (automatically set the debug break flag when debugger commands are in the queue)]'
  '--enable[_liveedit (enable liveedit experimental feature)]'
  '--break[_on_abort (always cause a debug break before aborting)]'
  '--stack[_size (default size of stack region v8 is allowed to use (in kBytes))]'
  '--max[_stack_trace_source_length (maximum length of function source code printed in a stack trace.)]'
  '--always[_inline_smi_code (always inline smi code in non-opt code)]'
  '--max[_new_space_size (max size of the new generation (in kBytes))]'
  '--max[_old_space_size (max size of the old generation (in Mbytes))]'
  '--max[_executable_size (max size of executable memory (in Mbytes))]'
  '--gc[_global (always perform global GCs)]'
  '--gc[_interval (garbage collect after <n> allocations)]'
  '--trace[_gc (print one trace line following each garbage collection)]'
  '--trace[_gc_nvp (print one detailed trace line in name=value format after each garbage collection)]'
  '--trace[_gc_ignore_scavenger (do not print trace line after scavenger collection)]'
  '--print[_cumulative_gc_stat (print cumulative GC statistics in name=value format on exit)]'
  '--trace[_gc_verbose (print more details following each garbage collection)]'
  '--trace[_fragmentation (report fragmentation for old pointer and data pages)]'
  '--trace[_external_memory (print amount of external allocated memory after each time it is adjusted.)]'
  '--collect[_maps (garbage collect maps from which no objects can be reached)]'
  '--flush[_code (flush code that we expect not to use again before full gc)]'
  '--incremental[_marking (use incremental marking)]'
  '--incremental[_marking_steps (do incremental marking steps)]'
  '--trace[_incremental_marking (trace progress of the incremental marking)]'
  '--track[_gc_object_stats (track object counts and memory usage)]'
  '--use[_idle_notification (Use idle notification to reduce memory footprint.)]'
  '--use[_ic (use inline caching)]'
  '--native[_code_counters (generate extra code for manipulating stats counters)]'
  '--always[_compact (Perform compaction on every full GC)]'
  '--lazy[_sweeping (Use lazy sweeping for old pointer and data spaces)]'
  '--never[_compact (Never perform compaction on full GC - testing only)]'
  '--compact[_code_space (Compact code space on full non-incremental collections)]'
  '--incremental[_code_compaction (Compact code space on full incremental collections)]'
  '--cleanup[_code_caches_at_gc (Flush inline caches prior to mark compact collection and flush code caches in maps during mark compact cycle.)]'
  '--random[_seed (Default seed for initializing random generator (0, the default, means to use system random).)]'
  '--use[_verbose_printer (allows verbose printing)]'
  '--allow[_natives_syntax (allow natives syntax)]'
  '--trace[_parse (trace parsing and preparsing)]'
  '--trace[_sim (Trace simulator execution)]'
  '--check[_icache (Check icache flushes in ARM and MIPS simulator)]'
  '--stop[_sim_at (Simulator stop after x number of instructions)]'
  '--sim[_stack_alignment (Stack alingment in bytes in simulator (4 or 8, 8 is default))]'
  '--abort[_on_uncaught_exception (abort program (dump core) when an uncaught exception is thrown)]'
  '--trace[_exception (print stack trace when throwing exceptions)]'
  '--preallocate[_message_memory (preallocate some memory to build stack traces.)]'
  '--randomize[_hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))]'
  '--hash[_seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))]'
  '--preemption[a 100ms timer that switches between V8 threads)]'
  '--regexp[_optimization (generate optimized regexp code)]'
  '--testing[_bool_flag (testing_bool_flag)]'
  '--testing[_int_flag (testing_int_flag)]'
  '--testing[_float_flag (float-flag)]'
  '--testing[_string_flag (string-flag)]'
  '--testing[_prng_seed (Seed used for threading test randomness)]'
  '--testing[_serialization_file (file in which to serialize heap)]'
  '--extra[_code (A filename with extra code to be included in the snapshot (mksnapshot only))]'
  '--help[usage message, including flags, on console)]'
  '--dump[_counters (Dump counters on exit)]'
  '--debugger[javaScript debugger)]'
  '--remote[_debugger (Connect JavaScript debugger to the debugger agent in another process)]'
  '--debugger[_agent (Enable debugger agent)]'
  '--debugger[_port (Port to use for remote debugging)]'
  '--map[_counters (Map counters to a file)]'
  '--js[_arguments (Pass all remaining arguments to the script. Alias for "--".)]'
  '--debug[_compile_events (Enable debugger compile events)]'
  '--debug[_script_collected_events (Enable debugger script collected events)]'
  '--gdbjit[GDBJIT interface (disables compacting GC))]'
  '--gdbjit[_full (enable GDBJIT interface for all code objects)]'
  '--gdbjit[_dump (dump elf objects with debug info to disk)]'
  '--gdbjit[_dump_filter (dump only objects containing this substring)]'
  '--force[_marking_deque_overflows (force overflows of marking deque by reducing its size to 64 words)]'
  '--stress[_compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))]'
  '--log[logging (no API, code, GC, suspect, or handles samples).)]'
  '--log[_all (Log all events to the log file.)]'
  '--log[_runtime (Activate runtime system %Log call.)]'
  '--log[_api (Log API events to the log file.)]'
  '--log[_code (Log code events to the log file without profiling.)]'
  '--log[_gc (Log heap samples on garbage collection for the hp2ps tool.)]'
  '--log[_handles (Log global handle events.)]'
  '--log[_snapshot_positions (log positions of (de)serialized objects in the snapshot.)]'
  '--log[_suspect (Log suspect operations.)]'
  '--prof[statistical profiling information (implies --log-code).)]'
  '--prof[_auto (Used with --prof, starts profiling automatically)]'
  '--prof[_lazy (Used with --prof, only does sampling and logging when profiler is active (implies --noprof_auto).)]'
  '--prof[_browser_mode (Used with --prof, turns on browser-compatible mode for profiling.)]'
  '--log[_regexp (Log regular expression execution.)]'
  '--sliding[_state_window (Update sliding state window counters.)]'
  '--logfile[the name of the log file.)]'
  '--ll[_prof (Enable low-level linux profiler.)]'
  '--gc[_fake_mmap (Specify the name of the file for fake gc mmap used in ll_prof)]'
  '*:filename:_files'
)

_arguments -s $arguments
