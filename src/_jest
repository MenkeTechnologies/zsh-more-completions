#compdef jest

local arguments

arguments=(
  {--help,-h}'[show help \[boolean\]]'
  {--version,-v}'[print the version and exit \[boolean\]]'
  '--all[the opposite of `onlyChanged`. If `onlyChanged`]'
  '--automock[automock all files by default. \[boolean\]]'
  {--bail,-b}'[exit the test suite immediately after `n` number]'
  '--browser[respect the "browser" field in package.json when]'
  '--cache[whether to use the transform cache. Disable the]'
  '--cacheDirectory[the directory where Jest should store its cached]'
  '--changedFilesWithAncestor[runs tests related to the current changes and]'
  '--changedSince[runs tests related to the changes since the]'
  '--ci[whether to run Jest in continuous integration]'
  '--clearCache[clears the configured Jest cache directory and]'
  '--clearMocks[automatically clear mock calls and instances]'
  '--collectCoverage[alias for --coverage. \[boolean\]]'
  '--collectCoverageFrom[A glob pattern relative to <rootDir> matching]'
  '--collectCoverageOnlyFrom[explicit list of paths coverage will be]'
  '--color[forces test results output color highlighting]'
  '--colors[alias for `--color`. \[boolean\]]'
  {--config,-c}'[the path to a jest config file specifying how to]'
  '--coverage[indicates that test coverage information should]'
  '--coverageDirectory[the directory where Jest should output its]'
  '--coveragePathIgnorePatterns[an array of regexp pattern strings that are]'
  '--coverageReporters[A list of reporter names that Jest uses when]'
  '--coverageThreshold[A JSON string with which will be used to]'
  '--debug[print debugging info about your jest config.]'
  '--detectLeaks[**EXPERIMENTAL**: Detect memory leaks in tests.]'
  '--detectOpenHandles[print out remaining open handles preventing Jest]'
  '--env[the test environment used for all tests. This]'
  '--errorOnDeprecated[make calling deprecated APIs throw helpful error]'
  {--expand,-e}'[use this flag to show full diffs instead of a]'
  '--filter[path to a module exporting a filtering function.]'
  '--findRelatedTests[find related tests for a list of source files]'
  '--forceExit[force Jest to exit after all tests have]'
  '--globalSetup[the path to a module that runs before All Tests.]'
  '--globalTeardown[the path to a module that runs after All Tests.]'
  '--globals[A JSON string with map of global variables that]'
  '--haste[A JSON string with map of variables for the]'
  '--init[generate a basic configuration file \[boolean\]]'
  '--json[prints the test results in JSON. This mode will]'
  '--lastCommit[run all tests affected by file changes in the]'
  '--listTests[lists all tests Jest will run given the]'
  '--logHeapUsage[logs the heap usage after every test. Useful to]'
  '--mapCoverage[maps code coverage reports against original]'
  '--maxConcurrency[specifies the maximum number of tests that are]'
  {--maxWorkers,-w}'[specifies the maximum number of workers the]'
  '--moduleDirectories[an array of directory names to be searched]'
  '--moduleFileExtensions[an array of file extensions your modules use.]'
  '--moduleNameMapper[A JSON string with a map from regular]'
  '--modulePathIgnorePatterns[an array of regexp pattern strings that are]'
  '--modulePaths[an alternative API to setting the NODE_PATH env]'
  '--noStackTrace[disables stack trace in test results output]'
  '--notify[activates notifications for test results.]'
  '--notifyMode[specifies when notifications will appear for]'
  {--onlyChanged,-o}'[attempts to identify which tests to run based on]'
  {--onlyFailures,-f}'[run tests that failed in the previous execution.]'
  '--outputFile[write test results to a file when the --json]'
  '--passWithNoTests[will not fail if no tests are found (for example]'
  '--preset[A preset that is used as a base for Jests]'
  '--prettierPath[the path to the "prettier" module used for]'
  '--projects[A list of projects that use Jest to run all]'
  '--reporters[A list of custom reporters for the test suite.]'
  '--resetMocks[automatically reset mock state between every]'
  '--resetModules[if enabled, the module registry for every test]'
  '--resolver[A JSON string which allows the use of a custom]'
  '--restoreMocks[automatically restore mock state and]'
  '--rootDir[the root directory that Jest should scan for]'
  '--roots[A list of paths to directories that Jest should]'
  {--runInBand,-i}'[run all tests serially in the current process]'
  '--runTestsByPath[used when provided patterns are exact file]'
  '--runner[allows to use a custom runner instead of Jests]'
  '--setupFiles[A list of paths to modules that run some code]'
  '--setupFilesAfterEnv[A list of paths to modules that run some code]'
  '--showConfig[print your jest config and then exits. \[boolean\]]'
  '--silent[prevent tests from printing messages through the]'
  '--skipFilter[disables the filter provided by --filter. Useful]'
  '--snapshotSerializers[A list of paths to snapshot serializer modules]'
  '--testEnvironment[alias for --env \[string\]]'
  '--testEnvironmentOptions[test environment options that will be passed to]'
  '--testFailureExitCode[exit code of `jest` command if the test run]'
  '--testLocationInResults[add `location` information to the test results]'
  '--testMatch[the glob patterns Jest uses to detect test]'
  {--testNamePattern,-t}'[run only tests with a name that matches the]'
  '--testPathIgnorePatterns[an array of regexp pattern strings that are]'
  '--testPathPattern[A regexp pattern string that is matched against]'
  '--testRegex[A string or array of string regexp patterns that]'
  '--testResultsProcessor[allows the use of a custom results processor.]'
  '--testRunner[allows to specify a custom test runner. The]'
  '--testSequencer[allows to specify a custom test sequencer. The]'
  '--testURL[this option sets the URL for the jsdom]'
  '--timers[setting this value to fake allows the use of]'
  '--transform[A JSON string which maps from regular]'
  '--transformIgnorePatterns[an array of regexp pattern strings that are]'
  '--unmockedModulePathPatterns[an array of regexp pattern strings that are]'
  {--updateSnapshot,-u}'[use this flag to re-record snapshots. Can be]'
  '--useStderr[divert all output to stderr. \[boolean\]]'
  '--verbose[display individual test results with the test]'
  '--watch[watch files for changes and rerun tests related]'
  '--watchAll[watch files for changes and rerun all tests. If]'
  '--watchPathIgnorePatterns[an array of regexp pattern strings that are]'
  '--watchman[whether to use watchman for file crawling.]'
  '*:filename:_files'
)

_arguments -s $arguments
