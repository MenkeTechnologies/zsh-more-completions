#compdef enca

local arguments

arguments=(
  {-g,--guess}'[behave as `enca (just detect encoding by default)]'
  {-c,--auto-convert}'[behave as `enconv (autoconvert by default)]'
  {-d,--details}'[print failure reason when encoding was not recognized]'
  {-e,--enca-name}'[print encas encoding name (passed to converters)]'
  {-f,--human-readable}'[print full (descriptive) encoding name (default)]'
  {-i,--iconv-name}'[print how iconv calls the encoding]'
  {-m,--mime-name}'[print preferred MIME encoding name]'
  {-r,--rfc1345-name}'[print RFC 1345 (or otherwise canonized) encoding name]'
  {-s,--cstocs-name}'[print how cstocs calls the encoding]'
  {-n,--name}'[print required name (enca-name, human-readable, etc.)]'
  {-x,--convert-to}'[convert file to some other encoding ENC]'
  {-L,--language}'[set language of FILEs; obligatory, when cannot be]'
  {-E,--external-converter-program}'[set external converter program name]'
  {-C,--try-converters}'[converters to be tried (associative)]'
  {-p,--with-filename}'[print the file name for each result]'
  {-P,--no-filename}'[suppress the prefixing filename on output]'
  {-V,--verbose}'[increase verbosity level]'
  {-G,--license}'[print full enca license and terminate]'
  '(- * :)'{-h,--help}'[print this help and terminate]'
  {-l,--list}'[print required list (built-in-charsets, converters]'
  {-v,--version}'[print version and build information and terminate]'
  '*:filename:_files'
)

_arguments -s $arguments
