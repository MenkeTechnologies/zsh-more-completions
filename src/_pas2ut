#compdef pas2ut

local arguments

arguments=(
  '--test-protected[also generate tests for protected class members]'
  '--skip-default[skip tests for default visibility members]'
  '--skip-published[skip tests for published members]'
  '--skip-public[skip tests for public members]'
  '--tiopf[tiopf tests (default,bounds,required,notify,maxlen)]'
  '--skip-property-default[generate a default test for each property]'
  '--test-property-bounds[generate a GetBounds test for each property]'
  '--test-property-required[a Required test for each property]'
  '--test-property-notify[generate a notify test for each property]'
  '--test-property-maxlen[generate a maxlen test for each property]'
  '--skip-declaration[do not generate declarations for the tests]'
  '--skip-implementation[do not generate (empty) implementation for the tests]'
  '--skip-fail[skip fail() statement in test implementations]'
  '--skip-unit[do not generate a unit]'
  '--skip-setup[skip TestCase class Setup() method]'
  '--skip-teardown[skip testcase class TearDown() method]'
  '--skip-functions[skip tests for functions/procedures]'
  '--skip-classes[skip tests for classes]'
  '--skip-register[do not generate RegisterTests statement]'
  '--singletestclass[use a single test class]'
  '--skip-methods[skip tests for methods of classes]'
  '--skip-fields[skip tests for fields of classes]'
  '--skip-properties[skip tests for properties of classes]'
  '--testparentname[set the name of the parent class of test classes]'
  '--testunitname[set the name of the generated unit (default is taken from output file name)]'
  '--failmessage[set the message for the Fail() statement]'
  '--unittestclassname[set the global unit test class name]'
  '--prefix[set the prefix for the test names (default is "Test")]'
  '--limit[specify a comma-separated list of global identifiers for which to generate tests.]'
  '--defaultclasstest[specify a comma-separated list of default tests for each class]'
  {--limit,--defaultclasstest}'[be specified multiple times.]'
  '*:filename:_files'
)

_arguments -s $arguments
