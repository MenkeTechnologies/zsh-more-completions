#compdef networksetup

_commands=(
"-listnetworkserviceorder:Display services with corresponding port and device in order they are tried for connecting to a network. An asterisk (*) denotes that a service is disabled."
"-listallnetworkservices:Display list of services. An asterisk (*) denotes that a network service is disabled."
"-listallhardwareports:Display list of hardware ports with corresponding device name and ethernet address."
"-detectnewhardware:Detect new network hardware and create a default network service on the hardware."
"-getmacaddress <hardwareport or device name>:Display ethernet (or Wi-Fi) address for hardwareport or device specified."
"-getcomputername:Display the computer name."
"-setcomputername:Set the computer's name (if valid) to <name>."
"-getinfo:Display IPv4 address, IPv6 address, subnet mask,router address, ethernet address for <networkservice>."
"-setmanual:Set the <networkservice> TCP/IP configuration to manual with IP address set to ip, Subnet Mask set to subnet, and Router address set to router."
"-setdhcp:Set the <networkservice> TCP/IP configuration to DHCP. You can set the DHCP client id to the optional [clientid]. Specify \"Empty\" for [clientid] to clear the DHCP client id."
"-setbootp:Set the <networkservice> TCP/IP configuration to BOOTP."
"-setmanualwithdhcprouter: <networkservice> <ip> Set the <networkservice> TCP/IP configuration to manual with DHCP router with IP address set to ip."
"-getadditionalroutes:Get additional IPv4 routes associated with <networkservice>"
"-setadditionalroutes:Set additional IPv4 routes associated with <networkservice> by specifying one or more [ <dest> <mask> <gateway> ] tuples. Remove additional routes by specifying no arguments."
"-setv4off:Turn IPv4 off on <networkservice>."

"-setv6off:Turn IPv6 off on <networkservice>."
"-setv6automatic:Set the service to get its IPv6 info automatically."

"-setv6LinkLocal:Set the service to use its IPv6 only for link local."

"-setv6manual:Set the service to get its IPv6 info manually. Specify <address> <prefixLength> and <router>."

"-getv6additionalroutes:Get additional IPv6 routes associated with <networkservice>"
"-setv6additionalroutes:Set additional IPv6 routes associated with <networkservice> by specifying one or more [ <dest> <prefixlength> <gateway> ] tuples. Remove additional routes by specifying no arguments. If <gateway> is "", the route is direct to the interface."
"-getdnsservers:Display DNS info for <networkservice>."

"-setdnsservers:Set the <networkservice> DNS servers to <dns1> [dns2] [...]. Any number of dns servers can be specified. Specify \"Empty\" for <dns1> to clear all DNS entries."
"-getsearchdomains:Display Domain Name info for <networkservice>."
"-setsearchdomains:Set the <networkservice> Domain Name servers to <domain1> [domain2] [...]. Any number of Domain Name servers can be specified. Specify \"Empty\" for <domain1> to clear all Domain Name entries."

"-create6to4service:Create a 6 to 4 service with name <newnetworkservicename>"
#Usage: networksetup -set6to4automatic <networkservice> 
#Set the service to get its 6 to 4 info automatically. 

#Usage: networksetup -set6to4manual <networkservice> <relayaddress>
#Set the service to get its 6 to 4 info manually. 
#Specify <relayaddress> for the relay address.

#Usage: networksetup -getftpproxy <networkservice>
#Display FTP proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setftpproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set FTP proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setftpproxystate <networkservice> <on off>
#Set FTP proxy to either <on> or <off>.

#Usage: networksetup -getwebproxy <networkservice>
#Display Web proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setwebproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set Web proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setwebproxystate <networkservice> <on off>
#Set Web proxy to either <on> or <off>.

#Usage: networksetup -getsecurewebproxy <networkservice>
#Display Secure Web proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setsecurewebproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set Secure Web proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setsecurewebproxystate <networkservice> <on off>
#Set SecureWeb proxy to either <on> or <off>.

#Usage: networksetup -getstreamingproxy <networkservice>
#Display Streaming proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setstreamingproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set Streaming proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setstreamingproxystate <networkservice> <on off>
#Set Streaming proxy to either <on> or <off>.

#Usage: networksetup -getgopherproxy <networkservice>
#Display Gopher proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setgopherproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set Gopher proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setgopherproxystate <networkservice> <on off>
#Set Gopher proxy to either <on> or <off>.

#Usage: networksetup -getsocksfirewallproxy <networkservice>
#Display SOCKS Firewall proxy (server, port, enabled value) info for <networkservice>.

#Usage: networksetup -setsocksfirewallproxy <networkservice> <domain> <port number> <authenticated> <username> <password>
#Set SOCKS Firewall proxy for <networkservice> with <domain> and <port number>. Turns proxy on. Optionally, specify <on> or <off> for <authenticated> to enable and disable authenticated proxy support. Specify <username> and <password> if you turn authenticated proxy support on.

#Usage: networksetup -setsocksfirewallproxystate <networkservice> <on off>
#Set SOCKS Firewall proxy to either <on> or <off>.

#Usage: networksetup -getproxybypassdomains <networkservice>
#Display Bypass Domain Names for <networkservice>.

#Usage: networksetup -setproxybypassdomains <networkservice> <domain1> [domain2] [...]
#Set the Bypass Domain Name Servers for <networkservice> to <domain1> [domain2] [...]. Any number of
#Domain Name servers can be specified. Specify "Empty" for <domain1> to clear all
#Domain Name entries.

#Usage: networksetup -getproxyautodiscovery <networkservice>
#Display whether Proxy Auto Discover is on or off for <network service>.

#Usage: networksetup -setproxyautodiscovery <networkservice> <on off>
#Set Proxy Auto Discovery to either <on> or <off>.

#Usage: networksetup -getpassiveftp <networkservice>
#Display whether Passive FTP is on or off for <networkservice>.

#Usage: networksetup -setpassiveftp <networkservice> <on off>
#Set Passive FTP to either <on> or <off>.

#Usage: networksetup -setautoproxyurl <networkservice> <url>
#Set proxy auto-config to url for <networkservice> and enable it.

#Usage: networksetup -getautoproxyurl <networkservice>
#Display proxy auto-config (url, enabled) info for <networkservice>.

#Usage: networksetup -setautoproxystate <networkservice> <on off>
#Set proxy auto-config to either <on> or <off>.

#Usage: networksetup -getairportnetwork <device name>
#Display current Wi-Fi Network for <device name>.

#Usage: networksetup -setairportnetwork <device name> <network> [password]
#Set Wi-Fi Network to <network> for <device name>.
#If a password is included, it gets stored in the keychain.

#Usage: networksetup -getairportpower <device name>
#Display whether Wi-Fi power is on or off for <device name>.

#Usage: networksetup -setairportpower <device name> <on off>
#Set Wi-Fi power for <device name> to either <on> or <off>.

#Usage: networksetup -listpreferredwirelessnetworks <device name>
#List the preferred wireless networks for <device name>.

#Usage: networksetup -addpreferredwirelessnetworkatindex <device name> <network> <index> <security type> [password]
#Add wireless network named <network> to preferred list for <device name> at <index>.
#For security type, use OPEN for none, WPA for WPA Personal, WPAE for WPA Enterprise, 
#WPA2 for WPA2 Personal, WPA2E for WPA2 Enterprise, WEP for plain WEP, and 8021XWEP for 802.1X WEP.
#If a password is included, it gets stored in the keychain.

#Usage: networksetup -removepreferredwirelessnetwork <device name> <network>
#Remove <network> from the preferred wireless network list for <device name>.

#Usage: networksetup -removeallpreferredwirelessnetworks <device name>
#Remove all networks from the preferred wireless network list for <device name>.

#Usage: networksetup -getnetworkserviceenabled <networkservice>
#Display whether a service is on or off (enabled or disabled).

#Usage: networksetup -setnetworkserviceenabled <networkservice> <on off>
#Set <networkservice> to either <on> or <off> (enabled or disabled).

#Usage: networksetup -createnetworkservice <newnetworkservicename> <hardwareport>
#Create a service named <networkservice> on port <hardwareport>. The new service will be enabled by default.

#Usage: networksetup -renamenetworkservice <networkservice> <newnetworkservicename>
#Rename <networkservice> to <newnetworkservicename>.

#Usage: networksetup -duplicatenetworkservice <networkservice> <newnetworkservicename>
#Duplicate <networkservice> and name it with <newnetworkservicename>.

#Usage: networksetup -removenetworkservice <networkservice>
#Remove the service named <networkservice>. Will fail if this is the only service on the hardware port that <networkservice> is on.

#Usage: networksetup -ordernetworkservices <service1> <service2> <service3> <...>
#Order the services in order specified. Use "-listnetworkserviceorder" to view service order.
#Note: use quotes around service names which contain spaces (ie. "Built-in Ethernet").

#Usage: networksetup -setMTUAndMediaAutomatically <hardwareport or device name>
#Set hardwareport or device specified back to automatically setting the MTU and Media.

#Usage: networksetup -getMTU <hardwareport or device name>
#Get the MTU value for hardwareport or device specified.

#Usage: networksetup -setMTU <hardwareport or device name> <value>
#Set MTU for hardwareport or device specified.

#Usage: networksetup -listvalidMTUrange <hardwareport or device name>
#List the valid MTU range for hardwareport or device specified.

#Usage: networksetup -getmedia <hardwareport or device name>
#Show both the current setting for media and the active media on hardwareport or device specified.

#Usage: networksetup -setmedia <hardwareport or device name> <subtype> [option1] [option2] [...]
#Set media for hardwareport or device specified to subtype. Specify optional [option1] and additional options depending on subtype. Any number of valid options can be specified.

#Usage: networksetup -listvalidmedia <hardwareport or device name>
#List valid media options for hardwareport or device name. Enumerates available subtypes and options per subtype.

#Usage: networksetup -createVLAN <VLAN name> <device name> <tag>
#Create a VLAN with name <VLAN name> over device <device name> with unique tag <tag>. A default network service will be created over the VLAN.

#Usage: networksetup -deleteVLAN <VLAN name> <device name> <tag>
#Delete the VLAN with name <VLAN name> over the parent device <device name> with unique tag <tag>. If there are network services running over the VLAN they will be deleted.

#Usage: networksetup -listVLANs
#List the VLANs that have been created.

#Usage: networksetup -listdevicesthatsupportVLAN
#List the devices that support VLANs.

#Usage: networksetup -isBondSupported <device name ie., en0>
#Return YES if the specified device can be added to a bond. NO if it cannot.

#Usage: networksetup -createBond <user defined name> <device name 1> <device name 2> <...>
#Create a new bond and give it the user defined name. Add the specified devices, if any, to the bond.

#Usage: networksetup -deleteBond <bond name ie., bond0>
#Delete the bond with the specified device-name.

#Usage: networksetup -addDeviceToBond <device name> <bond name> 
#Add the specified device to the specified bond.

#Usage: networksetup -removeDeviceFromBond <device name> <bond name>
#Remove the specified device from the specified bond

#Usage: networksetup -listBonds
#List all of the bonds.

#Usage: networksetup -showBondStatus <bond name ie., bond0>
#Display the status of the specified bond.

#Usage: networksetup -listpppoeservices
#List all of the PPPoE services in the current set.

#Usage: networksetup -showpppoestatus <service name ie., MyPPPoEService>
#Display the status of the specified PPPoE service.

#Usage: networksetup -createpppoeservice <device name ie., en0> <service name> <account name> <password> [pppoe service name]
#Create a PPPoE service on the specified device with the service name specified.
#The "pppoe service name" is optional and may not be supported by the service provider.

#Usage: networksetup -deletepppoeservice <service name>
#Delete the PPPoE service.

#Usage: networksetup -setpppoeaccountname <service name> <account name>
#Sets the account name for the specified service.

#Usage: networksetup -setpppoepassword <service name> <password>
#Sets the password stored in the keychain for the specified service.

#Usage: networksetup -connectpppoeservice <service name>
#Connect the PPPoE service.

#Usage: networksetup -disconnectpppoeservice <service name>
#Disconnect the PPPoE service.

#Usage: networksetup -getcurrentlocation
#Display the name of the current location.

#Usage: networksetup -listlocations
#List all of the locations.

#Usage: networksetup -createlocation <location name> [populate]
#Create a new network location with the spcified name.
#If the optional term "populate" is included, the location will be populated with the default services.

#Usage: networksetup -deletelocation <location name>
#Delete the location.

#Usage: networksetup -switchtolocation <location name>
#Make the specified location the current location.

#Usage: networksetup -listalluserprofiles
#Display the names of all of the user profiles.

#Usage: networksetup -listloginprofiles <service name>
#Display the names of the loginwindow profiles for the specified service.

#Usage: networksetup -enablesystemprofile <service name> <on off>
#Enables or disables the system profile for the specified service.

#Usage: networksetup -enableloginprofile <service name> <profile name> <on off>
#Enables or disables the specified loginwindow profile for the specified service.

#Usage: networksetup -enableuserprofile <profile name> <on off>
#Enables or disables the specified user profile.

#Usage: networksetup -import8021xProfiles <service name> <file path>
#Imports the 802.1x profiles for the specified service.

#Usage: networksetup -export8021xProfiles <service name> <file path> <include keychain items: yes no>
#Exports all of the profiles for the specified service.
#If the last parameter is yes, it will include the items from the keychain.

#Usage: networksetup -export8021xUserProfiles <file path> <include keychain items: yes no>
#Exports only the user profiles.

#If the last parameter is yes, it will include the items from the keychain.

#Usage: networksetup -export8021xLoginProfiles <service name> <file path> <include keychain items: yes no>
#Exports only the loginwindow profiles for the specified service.

#If the last parameter is yes, it will include the items from the keychain.

#Usage: networksetup -export8021xSystemProfile <service name> <file path> <include keychain items: yes no>
#Exports only the system profile for the specified service.

#If the last parameter is yes, it will include the items from the keychain.

#Usage: networksetup -settlsidentityonsystemprofile <service name> <file path> <passphrase>
#Sets the TLS identity on the system profile for the specified service.

#The identity must be a pkcs12 file.

#Usage: networksetup -settlsidentityonuserprofile <profile name> <file path> <passphrase>
#Sets the TLS identity on the specified user profile.

#The identity must be a pkcs12 file.

#Usage: networksetup -deletesystemprofile <service name> 
#Deletes the system profile for the specified service.

"-deleteloginprofile:Deletes the specified loginwindow profile for the specified service."

"-deleteuserprofile:Deletes the specified user profile."

"-version:Display version of networksetup tool."

"-help:Display these help listings."

"-printcommands:Displays a quick listing of commands (without explanations)."

)

#_arguments '*:: :->subcmds' && return 0

if (( CURRENT == 2 ));then
    _describe -t commands "subcommands" _commands
fi

