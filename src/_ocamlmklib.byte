#compdef ocamlmklib.byte

local arguments

arguments=(
  '-cclib[C library passed to ocamlc -a or ocamlopt -a only]'
  '-ccopt[C option passed to ocamlc -a or ocamlopt -a only]'
  '-custom[disable dynamic loading]'
  '-g[build with debug information]'
  '-dllpath[add <dir> to the run-time search path for DLLs]'
  '-F[Specify a framework directory (MacOSX)]:dir:'
  '-framework[use framework <name> (MacOSX)]'
  '-help[print this help message and exit]'
  '--help[same as -help]'
  '-h[same as -help]'
  '-I[add <dir> to the path searched for OCaml object files]'
  '-failsafe[fall back to static linking if DLL construction failed]'
  '-ldopt[C option passed to the shared linker only]'
  '-linkall[build OCaml archive with link-all behavior]'
  '-l[Specify a dependent C library]:lib:'
  '-L[Add <dir> to the path searched for C libraries]:dir:'
  '-ocamlc[use <cmd> in place of "ocamlc"]'
  '-ocamlcflags[pass <opt> to ocamlc]'
  '-ocamlopt[use <cmd> in place of "ocamlopt"]'
  '-ocamloptflags[pass <opt> to ocamlopt]'
  '-o[generated OCaml library is named <name>.cma or <name>.cmxa]'
  '-oc[generated C library is named dll<name>.so or lib<name>.a]'
  '-rpath[same as -dllpath <dir>]'
  '-R[Same as -rpath]:dir:'
  '-verbose[print commands before executing them]'
  '-v[same as -verbose]'
  '-version[print version and exit]'
  '-vnum[print version number and exit]'
  {-Wl,-rpath}'[Same as -dllpath <dir>]:dir:'
  {-Wl,-rpath,-Wl}'[Same as -dllpath <dir>]:dir:'
  {-Wl,-R}'[Same as -dllpath <dir>]:dir:'
  '*:filename:_files'
)

_arguments -s $arguments
