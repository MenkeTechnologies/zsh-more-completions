#compdef snort

local arguments

arguments=(
  '-A[set alert mode: fast, full, console, test or none (alert file alerts only)]'
  '-b[log packets in tcpdump format (much faster!)]'
  '-B[obfuscated IP addresses in alerts and packet dumps using CIDR mask]'
  '-c[use Rules File <rules>]'
  '-C[print out payloads with character data only (no hex)]'
  '-d[dump the Application Layer]'
  '-D[run Snort in background (daemon) mode]'
  '-e[display the second layer header info]'
  '-f[turn off fflush() calls after binary log writes]'
  '-F[read BPF filters from file <bpf>]'
  '-g[run snort gid as <gname> group (or gid) after initialization]'
  '-G[0xid> Log Identifier (to uniquely id events for multiple snorts)]'
  '-h[set home network = <hn>]'
  '-H[make hash tables deterministic.]'
  '-i[listen on interface <if>]'
  '-I[add Interface name to alert output]'
  '-k[checksum mode (all,noip,notcp,noudp,noicmp,none)]'
  '-K[logging mode (pcap\[default\],ascii,none)]'
  '-l[log to directory <ld>]'
  '-L[log to this tcpdump file]'
  '-M[log messages to syslog (not alerts)]'
  '-m[set umask = <umask>]'
  '-n[exit after receiving <cnt> packets]'
  '-N[turn off logging (alerts still work)]'
  '-O[obfuscate the logged IP addresses]'
  '-p[disable promiscuous mode sniffing]'
  '-P[set explicit snaplen of packet (default: 1514)]'
  '-q[quiet. Dont show banner and status report]'
  '-Q[enable inline mode operation.]'
  '-r[read and process tcpdump file <tf>]'
  '-R[include id in snort_intf<id>.pid file name]'
  '-s[log alert messages to syslog]'
  '-S[v> Set rules file variable n equal to value v]'
  '-t[chroots process to <dir> after initialization]'
  '-T[test and report on the current Snort configuration]'
  '-u[run snort uid as <uname> user (or uid) after initialization]'
  '-U[use UTC for timestamps]'
  '-v[be verbose]'
  '-V[show version number]'
  '-X[dump the raw packet data starting at the link layer]'
  '-x[exit if Snort configuration problems occur]'
  '-y[include year in timestamp in the alert and log files]'
  '-Z[set the performonitor preprocessor file path and name]'
  '--logid[0xid> Same as -G]'
  '--perfmon-file[same as -Z]'
  '--pid-path[specify the directory for the Snort PID file]'
  '--snaplen[same as -P]'
  '--help[same as -\?]'
  '--version[same as -V]'
  '--alert-before-pass[process alert, drop, sdrop, or reject before pass, default is pass before alert, drop,...]'
  '--treat-drop-as-alert[converts drop, sdrop, and reject rules into alert rules during startup]'
  '--treat-drop-as-ignore[use drop, sdrop, and reject rules to ignore session traffic when not inline.]'
  '--process-all-events[process all queued events (drop, alert,...), default stops after 1st action group]'
  '--enable-inline-test[enable Inline-Test Mode Operation]'
  '--dynamic-engine-lib[load a dynamic detection engine]'
  '--dynamic-engine-lib-dir[load all dynamic engines from directory]'
  '--dynamic-detection-lib[load a dynamic rules library]'
  '--dynamic-detection-lib-dir[load all dynamic rules libraries from directory]'
  '--dump-dynamic-rules[creates stub rule files of all loaded rules l ,,_ -*> Snort! <*-]'
  '--dynamic-preprocessor-lib[load a dynamic preprocessor library]'
  '--dynamic-preprocessor-lib-dir[load all dynamic preprocessor libraries from directory]'
  '--dynamic-output-lib[load a dynamic output library]'
  '--dynamic-output-lib-dir[load all dynamic output libraries from directory]'
  '--create-pidfile[create PID file, even when not in Daemon mode]'
  '--nolock-pidfile[do not try to lock Snort PID file]'
  '--no-interface-pidfile[do not include the interface name in Snort PID file]'
  '--disable-attribute-reload-thread[not create a thread to reload the attribute table]'
  '--pcap-single[same as -r.]'
  '--pcap-file[file that contains a list of pcaps to read - read mode is implied.]'
  '--pcap-list[" a space separated list of pcaps to read - read mode is implied.]'
  '--pcap-dir[a directory to recurse to look for pcaps - read mode is implied.]'
  '--pcap-filter[filter to apply when getting pcaps from file or directory.]'
  '--pcap-no-filter[reset to use no filter when getting pcaps from file or directory.]'
  '--pcap-loop[this option will read the pcaps specified on command line continuously.]'
  '--pcap-reset[if reading multiple pcaps, reset snort to post-configuration state before reading next pcap.]'
  '--pcap-reload[if reading multiple pcaps, reload snort config between pcaps.]'
  '--pcap-show[print a line saying what pcap is currently being read.]'
  '--exit-check[signal termination after <count> callbacks from DAQ_Acquire(), showing the time it]'
  '--conf-error-out[same as -x]'
  '--enable-mpls-multicast[allow multicast MPLS]'
  '--enable-mpls-overlapping-ip[handle overlapping IPs within MPLS clouds]'
  '--max-mpls-labelchain-len[specify the max MPLS label chain]'
  '--mpls-payload-type[specify the protocol (ipv4, ipv6, ethernet) that is encapsulated by MPLS]'
  '--require-rule-sid[require that all snort rules have SID specified.]'
  '--daq[select packet acquisition module (default is pcap).]'
  '--daq-mode[select the DAQ operating mode.]'
  '--daq-var[value> Specify extra DAQ configuration variable.]'
  '--daq-dir[tell snort where to find desired DAQ.]'
  '--daq-list[list packet acquisition modules available in dir. Default is static modules only.]'
  '--dirty-pig[dont flush packets and release memory on shutdown.]'
  '--cs-dir[directory to use for control socket.]'
  '--ha-peer[activate live high-availability state sharing with peer.]'
  '--ha-out[write high-availability events to this file.]'
  '--ha-in[read high-availability events from this file on startup (warm-start).]'
  '--suppress-config-log[suppress configuration information output.]'
  '*:filename:_files'
)

_arguments -s $arguments
