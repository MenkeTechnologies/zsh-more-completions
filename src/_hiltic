#compdef hiltic

local arguments

arguments=(
  {-c,--output-c}'[++               Print out all generated C++ code (including linker glue by default).]'
  {-d,--debug}'[include debug instrumentation into generated code.]'
  {-e,--output-all-dependencies}'[output list of dependencies for all compiled modules.]'
  {-g,--disable-optimizations}'[disable HILTI-side optimizations of the generated code.]'
  {-j,--jit-code}'[fully compile all code, and then execute it unless --output-to gives a file to store it]'
  {-l,--output-linker}'[print out only generated HILTI linker glue code.]'
  {-o,--output-to}'[path for saving output.]'
  {-p,--output-hilti}'[just output parsed HILTI code again.]'
  {-v,--version}'[print version information.]'
  {-A,--abort-on-exceptions}'[when executing compiled code, abort() instead of throwing HILTI exceptions.]'
  {-B,--show-backtraces}'[include backtraces when reporting unhandled exceptions.]'
  {-C,--dump-code}'[dump all generated code to disk for debugging.]'
  {-D,--compiler-debug}'[activate compile-time debugging output for given debug streams (comma-separated; help for list).]'
  {-E,--output-code-dependencies}'[list of dependencies for all compiled modules that require separate compilation of their own.]'
  {-L,--library-path}'[add path to list of directories to search when importing modules.]'
  {-O,--optimize}'[build optimized release version of generated code.]'
  {-P,--output-prototypes}'[output C++ header with prototypes for public functionality.]'
  {-R,--report-times}'[report a break-down of compilers execution time.]'
  {-S,--skip-dependencies}'[do not automatically compile dependencies during JIT.]'
  {-T,--keep-tmps}'[do not delete any temporary files created.]'
  {-V,--skip-validation}'[dont validate ASTs (for debugging only).]'
  {-X,--debug-addl}'[implies -d and adds selected additional instrumentation (comma-separated; see help for list).]'
  '*:filename:_files'
)

_arguments -s $arguments
