#compdef gunicorn

local arguments

arguments=(
  {-h,--help}'[show this help message and exit]'
  {-v,--version}'[show programs version number and exit]'
  {-c,--config}'[the Gunicorn config file. \[./gunicorn.conf.py\]]'
  {-b,--bind}'[the socket to bind. \[\[127.0.0.1:8000\]\]]'
  '--backlog[the maximum number of pending connections. \[2048\]]'
  {-w,--workers}'[the number of worker processes for handling requests.]'
  {-k,--worker-class}'[the type of workers to use. \[sync\]]'
  '--threads[the number of worker threads for handling requests.]'
  '--worker-connections[the maximum number of simultaneous clients. \[1000\]]'
  '--max-requests[the maximum number of requests a worker will process]'
  '--max-requests-jitter[the maximum jitter to add to the *max_requests*]'
  {-t,--timeout}'[workers silent for more than this many seconds are]'
  '--graceful-timeout[timeout for graceful workers restart. \[30\]]'
  '--keep-alive[the number of seconds to wait for requests on a Keep-]'
  '--limit-request-line[the maximum size of HTTP request line in bytes. \[4094\]]'
  '--limit-request-fields[limit the number of HTTP headers fields in a request.]'
  '--limit-request-field[_size INT]'
  '--reload[restart workers when code changes. \[False\]]'
  '--reload-engine[the implementation that should be used to power]'
  '--reload-extra-file[extends :ref:`reload` option to also watch and reload]'
  '--spew[install a trace function that spews every line]'
  '--check-config[check the configuration and exit. The exit status is 0]'
  '--print-config[print the configuration settings as fully resolved.]'
  '--preload[load application code before the worker processes are]'
  '--no-sendfile[disables the use of ``sendfile()``. \[None\]]'
  '--reuse-port[set the ``SO_REUSEPORT`` flag on the listening socket.]'
  '--chdir[change directory to specified directory before loading]'
  {-D,--daemon}'[daemonize the Gunicorn process. \[False\]]'
  {-e,--env}'[set environment variables in the execution]'
  {-p,--pid}'[A filename to use for the PID file. \[None\]]'
  '--worker-tmp-dir[A directory to use for the worker heartbeat temporary]'
  {-u,--user}'[switch worker processes to run as this user. \[501\]]'
  {-g,--group}'[switch worker process to run as this group. \[20\]]'
  {-m,--umask}'[A bit mask for the file mode on files written by]'
  '--initgroups[if true, set the worker processs group access list]'
  '--forwarded-allow-ips[front-ends IPs from which allowed to handle set]'
  '--access-logfile[the Access log file to write to. \[None\]]'
  '--disable-redirect-access-to-syslog[disable redirect access logs to syslog. \[False\]]'
  '--access-logformat[the access log format. \[%(h)s %(l)s %(u)s %(t)s]'
  {--error-logfile,--log-file}'[the Error log file to write to. \[-\]]'
  '--log-level[the granularity of Error log outputs. \[info\]]'
  '--capture-output[redirect stdout/stderr to specified file in]'
  '--logger-class[the logger you want to use to log events in Gunicorn.]'
  '--log-config[the log config file to use. \[None\]]'
  '--log-syslog-to[address to send syslog messages.]'
  '--log-syslog[send *Gunicorn* logs to syslog. \[False\]]'
  '--log-syslog-prefix[makes Gunicorn use the parameter as program-name in]'
  '--log-syslog-facility[syslog facility name \[user\]]'
  {-R,--enable-stdio-inheritance}'[enable stdio inheritance. \[False\]]'
  '--statsd-host[``host:port`` of the statsd server to log to. \[None\]]'
  '--dogstatsd-tags[A comma-delimited list of datadog statsd (dogstatsd)]'
  '--statsd-prefix[prefix to use when emitting statsd metrics (a trailing]'
  {-n,--name}'[A base to use with setproctitle for process naming.]'
  '--pythonpath[A comma-separated list of directories to add to the]'
  {--paste,--paster}'[load a PasteDeploy config file. The argument may]'
  '--proxy-protocol[enable detect PROXY protocol (PROXY mode). \[False\]]'
  '--proxy-allow-from[front-ends IPs from which allowed accept proxy]'
  '--keyfile[SSL key file \[None\]]'
  '--certfile[SSL certificate file \[None\]]'
  '--ssl-version[SSL version to use. \[_SSLMethod.PROTOCOL_TLS\]]'
  '--cert-reqs[whether client certificate is required (see stdlib ssl]'
  '--ca-certs[CA certificates file \[None\]]'
  '--suppress-ragged-eofs[suppress ragged EOFs (see stdlib ssl modules) \[True\]]'
  '--do-handshake-on-connect[whether to perform SSL handshake on socket connect]'
  '--ciphers[SSL Cipher suite to use, in the format of an OpenSSL]'
  '--paste-global[set a PasteDeploy global config variable in]'
  '--strip-header-spaces[strip spaces present between the header name and the]'
  '*:filename:_files'
)

_arguments -s $arguments
