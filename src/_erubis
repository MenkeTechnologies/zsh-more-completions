#compdef erubis

local arguments

arguments=(
  '(- * :)'{-h,--help}'[help]'
  '-v[version]'
  '-x[show converted code]'
  '-X[show converted code, only ruby code and no text part]'
  '-N[numbering: add line numbers (for -x/-X)]'
  '-U[unique: compress empty lines to a line (for -x/-X)]'
  '-C[compact: remove empty lines (for -x/-X)]'
  '-b[body only: no preamble nor postamble (for -x/-X)]'
  '-z[syntax checking]'
  '-e[escape (equal to --E Escape)]'
  '-p[embedded pattern (default <% %>)]'
  '-l[convert but no execute (ruby/php/c/cpp/java/scheme/perl/js)]'
  '-E[1,e2,... : enhancer names (Escape, PercentLine, BiPattern, ...)]'
  '-I[library include path]'
  '-K[kanji code (euc/sjis/utf8) (default none)]'
  '-c[context data string (yaml inline style or ruby code)]'
  '-f[context data file (*.yaml, *.yml, or *.rb)]'
  '-T[dont expand tab characters in YAML file]'
  '-S[convert mapping key from string to symbol in YAML file]'
  '-B[invoke result(binding) instead of evaluate(context)]'
  '--pi[parse <?name ... ?> instead of <% ... %>]'
  '--escapefunc[escape function name]'
  '--pattern[% %>" : embed pattern]'
  '--trim[trim spaces around <% ... %>]'
  '--preamble[preamble (no preamble when false)]'
  '--postamble[postamble (no postamble when false)]'
  '--escape[escape expression or not in default]'
  '--pi[" : PI (Processing Instrunctions) name]'
  '--embchar[@" : char for embedded expression pattern(@{...}@)]'
  '--indent[" : indent spaces (ex. )]'
  '--out[" : output file pointer name]'
  '--indent[" : indent spaces (ex. )]'
  '--bufvar[" : buffer variable name]'
  '--indent[" : indent spaces (ex. )]'
  '--bufvar[" : output buffer variable name]'
  '--bufclass[" : output buffer class (ex. StringBuilder)]'
  '--func[" : function name (ex. display)]'
  '--func[" : function name]'
  '--docwrite[use document.write() when true]'
  '*:filename:_files'
)

_arguments -s $arguments
