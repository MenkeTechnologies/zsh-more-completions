#compdef swift-frontend

local arguments

arguments=(
  '-dump-ast[parse and type-check input file(s) and dump AST(s)]'
  '-dump-parse[parse input file(s) and dump AST(s)]'
  '-dump-pcm[dump debugging information about a precompiled Clang module]'
  '-dump-scope-maps[parse and type-check input file(s) and dump the scope map(s)]'
  '-dump-type-info[output YAML dump of fixed-size types from all imported modules]'
  '-dump-type-refinement-contexts[type-check input file(s) and dump type refinement contexts(s)]'
  '-emit-assembly[emit assembly file(s) (-S)]'
  '-emit-bc[emit LLVM BC file(s)]'
  '-emit-imported-modules[a list of the imported modules]'
  '-emit-irgen[emit LLVM IR file(s) before LLVM optimizations]'
  '-emit-ir[emit LLVM IR file(s) after LLVM optimizations]'
  '-emit-object[emit object file(s) (-c)]'
  '-emit-pcm[emit a precompiled Clang module from a module map]'
  '-emit-sibgen[emit serialized AST + raw SIL file(s)]'
  '-emit-sib[emit serialized AST + canonical SIL file(s)]'
  '-emit-silgen[emit raw SIL file(s)]'
  '-emit-sil[emit canonical SIL file(s)]'
  '-emit-supported-features[emit a JSON file including all supported compiler features]'
  '-merge-modules[merge the input modules without otherwise processing them]'
  '-parse[parse input file(s)]'
  '-print-ast[parse and type-check input file(s) and pretty print AST(s)]'
  '-resolve-imports[parse and resolve imports in input file(s)]'
  '-scan-dependencies[scan dependencies of the given Swift sources]'
  '-typecheck[parse and type-check input file(s)]'
  '-access-notes-path[specify YAML file to override attributes on Swift declarations in this module]'
  '-api-diff-data-dir[load platform and version specific API migration data files from <path>. Ignored if -api-diff-data-file is specified.]'
  '-api-diff-data-file[API migration data is from <path>]'
  '-application-extension[restrict code to those available for App Extensions]'
  '-assert-config[specify the assert_configuration replacement. Possible values are Debug, Release, Unchecked, DisableReplacement.]'
  '-autolink-library[add dependent library]'
  '-batch-scan-input-file[specify a JSON file containing modules to perform batch dependencies scanning]'
  '-clang-target[separately set the target we should use for internal Clang instance]'
  '-color-diagnostics[print diagnostics in color]'
  '-continue-building-after-errors[continue building, even after errors are encountered]'
  '-coverage-prefix-map[replacement>]'
  '-crosscheck-unqualified-lookup[compare legacy DeclContext- to ASTScope-based unqualified name lookup (for debugging)]'
  '-debug-info-format[specify the debug info format type to either dwarf or codeview]'
  '-debug-info-store-invocation[emit the compiler invocation in the debug info.]'
  '-debug-prefix-map[replacement>]'
  '-define-availability[define an availability macro in the format macroName : iOS 13.0, macOS 10.15]'
  '-dependency-scan-cache-path[the path to output the dependency scanners internal state.]'
  '-diagnostic-documentation-path[path to diagnostic documentation resources]'
  '-diagnostic-style[the formatting style used when printing diagnostics (swift or llvm)]'
  '-disable-actor-data-race-checks[disable runtime checks for actor data races]'
  '-disable-autolinking-runtime-compatibility-concurrency[do not use autolinking for the concurrency runtime compatibility library]'
  '-disable-autolinking-runtime-compatibility-dynamic-replacements[do not use autolinking for the dynamic replacement runtime compatibility library]'
  '-disable-autolinking-runtime-compatibility[do not use autolinking for runtime compatibility libraries]'
  '-disable-copy-propagation[dont run SIL copy propagation to preserve object lifetime.]'
  '-disable-cross-import-overlays[do not automatically import declared cross-import overlays.]'
  '-disable-fuzzy-forward-scan-trailing-closure-matching[disable fuzzy forward-scan trailing closure matching]'
  '-disable-implicit-swift-modules[disable building Swift modules implicitly by the compiler]'
  '-disable-incremental-imports[disable cross-module incremental build metadata and driver scheduling for Swift modules]'
  '-disable-infer-public-sendable[disable inference of Sendable conformances for public structs and enums]'
  '-disable-migrator-fixits[disable the Migrator phase which automatically applies fix-its]'
  '-disable-target-os-checking[disable checking the target OS of serialized modules]'
  '-disable-testable-attr-requires-testable-module[disable checking of @testable]'
  '-disable-typo-correction[disable typo correction]'
  '-dump-migration-states-dir[dump the input text, output text, and states for migration to <path>]'
  '-dump-usr[dump USR for each declaration reference]'
  '-D[marks a conditional compilation flag as true]'
  '-embed-bitcode-marker[embed placeholder LLVM IR data as a marker]'
  '-embed-bitcode[embed LLVM IR bitcode as data]'
  '-embed-tbd-for-module[embed symbols from the module in the emitted tbd file]'
  '-emit-abi-descriptor-path[output the ABI descriptor of current module to <path>]'
  '-emit-dependencies-path[output basic Make-compatible dependencies file to <path>]'
  '-emit-dependencies[emit basic Make-compatible dependencies files]'
  '-emit-fixits-path[output compiler fixits as source edits to <path>]'
  '-emit-loaded-module-trace-path[emit the loaded module trace JSON to <path>]'
  '-emit-loaded-module-trace[emit a JSON file containing information about what modules were loaded]'
  '-emit-migrated-file-path[emit the migrated source file to <path>]'
  '-emit-module-doc-path[output module documentation file <path>]'
  '-emit-module-doc[emit a module documentation file based on documentation comments]'
  '-emit-module-interface-path[output module interface file to <path>]'
  '-emit-module-path[emit an importable module to <path>]'
  '-emit-module-source-info-path[output module source info file to <path>]'
  '-emit-module-source-info[output module source info file]'
  '-emit-module-summary-path[output module summary file to <path>]'
  '-emit-module[emit an importable module]'
  '-emit-objc-header-path[emit an Objective-C header file to <path>]'
  '-emit-objc-header[emit an Objective-C header file]'
  '-emit-reference-dependencies-path[output Swift-style dependencies file to <path>]'
  '-emit-reference-dependencies[emit a Swift-style dependencies file]'
  '-emit-remap-file-path[emit the replacement map describing Swift Migrator changes to <path>]'
  '-emit-tbd-path[emit the TBD file to <path>]'
  '-emit-tbd[emit a TBD file]'
  '-enable-actor-data-race-checks[emit runtime checks for actor data races]'
  '-enable-copy-propagation[run SIL copy propagation to shorten object lifetime.]'
  '-enable-cross-import-overlays[automatically import declared cross-import overlays.]'
  '-enable-experimental-additive-arithmetic-derivation[enable experimental AdditiveArithmetic derived conformances]'
  '-enable-experimental-concise-pound-file[enable experimental concise #file identifier]'
  '-enable-experimental-forward-mode-differentiation[enable experimental forward mode differentiation]'
  '-enable-fuzzy-forward-scan-trailing-closure-matching[enable fuzzy forward-scan trailing closure matching]'
  '-enable-incremental-imports[enable cross-module incremental build metadata and driver scheduling for Swift modules]'
  '-enable-infer-public-sendable[enable inference of Sendable conformances for public structs and enums]'
  '-enable-library-evolution[build the module to allow binary-compatible library evolution]'
  '-enable-swiftcall[enable the use of LLVM swiftcall support]'
  '-enable-target-os-checking[enable checking the target OS of serialized modules]'
  '-enable-testable-attr-requires-testable-module[enable checking of @testable]'
  '-enforce-exclusivity[enforce law of exclusivity]'
  '-explicit-swift-module-map-file[specify a JSON file containing information of explict Swift modules]'
  '-filelist[specify source inputs in a file rather than on the command line]'
  '-fixit-all[apply all fixits from diagnostics without any filtering]'
  '-framework[specifies a framework which should be linked against]'
  '-frontend-parseable-output[emit textual output in a parseable format]'
  '-Fsystem[add directory to system framework search path]'
  '-F[add directory to framework search path]'
  '-gdwarf-types[emit full DWARF type info.]'
  '-gline-tables-only[emit minimal debug info for backtraces only]'
  '-gnone[dont emit debug info]'
  '-g[emit debug info. This is the preferred setting for debugging with LLDB.]'
  '-help[display available options]'
  '-ignore-module-source-info[avoid getting source location from .swiftsourceinfo files]'
  '-import-prescan[when performing a dependency scan, only dentify all imports of the main Swift module sources]'
  '-import-underlying-module[implicitly imports the Objective-C half of a module]'
  '-index-store-path[store indexing data to <path>]'
  '-index-unit-output-path[use <path> as the output path in the produced index data.]'
  '-I[add directory to the import search path]'
  '-load-dependency-scan-cache[after performing a dependency scan, serialize the scanners internal state.]'
  '-locale[choose a language for diagnostic messages]'
  '-localization-path[path to localized diagnostic messages directory]'
  '-lto[specify the LTO type to either llvm-thin or llvm-full]'
  '-L[add directory to library link search path]'
  '-l[<value>               Specifies a library which should be linked against]'
  '-migrate-keep-objc-visibility[when migrating, add @objc to declarations that wouldve been implicitly visible in Swift 3]'
  '-migrator-update-sdk[does nothing. Temporary compatibility flag for Xcode.]'
  '-migrator-update-swift[does nothing. Temporary compatibility flag for Xcode.]'
  '-module-abi-name[ABI name to use for the contents of this module]'
  '-module-cache-path[specifies the Clang module cache path]'
  '-module-link-name[library to link against when using this module]'
  '-module-name[name of the module to build]'
  '-no-color-diagnostics[do not print diagnostics in color]'
  '-no-serialize-debugging-options[never serialize options for debugging (default: only for apps)]'
  '-no-warnings-as-errors[dont treat warnings as errors]'
  '-no-whole-module-optimization[disable optimizing input files together instead of individually]'
  '-nostdimport[dont search the standard library import path for modules]'
  '-num-threads[enable multi-threading and specify number of threads]'
  '-Onone[compile without any optimization]'
  '-Osize[compile with optimizations and target small code size]'
  '-Ounchecked[compile with optimizations and remove runtime safety checks]'
  '-output-filelist[specify outputs in a file rather than on the command line]'
  '-O[compile with optimizations]'
  '-o[write output to <file>]'
  '-parse-as-library[parse the input file(s) as libraries, not scripts]'
  '-parse-sil[parse the input file as SIL code, not Swift source]'
  '-placeholder-dependency-module-map-file[specify a JSON file containing information of external Swift module dependencies]'
  '-primary-filelist[specify primary inputs in a file rather than on the command line]'
  '-primary-file[produce output for this file, not the whole module]'
  '-print-clang-stats[print Clang importer statistics]'
  '-print-educational-notes[include educational notes in printed diagnostic output, if available]'
  '-print-target-info[print target information for the given target <triple>, such as x86_64-apple-macos10.9]'
  '-profile-coverage-mapping[generate coverage data for use with profiled execution counts]'
  '-profile-generate[generate instrumented code to collect execution counts]'
  '-profile-use[supply a profdata file to enable profile-guided optimization]'
  '-Rcross-import[emit a remark if a cross-import of a module is triggered.]'
  '-Rdependency-scan-cache[remarks indicating use of the serialized module dependency scanning cache.]'
  '-remove-runtime-asserts[runtime safety checks.]'
  '-require-explicit-availability-target[suggest fix-its adding @available(<target>, *) to public declarations without availability]'
  '-require-explicit-availability[require explicit availability on public declarations]'
  '-Rmodule-loading[emit a remark and file path of each loaded module]'
  '-Rpass-missed[report missed transformations by optimization passes whose name matches the given POSIX regular expression]'
  '-Rpass[report performed transformations by optimization passes whose name matches the given POSIX regular expression]'
  '-runtime-compatibility-version[link compatibility library for Swift runtime version, or none]'
  '-sanitize-coverage[specify the type of coverage instrumentation for Sanitizers and additional options separated by commas]'
  '-sanitize-recover[specify which sanitizer runtime checks (see -sanitize=) will generate instrumentation that allows error recovery. Listed checks should be comma separated. Default behavior is to not allow error recovery.]'
  '-sanitize[turn on runtime checks for erroneous behavior.]'
  '-save-optimization-record-passes[only include passes which match a specified regular expression inthe generated optimization record (by default, include all passes)]'
  '-save-optimization-record-path[specify the file name of any generated optimization record]'
  '-save-optimization-record[generate an optimization record file in a specific format (default: YAML)]'
  '-save-optimization-record[generate a YAML optimization record file]'
  '-sdk[compile against <sdk>]'
  '-serialize-debugging-options[always serialize options for debugging (default: only for apps)]'
  '-serialize-dependency-scan-cache[after performing a dependency scan, serialize the scanners internal state.]'
  '-serialize-diagnostics-path[emit a serialized diagnostics file to <path>]'
  '-serialize-diagnostics[serialize diagnostics in a binary format]'
  '-show-diagnostics-after-fatal[keep emitting subsequent diagnostics after a fatal error]'
  '-static[make this module statically linkable and make the output of -emit-library a static library.]'
  '-supplementary-output-file-map[specify supplementary outputs in a file rather than on the command line]'
  '-suppress-warnings[suppress all warnings]'
  '-swift-isa-ptrauth-mode[mode for staging isa/super signing. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.]'
  '-swift-module-file[specify Swift module explicitly built from textual interface]'
  '-swift-ptrauth-mode[mode for staging pointer authentication. Supported modes are LegacyAndStrip, NewAndStrip and NewAndAuth.]'
  '-swift-version[interpret input according to a specific Swift language version number]'
  '-target-cpu[generate code for a particular CPU variant]'
  '-target-variant[generate zippered code for macCatalyst that can run on the specified variant target triple in addition to the main -target triple]'
  '-target[generate code for the given target <triple>, such as x86_64-apple-macos10.9]'
  '-tbd-compatibility-version[the compatibility_version to use in an emitted TBD file]'
  '-tbd-current-version[the current_version to use in an emitted TBD file]'
  '-tbd-install[_name <path>]'
  '-tbd-is-installapi[if the TBD file should indicate its being generated during InstallAPI]'
  '-tools-directory[look for external executables (ld, clang, binutils) in <directory>]'
  '-track-system-dependencies[track system dependencies while emitting Make-style dependencies]'
  '-use-clang-function-types[use stored Clang function types for computing canonical types.]'
  '-verify-additional-file[verify diagnostics in this file in addition to source files]'
  '-verify-apply-fixes[like -verify, but updates the original source file]'
  '-verify-generic-signatures[verify the generic signatures in the given module]'
  '-verify-ignore-unknown[allow diagnostics for <unknown> location in verify mode]'
  '-verify-syntax-tree[verify that no unknown nodes exist in the libSyntax tree]'
  '-verify[verify diagnostics against expected-{error|warning|note} annotations]'
  '-version[print version information and exit]'
  '-vfsoverlay[add directory to VFS overlay file]'
  '-warn-concurrency[warn about code that is unsafe according to the Swift Concurrency model and will become ill-formed in a future language version]'
  '-warn-implicit-overrides[warn about implicit overrides of protocol members]'
  '-warn-swift3-objc-inference-complete[warn about deprecated @objc inference in Swift 3 for every declaration that will no longer be inferred as @objc in Swift 4]'
  '-warn-swift3-objc-inference-minimal[warn about deprecated @objc inference in Swift 3 based on direct uses of the Objective-C entrypoint]'
  '-warnings-as-errors[treat warnings as errors]'
  '-whole-module-optimization[optimize input files together instead of individually]'
  '-Xcc[pass <arg> to the C/C++/Objective-C compiler]'
  '*:filename:_files'
)

_arguments -s $arguments
