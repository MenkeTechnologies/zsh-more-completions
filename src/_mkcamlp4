#compdef mkcamlp4

local arguments

arguments=(
  '-a[build a library]'
  '-absname[show absolute filenames in error messages]'
  '-annot[save information in <filename>.annot]'
  '-bin-annot[save typedtree in <filename>.cmt]'
  '-c[compile only (do not link)]'
  '-cc[use <command> as the C compiler and linker]'
  '-cclib[pass option <opt> to the C linker]'
  '-ccopt[pass option <opt> to the C compiler and linker]'
  '-color[} Enable or disable colors in compiler messages]'
  '-compat-32[check that generated bytecode can run on 32-bit platforms]'
  '-config[print configuration values and exit]'
  '-custom[link in custom mode]'
  '-dllib[use the dynamically-loaded library <lib>]'
  '-dllpath[add <dir> to the run-time search path for shared libraries]'
  '-dtypes[(deprecated) same as -annot]'
  '-for-pack[generate code that can later be `packed with]'
  '-g[save debugging information]'
  '-i[print inferred interface]'
  '-I[add <dir> to the list of include directories]'
  '-impl[compile <file> as a .ml file]'
  '-intf[compile <file> as a .mli file]'
  '-intf-suffix[suffix for interface files (default: .mli)]'
  '-intf[_suffix <string> (deprecated) same as -intf-suffix]'
  '-keep-docs[keep documentation strings in .cmi files]'
  '-no-keep-docs[do not keep documentation strings in .cmi files (default)]'
  '-keep-locs[keep locations in .cmi files (default)]'
  '-no-keep-locs[do not keep locations in .cmi files]'
  '-labels[use commuting label mode]'
  '-linkall[link all modules, even unused ones]'
  '-make-runtime[build a runtime system with given C objects and libraries]'
  '-make[_runtime (deprecated) same as -make-runtime]'
  '-modern[(deprecated) same as -labels]'
  '-alias-deps[do record dependencies for module aliases]'
  '-no-alias-deps[do not record dependencies for module aliases]'
  '-app-funct[activate applicative functors]'
  '-no-app-funct[deactivate applicative functors]'
  '-no-check-prims[do not check runtime for primitives]'
  '-noassert[do not compile assertion checks]'
  '-noautolink[do not automatically link C libraries specified in .cma files]'
  '-nolabels[ignore non-optional labels in types]'
  '-nostdlib[do not add default directory to the list of include directories]'
  '-o[set output file name to <file>]'
  '-opaque[does not generate cross-module optimization information]'
  '-open[opens the module <module> before typing]'
  '-output-obj[output an object file instead of an executable]'
  '-output-complete-obj[output an object file, including runtime, instead of an executable]'
  '-pack[package the given .cmo files into one .cmo]'
  '-pp[pipe sources through preprocessor <command>]'
  '-ppx[pipe abstract syntax trees through preprocessor <command>]'
  '-plugin[load dynamic plugin <plugin>]'
  '-principal[check principality of type inference]'
  '-no-principal[do not check principality of type inference (default)]'
  '-rectypes[allow arbitrary recursive types]'
  '-no-rectypes[do not allow arbitrary recursive types (default)]'
  '-runtime-variant[use the <str> variant of the run-time system]'
  '-safe-string[make strings immutable (default)]'
  '-short-paths[shorten paths in types]'
  '-strict-sequence[left-hand part of a sequence must have type unit]'
  '-no-strict-sequence[left-hand part of a sequence need not have type unit (default)]'
  '-strict-formats[reject invalid formats accepted by legacy implementations]'
  '-no-strict-formats[accept invalid formats accepted by legacy implementations (default)]'
  '-thread[(deprecated) same as -I +threads]'
  '-unboxed-types[unannotated unboxable types will be unboxed]'
  '-no-unboxed-types[unannotated unboxable types will not be unboxed (default)]'
  '-unsafe[do not compile bounds checking on array and string access]'
  '-unsafe-string[make strings mutable]'
  '-use-runtime[generate bytecode for the given runtime system]'
  '-use[_runtime <file> (deprecated) same as -use-runtime]'
  '-v[print compiler version and location of standard library and exit]'
  '-verbose[print calls to external commands]'
  '-version[print version and exit]'
  '--version[print version and exit]'
  '-vmthread[generate code that supports the threads library with VM-level]'
  '-vnum[print version number and exit]'
  '-w[enable or disable warnings according to <list>:]'
  '-warn-error[enable or disable error status for warnings according]'
  '-warn-help[show description of warning numbers]'
  '-where[print location of standard library and exit]'
  '-nopervasives[(undocumented)]'
  '-use-prims[(undocumented)]'
  '-dno-unique-ids[(undocumented)]'
  '-dunique-ids[(undocumented)]'
  '-dsource[(undocumented)]'
  '-dparsetree[(undocumented)]'
  '-dtypedtree[(undocumented)]'
  '-drawlambda[(undocumented)]'
  '-dlambda[(undocumented)]'
  '-dinstr[(undocumented)]'
  '-dtimings[print timings information for each pass]'
  '-dprofile[print performance information for each pass]'
  '-args[read additional newline-terminated command line arguments]'
  '-args0[read additional null character terminated command line arguments]'
  '-depend[compute dependencies (use ocamlc -depend -help for details)]'
  '-help[display this list of options]'
  '--help[display this list of options]'
  '*:filename:_files'
)

_arguments -s $arguments
