#compdef firejail

local arguments

arguments=(
  '--allow-debuggers[allow tools such as strace and gdb inside the sandbox.]'
  '--allusers[all user home directories are visible inside the sandbox.]'
  '--apparmor[enable AppArmor confinement.]'
  '--apparmor[.print=name|pid - print apparmor status.]'
  '--appimage[sandbox an AppImage application.]'
  '--audit[audit the sandbox.]'
  '--bandwidth[set bandwidth limits.]'
  '--bind[1,dirname2 - mount-bind dirname1 on top of dirname2.]'
  '--bind[1,filename2 - mount-bind filename1 on top of filename2.]'
  '--blacklist[blacklist directory or file.]'
  '--build[build a whitelisted profile for the application.]'
  '--build[build a whitelisted profile for the application.]'
  '--caps[enable default Linux capabilities filter.]'
  '--caps[.drop=all - drop all capabilities.]'
  '--caps[.drop=capability,capability - blacklist capabilities filter.]'
  '--caps[.keep=capability,capability - whitelist capabilities filter.]'
  '--caps[.print=name|pid - print the caps filter.]'
  '--cgroup[place the sandbox in the specified control group.]'
  '--chroot[chroot into directory.]'
  '--cpu[cpu-number - set cpu affinity.]'
  '--cpu[.print=name|pid - print the cpus in use.]'
  '--debug[print sandbox debug messages.]'
  '--debug-blacklists[debug blacklisting.]'
  '--debug-caps[print all recognized capabilities.]'
  '--debug-errnos[print all recognized error numbers.]'
  '--debug-private-lib[debug for --private-lib option.]'
  '--debug-protocols[print all recognized protocols.]'
  '--debug-syscalls[print all recognized system calls.]'
  '--debug-whitelists[debug whitelisting.]'
  '--defaultgw[configure default gateway.]'
  '--dns[set DNS server.]'
  '--dns[.print=name|pid - print DNS configuration.]'
  '--env[value - set environment variable.]'
  '--fs[.print=name|pid - print the filesystem log.]'
  '--get[filename - get a file from sandbox container.]'
  '--help[-\? - this help screen.]'
  '--hostname[set sandbox hostname.]'
  '--hosts-file[use file as /etc/hosts.]'
  '--ignore[ignore command in profile files.]'
  '--interface[move interface in sandbox.]'
  '--ip[set interface IP address.]'
  '--ip[no IP address and no default gateway are configured.]'
  '--ip6[set interface IPv6 address.]'
  '--iprange[address - configure an IP address in this range.]'
  '--ipc-namespace[enable a new IPC namespace.]'
  '--join[join the sandbox.]'
  '--join-filesystem[join the mount namespace.]'
  '--join-network[join the network namespace.]'
  '--join-or-start[join the sandbox or start a new one.]'
  '--keep-dev-shm[/dev/shm directory is untouched (even with --private-dev).]'
  '--keep-var-tmp[/var/tmp directory is untouched.]'
  '--list[list all sandboxes.]'
  '--ls[dir_or_filename - list files in sandbox container.]'
  '--mac[set interface MAC address.]'
  '--machine-id[preserve /etc/machine-id]'
  '--memory-deny-write-execute[seccomp filter to block attempts to create]'
  '--mtu[set interface MTU.]'
  '--name[set sandbox name.]'
  '--net[enable network namespaces and connect to this bridge.]'
  '--net[enable network namespaces and connect to this]'
  '--net[enable a new, unconnected network namespace.]'
  '--net[.print=name|pid - print network interface configuration.]'
  '--netfilter[arg1,arg2,arg3 ...\] - enable firewall.]'
  '--netfilter[.print=name|pid - print the firewall.]'
  '--netfilter6[enable IPv6 firewall.]'
  '--netfilter6[.print=name|pid - print the IPv6 firewall.]'
  '--netmask[define a network mask when dealing with unconfigured parrent interfaces.]'
  '--netns[Run the program in a named, persistent network namespace.]'
  '--netstats[monitor network statistics.]'
  '--nice[set nice value.]'
  '--no3d[disable 3D hardware acceleration.]'
  '--noblacklist[disable blacklist for file or directory.]'
  '--nodbus[disable D-Bus access.]'
  '--nodvd[disable DVD and audio CD devices.]'
  '--noexec[remount the file or directory noexec nosuid and nodev.]'
  '--nogroups[disable supplementary groups.]'
  '--nonewprivs[sets the NO_NEW_PRIVS prctl.]'
  '--noprofile[do not use a security profile.]'
  '--noroot[install a user namespace with only the current user.]'
  '--nosound[disable sound system.]'
  '--noautopulse[disable automatic ~/.config/pulse init.]'
  '--novideo[disable video devices.]'
  '--nou2f[disable U2F devices.]'
  '--nowhitelist[disable whitelist for file or directory .]'
  '--output[stdout logging and log rotation.]'
  '--output-stderr[stdout and stderr logging and log rotation.]'
  '--overlay[mount a filesystem overlay on top of the current filesystem.]'
  '--overlay-named[mount a filesystem overlay on top of the current]'
  '--overlay-tmpfs[mount a temporary filesystem overlay on top of the]'
  '--overlay-clean[clean all overlays stored in $HOME/.firejail directory.]'
  '--private[temporary home directory.]'
  '--private[use directory as user home.]'
  '--private-cache[temporary ~/.cache directory.]'
  '--private-home[directory - build a new user home in a temporary]'
  '--private-bin[file - build a new /bin in a temporary filesystem]'
  '--private-dev[create a new /dev directory with a small number of]'
  '--private-etc[directory - build a new /etc in a temporary]'
  '--private-tmp[mount a tmpfs on top of /tmp directory.]'
  '--private-opt[directory - build a new /opt in a temporary filesystem.]'
  '--private-srv[directory - build a new /srv in a temporary filesystem.]'
  '--profile[use a custom profile.]'
  '--profile[.print=name|pid - print the name of profile file.]'
  '--profile-path[use this directory to look for profile files.]'
  '--protocol[protocol,protocol - enable protocol filter.]'
  '--protocol[.print=name|pid - print the protocol filter.]'
  '--put[src-filename dest-filename - put a file in sandbox]'
  '--quiet[turn off Firejails output.]'
  '--read-only[set directory or file read-only..]'
  '--read-write[set directory or file read-write.]'
  '--rlimit-as[set the maximum size of the processs virtual memory]'
  '--rlimit-cpu[set the maximum CPU time in seconds.]'
  '--rlimit-fsize[set the maximum file size that can be created]'
  '--rlimit-nofile[set the maximum number of files that can be]'
  '--rlimit-nproc[set the maximum number of processes that can be]'
  '--rlimit-sigpending[set the maximum number of pending signals]'
  '--rmenv[remove environment variable in the new sandbox.]'
  '--scan[ARP-scan all the networks from inside a network namespace.]'
  '--seccomp[enable seccomp filter and apply the default blacklist.]'
  '--seccomp[syscall,syscall - enable seccomp filter, blacklist the]'
  '--seccomp[.block-secondary - build only the native architecture filters.]'
  '--seccomp[.drop=syscall,syscall,syscall - enable seccomp filter, and]'
  '--seccomp[.keep=syscall,syscall,syscall - enable seccomp filter, and]'
  '--seccomp[.print=name|pid - print the seccomp filter for the sandbox]'
  '--shell[run the program directly without a user shell.]'
  '--shell[set default user shell.]'
  '--shutdown[shutdown the sandbox identified by name or PID.]'
  '--timeout[kill the sandbox automatically after the time]'
  '--tmpfs[mount a tmpfs filesystem on directory dirname.]'
  '--top[monitor the most CPU-intensive sandboxes.]'
  '--trace[trace open, access and connect system calls.]'
  '--tracelog[add a syslog message for every access to files or]'
  '--tree[print a tree of all sandboxed processes.]'
  '--tunnel[connect the sandbox to a tunnel created by]'
  '--version[print program version and exit.]'
  '--veth-name[use this name for the interface connected to the bridge.]'
  '--whitelist[whitelist directory or file.]'
  '--writable-etc[/etc directory is mounted read-write.]'
  '--writable-run-user[allow access to /run/user/$UID/systemd and]'
  '--writable-var[/var directory is mounted read-write.]'
  '--writable-var-log[use the real /var/log directory, not a clone.]'
  '--x11[enable X11 sandboxing. The software checks first if Xpra is]'
  '--x11[disable access to X11 sockets.]'
  '--x11[enable Xephyr X11 server. The window size is 800x600.]'
  '--x11[enable X11 security extension.]'
  '--x11[enable Xpra X11 server.]'
  '--x11[enable Xvfb X11 server.]'
  '--xephyr-screen[set screen size for --x11=xephyr.]'
  '*:filename:_files'
)

_arguments -s $arguments
