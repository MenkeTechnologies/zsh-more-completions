#compdef qrencode

local arguments

arguments=(
  '(- * :)'{-h,--help}'[display the help message. -h displays only the help of short]'
  {-o,--output}'[write image to FILENAME. If - is specified, the result]'
  {-r,--read-from}'[read input data from FILENAME.]'
  {-s,--size}'[specify module size in dots (pixels). (default=3)]'
  '-l[}, --level={LMQH}]'
  {-v,--symversion}'[specify the minimum version of the symbol. See SYMBOL VERSIONS]'
  {-m,--margin}'[specify the width of the margins. (default=4 (2 for Micro QR)))]'
  {-d,--dpi}'[specify the DPI of the generated PNG. (default=72)]'
  '-t[PNG32,EPS,SVG,XPM,ANSI,ANSI256,ASCII,ASCIIi,UTF8,ANSIUTF8}]'
  '--type[PNG32,EPS,SVG,XPM,ANSI,ANSI256,ASCII,ASCIIi,UTF8,ANSIUTF8}]'
  {-S,--structured}'[make structured symbols. Version must be specified.]'
  {-k,--kanji}'[assume that the input text contains kanji (shift-jis).]'
  {-c,--casesensitive}'[encode lower-case alphabet characters in 8-bit mode. (default)]'
  {-i,--ignorecase}'[ignore case distinctions and use only upper-case characters.]'
  {-8,--8bit}'[encode entire data in 8-bit mode. -k, -c and -i will be ignored.]'
  '--rle[enable run-length encoding for SVG.]'
  '--svg-path[use single path to draw modules for SVG.]'
  {-M,--micro}'[encode in a Micro QR Code. (experimental)]'
  '--foreground[]'
  '--background[specify foreground/background color in hexadecimal notation.]'
  {-V,--version}'[display the version number and copyrights of the qrencode.]'
  '--verbose[display verbose information to stderr.]'
  '*:filename:_files'
)

_arguments -s $arguments
