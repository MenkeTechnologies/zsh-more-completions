#compdef x86_64-w64-mingw32-as

local arguments

arguments=(
  '-a[...\] turn on listings]'
  '--alternate[initially turn on alternate macro syntax]'
  '--compress-debug-sections[{none|zlib|zlib-gnu|zlib-gabi}\]]'
  '--nocompress-debug-sections[dont compress DWARF debug sections \[default\]]'
  '-D[produce assembler debugging messages]'
  '--debug-prefix-map[NEW]'
  '--defsym[VAL define symbol SYM to given value]'
  '-f[skip whitespace and comment preprocessing]'
  {-g,--gen-debug}'[generate debugging information]'
  '--gstabs[generate STABS debugging information]'
  '--gstabs[+ generate STABS debug info with GNU extensions]'
  '--gdwarf-2[generate DWARF2 debugging information]'
  '--gdwarf-sections[generate per-function section names for DWARF line information]'
  '--hash-size[set the hash table size close to <value>]'
  '--help[show this message and exit]'
  '--target-help[show target specific options]'
  '-I[add DIR to search list for .include directives]'
  '-J[dont warn about signed overflow]'
  '-K[warn when differences altered for long displacements]'
  {-L,--keep-locals}'[keep local symbols (e.g. starting with `L)]'
  {-M,--mri}'[assemble in MRI compatibility mode]'
  '--MD[write dependency information in FILE (default none)]'
  '-nocpp[ignored]'
  '-no-pad-sections[do not pad the end of sections to alignment boundaries]'
  '-o[name the object-file output OBJFILE (default a.out)]'
  '-R[fold data section into text section]'
  '--reduce-memory-overheads[prefer smaller memory use at the cost of longer]'
  '--statistics[print various measured statistics from execution]'
  '--strip-local-absolute[strip local absolute symbols]'
  '--traditional-format[use same format as native assembler when possible]'
  '--version[print assembler version number and exit]'
  {-W,--no-warn}'[suppress warnings]'
  '--warn[dont suppress warnings]'
  '--fatal-warnings[treat warnings as errors]'
  '-w[ignored]'
  '-X[ignored]'
  '-Z[generate object file even after errors]'
  '--listing-lhs-width[set the width in words of the output data column of]'
  '--listing-lhs-width2[set the width in words of the continuation lines]'
  '--listing-rhs-width[set the max width in characters of the lines from]'
  '--listing-cont-lines[set the maximum number of continuation lines used]'
  '-n[do not optimize code alignment]'
  '-q[quieten some warnings]'
  '--32[/--64/--x32 generate 32bit/64bit/x32 code]'
  '--divide[ignored]'
  '-march[+EXTENSION...\]]'
  '-mtune[optimize for CPU, CPU is one of:]'
  '-msse2avx[encode SSE instructions with VEX prefix]'
  '-msse-check[check SSE instructions]'
  '-moperand-check[check operand combinations for validity]'
  '-mavxscalar[128|256\] encode scalar AVX instructions with specific vector]'
  '-mevexlig[128|256|512\] encode scalar EVEX instructions with specific vector]'
  '-mevexwig[0|1\] encode EVEX instructions with specific EVEX.W value]'
  '-mevexrcig[encode EVEX instructions with specific EVEX.RC value]'
  '-mmnemonic[use AT&T/Intel mnemonic]'
  '-msyntax[use AT&T/Intel syntax]'
  '-mindex-reg[support pseudo index registers]'
  '-mnaked-reg[dont require `% prefix for registers]'
  '-madd-bnd-prefix[add BND prefix for all valid branches]'
  '-mshared[disable branch optimization for shared code]'
  '-mbig-obj[generate big object files]'
  '-momit-lock-prefix[strip all lock prefixes]'
  '-mfence-as-lock-add[encode lfence, mfence and sfence as]'
  '-mrelax-relocations[generate relax relocations]'
  '-mamd64[accept only AMD64 ISA]'
  '-mintel64[accept only Intel64 ISA]'
  '*:filename:_files'
)

_arguments -s $arguments
