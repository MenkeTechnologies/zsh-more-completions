#compdef llvm-tblgen-11

local arguments

arguments=(
  '--color[- Use colors in output (default=autodetect)]'
  '-D[name>                    - Name of the macro to be defined]'
  '-I[- Directory of include files]'
  '-d[- Dependency filename]'
  '--print-records[- Print all records to stdout (default)]'
  '--dump-json[- Dump all records as machine-readable JSON]'
  '--gen-emitter[- Generate machine code emitter]'
  '--gen-register-info[- Generate registers and register classes info]'
  '--gen-instr-info[- Generate instruction descriptions]'
  '--gen-instr-docs[- Generate instruction documentation]'
  '--gen-callingconv[- Generate calling convention descriptions]'
  '--gen-asm-writer[- Generate assembly writer]'
  '--gen-disassembler[- Generate disassembler]'
  '--gen-pseudo-lowering[- Generate pseudo instruction lowering]'
  '--gen-compress-inst-emitter[- Generate RISCV compressed instructions.]'
  '--gen-asm-matcher[- Generate assembly instruction matcher]'
  '--gen-dag-isel[- Generate a DAG instruction selector]'
  '--gen-dfa-packetizer[- Generate DFA Packetizer for VLIW targets]'
  '--gen-fast-isel[- Generate a "fast" instruction selector]'
  '--gen-subtarget[- Generate subtarget enumerations]'
  '--gen-intrinsic-enums[- Generate intrinsic enums]'
  '--gen-intrinsic-impl[- Generate intrinsic information]'
  '--print-enums[- Print enum values for a class]'
  '--print-sets[- Print expanded sets for testing DAG exprs]'
  '--gen-opt-parser-defs[- Generate option definitions]'
  '--gen-opt-rst[- Generate option RST]'
  '--gen-ctags[- Generate ctags-compatible index]'
  '--gen-attrs[- Generate attributes]'
  '--gen-searchable-tables[- Generate generic binary-searchable table]'
  '--gen-global-isel[- Generate GlobalISel selector]'
  '--gen-global-isel-combiner[- Generate GlobalISel combiner]'
  '--gen-x86-EVEX2VEX-tables[- Generate X86 EVEX to VEX compress tables]'
  '--gen-x86-fold-tables[- Generate X86 fold tables]'
  '--gen-register-bank[- Generate registers bank descriptions]'
  '--gen-exegesis[- Generate llvm-exegesis tables]'
  '--gen-automata[- Generate generic automata]'
  '--gen-directive-decl[- Generate directive related declaration code (header file)]'
  '--gen-directive-impl[- Generate directive related implementation code]'
  '--gen-directive-gen[- Generate directive related implementation code part]'
  '-o[- Output filename]'
  '--time-regions[- Time regions of tablegens execution]'
  '--write-if-changed[- Only write output if it changed]'
  '--help[- Display available options (--help-hidden for more)]'
  '--help-list[- Display list of available options (--help-list-hidden for more)]'
  '--version[- Display the version of this program]'
  '--match-prefix[- Only match instructions with the given prefix]'
  '--asmparsernum[- Make -gen-asm-parser emit assembly parser #N]'
  '--asmwriternum[- Make -gen-asm-writer emit assembly writer #N]'
  '--instrument-coverage[- Generates tables to help identify patterns matched]'
  '--omit-comments[- Do not generate comments]'
  '--gisel-coverage-file[- Specify file to retrieve coverage information from]'
  '--instrument-gisel-coverage[- Generate coverage instrumentation for GlobalISel]'
  '--optimize-match-table[- Generate an optimized version of the match table]'
  '--warn-on-skipped-patterns[- Explain why a pattern was skipped for inclusion in the GlobalISel selector]'
  '--combiners[- Emit the specified combiners]'
  '--gicombiner-show-expansions[- Use C++ comments to indicate occurence of code expansion]'
  '--gicombiner-stop-after-build[- Stop processing after building the match tree]'
  '--gicombiner-stop-after-parse[- Stop processing after parsing rules and dump state]'
  '--intrinsic-prefix[prefix> - Generate intrinsics with this target prefix]'
  '--register-info-debug[- Dump register information to help debugging]'
  '--class[name>               - Print Enum list for this class]'
  '*:filename:_files'
)

_arguments -s $arguments
