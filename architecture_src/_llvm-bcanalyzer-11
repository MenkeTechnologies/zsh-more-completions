#compdef llvm-bcanalyzer-11

local arguments

arguments=(
  '--color[- Use colors in output (default=autodetect)]'
  '--aarch64-neon-syntax[- Choose style of NEON code to emit from AArch64 backend:]'
  '--amdgpu-bypass-slow-div[- Skip 64-bit divide for dynamic 32-bit values]'
  '--amdgpu-disable-loop-alignment[- Do not align and prefetch loops]'
  '--amdgpu-disable-power-sched[- Disable scheduling to minimize mAI power bursts]'
  '--amdgpu-dpp-combine[- Enable DPP combiner]'
  '--amdgpu-dump-hsa-metadata[- Dump AMDGPU HSA Metadata]'
  '--amdgpu-enable-global-sgpr-addr[- Enable use of SGPR regs for GLOBAL LOAD/STORE instructions]'
  '--amdgpu-enable-merge-m0[- Merge and hoist M0 initializations]'
  '--amdgpu-promote-alloca-to-vector-limit[- Maximum byte size to consider promote alloca to vector]'
  '--amdgpu-reserve-vgpr-for-sgpr-spill[- Allocates one VGPR for future SGPR Spill]'
  '--amdgpu-sdwa-peephole[- Enable SDWA peepholer]'
  '--amdgpu-verify-hsa-metadata[- Verify AMDGPU HSA Metadata]'
  '--amdgpu-vgpr-index-mode[- Use GPR indexing mode instead of movrel for vector indexing]'
  '--arm-add-build-attributes[-]'
  '--arm-implicit-it[- Allow conditional instructions outdside of an IT block]'
  '--atomic-counter-update-promoted[- Do counter update using atomic fetch add  for promoted counters only]'
  '--atomic-first-counter[- Use atomic fetch add for first counter in a function (usually the entry counter)]'
  '--block-info[- Use the BLOCK_INFO from the given file]'
  '--bounds-checking-single-trap[- Use one trap block per function]'
  '--cfg-hide-deoptimize-paths[-]'
  '--cfg-hide-unreachable-paths[-]'
  '--check-hash[- Check module hash using the argument as a string table]'
  '--cost-kind[- Target cost kind]'
  '--cvp-dont-add-nowrap-flags[-]'
  '--debugify-level[- Kind of debug info to add]'
  '--debugify-quiet[- Suppress verbose debugify output]'
  '--disable-histogram[- Do not print per-code histogram]'
  '--disable-promote-alloca-to-lds[- Disable promote alloca to LDS]'
  '--disable-promote-alloca-to-vector[- Disable promote alloca to vector]'
  '--do-counter-promotion[- Do counter register promotion]'
  '--dump[- Dump low level bitcode trace]'
  '--emscripten-cxx-exceptions-allowed[- The list of function names in which Emscripten-style exception handling is enabled (see emscripten EMSCRIPTEN_CATCHING_ALLOWED options)]'
  '--enable-cse-in-irtranslator[- Should enable CSE in irtranslator]'
  '--enable-cse-in-legalizer[- Should enable CSE in Legalizer]'
  '--enable-emscripten-cxx-exceptions[- WebAssembly Emscripten-style exception handling]'
  '--enable-emscripten-sjlj[- WebAssembly Emscripten-style setjmp/longjmp handling]'
  '--enable-gvn-hoist[- Enable the GVN hoisting pass (default = off)]'
  '--enable-gvn-memdep[-]'
  '--enable-gvn-sink[- Enable the GVN sinking pass (default = off)]'
  '--enable-load-in-loop-pre[-]'
  '--enable-load-pre[-]'
  '--enable-loop-simplifycfg-term-folding[-]'
  '--enable-name-compression[- Enable name/filename string compression]'
  '--gpsize[- Global Pointer Addressing Size.  The default size is 8.]'
  '--hash-based-counter-split[- Rename counter variable of a comdat function based on cfg hash]'
  '--hot-cold-split[- Enable hot-cold splitting pass]'
  '--import-all-index[- Import all external functions in index.]'
  '--instcombine-code-sinking[- Enable code sinking]'
  '--instcombine-guard-widening-window[- How wide an instruction window to bypass looking for another guard]'
  '--instcombine-max-iterations[- Limit the maximum number of instruction combining iterations]'
  '--instcombine-max-num-phis[- Maximum number phis to handle in intptr/ptrint folding]'
  '--instcombine-maxarray-size[- Maximum array size considered when doing a combine]'
  '--instcombine-negator-enabled[- Should we attempt to sink negations?]'
  '--instcombine-negator-max-depth[- What is the maximal lookup depth when trying to check for viability of negation sinking.]'
  '--instrprof-atomic-counter-update-all[- Make all profile counter updates atomic (for testing only)]'
  '--internalize-public-api-file[- A file containing list of symbol names to preserve]'
  '--internalize-public-api-list[- A list of symbol names to preserve]'
  '--iterative-counter-promotion[- Allow counter promotion across the whole loop nest.]'
  '--lto-embed-bitcode[- Embed LLVM bitcode in object files produced by LTO]'
  '--lto-pass-remarks-filter[- Only record optimization remarks from passes whose names match the given regular expression]'
  '--lto-pass-remarks-format[- The format used for serializing remarks (default: YAML)]'
  '--lto-pass-remarks-output[- Output filename for pass remarks]'
  '--matrix-default-layout[- Sets the default matrix layout]'
  '--max-counter-promotions[- Max number of allowed counter promotions]'
  '--max-counter-promotions-per-loop[- Max number counter promotions per loop to avoid increasing register pressure too much]'
  '--memop-size-large[- Set large value thresthold in memory intrinsic size profiling. Value of 0 disables the large value profiling.]'
  '--memop-size-range[- Set the range of size in memory intrinsic calls to be profiled precisely, in a format of <start_val>:<end_val>]'
  '--merror-missing-parenthesis[- Error for missing parenthesis around predicate registers]'
  '--merror-noncontigious-register[- Error for register names that arent contigious]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mips-compact-branches[- MIPS Specific: Compact branch policy.]'
  '--mips16-constant-islands[- Enable mips16 constant islands.]'
  '--mips16-hard-float[- Enable mips16 hard float.]'
  '--mir-strip-debugify-only[- Should mir-strip-debug only strip debug info from debugified modules by default]'
  '--mno-compound[- Disable looking for compound instructions for Hexagon]'
  '--mno-fixup[- Disable fixing up resolved relocations for Hexagon]'
  '--mno-ldc1-sdc1[- Expand double precision loads and stores to their single precision counterparts]'
  '--mno-pairing[- Disable looking for duplex instructions for Hexagon]'
  '--mwarn-missing-parenthesis[- Warn for missing parenthesis around predicate registers]'
  '--mwarn-noncontigious-register[- Warn for register names that arent contigious]'
  '--mwarn-sign-mismatch[- Warn for mismatching a signed and unsigned value]'
  '--no-discriminators[- Disable generation of discriminator information.]'
  '--non-symbolic[- Emit numeric info in dump even if symbolic info is available]'
  '--nvptx-sched4reg[- NVPTX Specific: schedule for register pressue]'
  '--poison-checking-function-local[- Check that returns are non-poison (for testing)]'
  '--r600-ir-structurize[- Use StructurizeCFG IR pass]'
  '--rdf-dump[-]'
  '--rdf-limit[-]'
  '--runtime-counter-relocation[- Enable relocating counters at runtime.]'
  '--safepoint-ir-verifier-print-only[-]'
  '--sample-profile-check-record-coverage[- Emit a warning if less than N% of records in the input profile are matched to the IR.]'
  '--sample-profile-check-sample-coverage[- Emit a warning if less than N% of samples in the input profile are matched to the IR.]'
  '--sample-profile-max-propagate-iterations[- Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.]'
  '--show-binary-blobs[- Print binary blobs using hex escapes]'
  '--speculative-counter-promotion-max-exiting[- The max number of exiting blocks of a loop to allow  speculative counter promotion]'
  '--speculative-counter-promotion-to-loop[- When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region.]'
  '--summary-file[- The summary file to use for function importing.]'
  '--tail-predication[- MVE tail-predication options]'
  '--threads[-]'
  '--verify-region-info[- Verify region info (time consuming)]'
  '--vp-counters-per-site[- The average number of profile counters allocated per value profiling site.]'
  '--vp-static-alloc[- Do static counter allocation for value profiler]'
  '--x86-align-branch[- Specify types of branches to align (plus separated list of types):]'
  '--x86-align-branch-boundary[- Control how the assembler should align branches with NOP. If the boundarys size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches.]'
  '--x86-branches-within-32B-boundaries[- Align selected instructions to mitigate negative performance impact of Intels micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution.]'
  '--x86-pad-max-prefix-size[- Maximum number of prefixes to use for padding]'
  '--help[- Display available options (--help-hidden for more)]'
  '--help-list[- Display list of available options (--help-list-hidden for more)]'
  '--version[- Display the version of this program]'
  '--polly[- Enable the polly optimizer (only at -O3)]'
  '--polly-2nd-level-tiling[- Enable a 2nd level loop of loop tiling]'
  '--polly-ast-print-accesses[- Print memory access functions]'
  '--polly-context[parameter set>                - Provide additional constraints on the context parameters]'
  '--polly-dce-precise-steps[- The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.]'
  '--polly-delicm-max-ops[- Maximum number of isl operations to invest for lifetime analysis; 0=no limit]'
  '--polly-detect-full-functions[- Allow the detection of full functions]'
  '--polly-dump-after[- Dump module after Polly transformations into a file suffixed with "-after"]'
  '--polly-dump-after-file[- Dump module after Polly transformations to the given file]'
  '--polly-dump-before[- Dump module before Polly transformations into a file suffixed with "-before"]'
  '--polly-dump-before-file[- Dump module before Polly transformations to the given file]'
  '--polly-enable-simplify[- Simplify SCoP after optimizations]'
  '--polly-ignore-func[- Ignore functions that match a regex. Multiple regexes can be comma separated. Scop detection will ignore all functions that match ANY of the regexes provided.]'
  '--polly-isl-arg[- Option passed to ISL]'
  '--polly-on-isl-error-abort[- Abort if an isl error is encountered]'
  '--polly-only-func[- Only run on functions that match a regex. Multiple regexes can be comma separated. Scop detection will run on all functions that match ANY of the regexes provided.]'
  '--polly-only-region[- Only run on certain regions (The provided identifier must appear in the name of the regions entry block]'
  '--polly-only-scop-detection[- Only run scop detection, but no other optimizations]'
  '--polly-optimized-scops[- Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree]'
  '--polly-parallel[- Generate thread parallel code (isl codegen only)]'
  '--polly-parallel-force[- Force generation of thread parallel code ignoring any cost model]'
  '--polly-pattern-matching-based-opts[- Perform optimizations based on pattern matching]'
  '--polly-process-unprofitable[- Process scops that are unlikely to benefit from Polly optimizations.]'
  '--polly-register-tiling[- Enable register tiling]'
  '--polly-report[- Print information about the activities of Polly]'
  '--polly-show[- Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)]'
  '--polly-show-only[- Highlight the code regions that will be optimized in a (CFG only BBs)]'
  '--polly-stmt-granularity[- Algorithm to use for splitting basic blocks into multiple statements]'
  '--polly-target[- The hardware to target]'
  '--polly-tiling[- Enable loop tiling]'
  '--polly-vectorizer[- Select the vectorization strategy]'
  '*:filename:_files'
)

_arguments -s $arguments
