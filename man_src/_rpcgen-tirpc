#compdef rpcgen-tirpc

# Autogenerated from man page /usr/share/man/man1/rpcgen-tirpc.1.gz

local arguments

arguments=(
    '-T[option, it will also generate the RPC dispatch table in proto_tbl. i.]'
    '--Sc[option, it will also generate sample code which would illustrate how to use …]'
    '--Ss[option, it will also generate a sample server code which would illustrate how…]'
    '-s[option, it creates servers for that particular class of transports.]'
    '-n[option, it creates a server for the transport specified by netid.]'
    '-a[Generate all the files including sample code for client and server side.]'
    '-b[This generates code for the SunOS4. 1 style of rpc.]'
    '-5[This generates code for the SysVr4 style of rpc.]'
    '-c[Compile into XDR routines.]'
    '-C[Generate code in ANSI C.]'
    '-k[Generate code in K&R C. The default is ANSI C.]'
    '--Dname[Define a symbol name. Equivalent to the #define directive in the source.]:value'
    '-h[Compile into C data-definitions (a header file).]'
    '-I[Generate a service that can be started from inetd.]'
    '-K[By default, services created using rpcgen wait 120 seconds after servicing a …]:secs'
    '-1[When monitoring for a server, some portmonitors, like listen(1M), always spaw…]'
    '-l[Compile into client-side stubs.]'
    '-m[Compile into server-side stubs, but do not generate a “main” routine.]'
    '-M[Generate multithread-safe stubs for passing arguments and results between rpc…]'
    '-N[Use the newstyle of rpcgen.]'
    '-o[Specify the name of the output file.]:outfile'
    '--Sm[.]'
    '-t[modes only).]'
    '-D[and.]'
    '--DTEST[server side stubs for all the transport belonging to the class datagram_n to…]'
    '*:filename:_files'
)
_arguments -s $arguments
