#compdef fop

# Autogenerated from man page /usr/share/man/man1/fop.1.gz

local arguments

arguments=(
    '--version[print FOP version and exit.]'
    '-d[debug mode.]'
    '-x[dump configuration settings.]'
    '-q[quiet mode.]'
    '-c[use additional configuration file cfg. xml.]:cfg.xml'
    '-l[the language to use for user information.]:lang'
    '--nocs[disable complex script features.]'
    '-r[relaxed/less strict validation (where available).]'
    '--dpi[target resolution in dots per inch (dpi) where xxx is a number.]:xxx'
    '-s[for area tree XML, down to block areas only.]'
    '-v[run in verbose mode (currently simply print FOP version and continue).]'
    '-o[PDF file will be encrypted with option owner password.]:password'
    '-u[PDF file will be encrypted with option user password.]:password'
    '--noprint[PDF file will be encrypted without printing permission.]'
    '--nocopy[PDF file will be encrypted without copy content permission.]'
    '--noedit[PDF file will be encrypted without edit content permission.]'
    '--noannotations[PDF file will be encrypted without edit annotation permission.]'
    '--nofillinforms[PDF file will be encrypted without fill in interactive form fields permission.]'
    '--noaccesscontent[PDF file will be encrypted without extract text and graphics permission.]'
    '--noassembledoc[PDF file will be encrypted without assemble the document permission.]'
    '--noprinthq[PDF file will be encrypted without print high quality permission.]'
    '-a[enables accessibility features (Tagged PDF etc. , default off).]'
    '--pdfprofile[PDF file will be generated with the specified profile (Examples for prof: PDF…]:prof'
    '--conserve[enable memory-conservation policy (trades memory-consumption for disk I/O) (N…]'
    '--cache[specifies a file/directory path location for the font cache file.]'
    '--flush[flushes the current font cache file.]'
    '--fo[infile xsl:fo input file.]'
    '--xml[xml input file, must be used together with -xsl.]:infile'
    '--atin[area tree input file.]:infile'
    '--ifin[intermediate format input file.]:infile'
    '--imagein[image input file (piping through stdin not supported).]:infile'
    '--xsl[xslt stylesheet.]:stylesheet'
    '--param[(repeat \-param name value\ for each parameter).]'
    '--catalog[use catalog resolver for input XML and XSLT files OUTPUT.]'
    '--pdf[input will be rendered as PDF (outfile req\d).]:outfile'
    '--pdfa1b[input will be rendered as PDF/A-1b compliant PDF (outfile req\d, same as "-pd…]:outfile'
    '--awt[input will be displayed on screen.]'
    '--rtf[input will be rendered as RTF (outfile req\d).]:outfile'
    '--pcl[input will be rendered as PCL (outfile req\d).]:outfile'
    '--ps[input will be rendered as PostScript (outfile req\d).]:outfile'
    '--afp[input will be rendered as AFP (outfile req\d).]:outfile'
    '--tiff[input will be rendered as TIFF (outfile req\d).]:outfile'
    '--png[input will be rendered as PNG (outfile req\d).]:outfile'
    '--txt[input will be rendered as plain text (outfile req\d).]:outfile'
    '--at[representation of area tree as XML (outfile req\d) specify optional mime outp…]:out'
    '--if[representation of document in intermediate format XML (outfile req\d) specify…]:out'
    '--print[input file will be rendered and sent to the printer see options with "-print …]'
    '--out[(outfile req\d) Example: "-out application/pdf D:\\out.]'
    '--svg[input will be rendered as an SVG slides file (outfile req\d) Experimental fea…]:outfile'
    '--foout[input will only be XSL transformed.]:outfile'
    '*:filename:_files'
)
_arguments -s $arguments
