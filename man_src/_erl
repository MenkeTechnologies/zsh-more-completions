#compdef erl

# Autogenerated from man page /usr/local/opt/erlang/lib/erlang/man/man1/erl.1

local arguments

arguments=(
    '--Application[Sets the application configuration parameter Par to the value Val for the app…]:Val:'
    '--args_file[Command-line arguments are read from the file FileName.]:FileName:'
    '--async_shell_start[The initial Erlang shell does not read user input until the system boot proce…]'
    '--boot[Specifies the name of the boot file, File.]:File:'
    '--boot_var[If the boot script contains a path variable Var other than $ROOT, this variab…]:Dir:'
    '--code_path_cache[Enables the code path cache of the code server; see code(3).]'
    '--compile[Compiles the specified modules and then terminates (with non-zero exit code i…]'
    '--config[Specifies the name of a configuration file, Config.]:Config:'
    '--connect_all[If this flag is present, global does not maintain a fully connected network o…]:false:'
    '--cookie[Obsolete flag without any effect and common misspelling for -setcookie.]:Cookie:'
    '--detached[Starts the Erlang runtime system detached from the system console.]'
    '--emu_args[Useful for debugging. Prints the arguments sent to the emulator.]'
    '--emu_type[Start an emulator of a different type.]:Type:'
    '--env[Sets the host OS environment variable Variable to the value Value for the Erl…]:Value:'
    '--epmd_module[Configures the module responsible to communicate to epmd.]'
    '--eval[Makes init evaluate the expression Expr; see init(3).]'
    '--extra[Everything following -extra is considered plain arguments and can be retrieve…]:flag):'
    '--heart[Starts heartbeat monitoring of the Erlang runtime system; see heart(3).]'
    '--hidden[Starts the Erlang runtime system as a hidden node, if it is run as a distribu…]'
    '--hosts[Specifies the IP addresses for the hosts on which Erlang boot servers are run…]:Hosts:'
    '--id[Specifies the identity of the Erlang runtime system.]:Id:'
    '--init_debug[Makes init write some debug information while interpreting the boot script.]'
    '--instr[Selects an instrumented Erlang runtime system (virtual machine) to run, inste…]:flag):'
    '--loader[Specifies the method used by erl_prim_loader to load Erlang modules into the …]:Loader:'
    '--make[Makes the Erlang runtime system invoke make:all() in the current working dire…]'
    '--man[Displays the manual page for the Erlang module Module.]:Module:'
    '--mode[Modules are auto loaded when they are first referenced if the runtime system …]'
    '--name[Makes the Erlang runtime system into a distributed node.]:Name:'
    '--noinput[Ensures that the Erlang runtime system never tries to read any input.]'
    '--noshell[Starts an Erlang runtime system with no shell.]'
    '--nostick[Disables the sticky directory facility of the Erlang code server; see code(3).]'
    '--oldshell[Invokes the old Erlang shell from Erlang/OTP 3. 3.]'
    '--pa[Adds the specified directories to the beginning of the code path, similar to …]'
    '--pz[Adds the specified directories to the end of the code path, similar to code:a…]'
    '--path[Replaces the path specified in the boot script; see script(4).]'
    '--proto_dist[Specifies a protocol for Erlang distribution: inet_tcp: TCP over IPv4 (the de…]:Proto:'
    '--remsh[Starts Erlang with a remote shell connected to Node.]:Node:'
    '--rsh[Specifies an alternative to ssh for starting a slave node on a remote host; s…]:Program:'
    '--run[Makes init call the specified function. Func defaults to start.]'
    '-s[Makes init call the specified function. Func defaults to start.]'
    '--setcookie[Sets the magic cookie of the node to Cookie; see erlang:set_cookie/2.]:Cookie:'
    '--shutdown_time[Specifies how long time (in milliseconds) the init process is allowed to spen…]:Time:'
    '--sname[Makes the Erlang runtime system into a distributed node, similar to -name, bu…]:Name:'
    '--start_epmd[Specifies whether Erlang should start epmd on startup.]'
    '--version[Makes the emulator print its version number. The same as erl +V.]:flag):'
    '*:filename:_files'
)
_arguments -s $arguments
