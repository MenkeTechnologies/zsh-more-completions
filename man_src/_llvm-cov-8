#compdef llvm-cov-8

# Autogenerated from man page /usr/share/man/man1/llvm-cov-8.1.gz

local arguments

arguments=(
    {--fprofile-arcs,--ftest-coverage}'[instrumentation.]'
    {-a,--all-blocks}'[Display all basic blocks.]'
    {-b,--branch-probabilities}'[Display conditional branch probabilities and a summary of branch information.]'
    {-c,--branch-counts}'[Display branch counts instead of probabilities (requires -b).]'
    {-f,--function-summaries}'[Show a summary of coverage for each function instead of just one summary for …]'
    '--help[Display available options (âhelp-hidden for more).]'
    {-l,--long-file-names}'[For coverage output of files included from the main source file, add the main…]'
    {-n,--no-output}'[Do not output any . gcov files. Summary information is still displayed.]'
    {-o,--object-directory,--object-file}'[Find objects in DIR or based on FILEâs path.]'
    {-p,--preserve-paths}'[Preserve path components when naming the coverage output files.]'
    {-u,--unconditional-branches}'[Include unconditional branches in the output for the âbranch-probabilities …]'
    '--version[Display the version of llvm-cov.]'
    '--show-line-counts[Show the execution counts for each line. Defaults to true, unless another.]'
    '--show[.]'
    '--show-expansions[Expand inclusions, such as preprocessor macros or textual inclusions, inline …]'
    '--show-instantiations[For source regions that are instantiated multiple times, such as templates in…]'
    '--show-regions[Show the execution counts for each region by displaying a caret that points t…]'
    '--show-line-counts-or-regions[Show the execution counts for each line if there is only one region on the li…]'
    '--use-color[Enable or disable color output. By default this is autodetected.]'
    '--arch[Specify a list of architectures such that the Nth entry in the list correspon…]:*NAMES*'
    '--name[Show code coverage only for functions with the given name.]:<NAME>'
    '--name-whitelist[Show code coverage only for functions listed in the given file.]:<FILE>'
    '--name-regex[Show code coverage only for functions that match the given regular expression.]:<PATTERN>'
    '--ignore-filename-regex[Skip source code files with file paths that match the given regular expressio…]:<PATTERN>'
    '--format[Use the specified output format.]:<FORMAT>'
    '--tab-size[Replace tabs with <TABSIZE> spaces when preparing reports.]:<TABSIZE>'
    '--output-dir[Specify a directory to write coverage reports into.]:PATH'
    '--Xdemangler[Specify a symbol demangler.]:<TOOL>|<TOOL-OPTION>'
    {--num-threads,-j}'[Use N threads to write file reports (only applicable when -output-dir is spec…]'
    '--line-coverage-gt[Show code coverage only for functions with line coverage greater than the giv…]:<N>'
    '--line-coverage-lt[Show code coverage only for functions with line coverage less than the given …]:<N>'
    '--region-coverage-gt[Show code coverage only for functions with region coverage greater than the g…]:<N>'
    '--region-coverage-lt[Show code coverage only for functions with region coverage less than the give…]:<N>'
    '--path-equivalence[Map the paths in the coverage data to local source file paths.]:<from><to>'
    '--show-functions[Show coverage summaries for each function. Defaults to false.]'
    '--show-instantiation-summary[Show statistics for all function instantiations. Defaults to false.]'
    '--summary-only[Export only summary information for each file in the coverage data.]'
    '*:filename:_files'
)
_arguments -s $arguments
