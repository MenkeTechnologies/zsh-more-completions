#compdef ld-classic

# Autogenerated from man page /Library/Developer/CommandLineTools/usr/share/man/man1/ld-classic.1

local arguments

arguments=(
    '--execute[The default. Produce a mach-o main executable that has file type MH_EXECUTE.]'
    '--dylib[Produce a mach-o shared library that has file type MH_DYLIB.]'
    '--bundle[Produce a mach-o bundle that has file type MH_BUNDLE.]'
    '-r[Merges object files to produce another mach-o object file with file type MH_O…]'
    '--dylinker[Produce a mach-o dylinker that has file type MH_DYLINKER.]'
    '--dynamic[The default. Implied by -dylib, -bundle, or -execute.]'
    '--static[Produces a mach-o file that does not use the dyld.]'
    '--preload[Produces a mach-o file in which the mach_header, load commands, and symbol ta…]'
    '--arch[Specifies which architecture (e. g.]'
    '-o[Specifies the name and location of the output file. If not specified, `a.]'
    '-l[This option tells the linker to search for libx. dylib or libx.]'
    '--needed-l[This is the same as the -lx but means to really link with the dylib even if n…]'
    '--reexport-l[This is the same as the -lx but specifies that the all symbols in library x s…]'
    '--upward-l[This is the same as the -lx but specifies that the dylib is an upward depende…]'
    '--hidden-l[This is the same as the -lx for locating a static library, but treats all glo…]'
    '--weak-l[This is the same as the -lx but forces the library and all references to it t…]'
    '--needed_library[This is the same as placing path_to_dylib on the link line but means to reall…]'
    '--reexport_library[This is the same as listing a file name path to a library on the link line an…]'
    '--upward_library[This is the same as listing a file name path to a library on the link line bu…]'
    '--weak_library[This is the same as listing a file name path to a library on the link line ex…]'
    '-L[Add dir to the list of directories in which to search for libraries.]'
    '-Z[Do not search the standard directories when searching for libraries and frame…]'
    '--syslibroot[Prepend rootdir to all search paths when searching for libraries or framework…]'
    '--search_paths_first[This is now the default (in Xcode4 tools).]'
    '--search_dylibs_first[Changes the searching behavior for libraries.]'
    '--framework[This option tells the linker to search for `name.]'
    '--needed_framework[This is the same as the -framework name\[,suffix\] but means to really link wit…]'
    '--weak_framework[This is the same as the -framework name\[,suffix\] but forces the framework and…]'
    '--reexport_framework[This is the same as the -framework name\[,suffix\] but also specifies that the …]'
    '--upward_framework[This is the same as the -framework name\[,suffix\] but also specifies that the …]'
    '-F[Add dir to the list of directories in which to search for frameworks.]'
    '--all_load[Loads all members of static archive libraries.]'
    '--ObjC[Loads all members of static archive libraries that implement an Objective-C c…]'
    '--force_load[Loads all members of the specified static archive library.]'
    '--load_hidden[Uses specified static library as usual, but treats all global symbols from th…]'
    '--image_suffix[Search for libraries and frameworks with suffix and then without.]'
    '--sectcreate[The section sectname in the segment segname is created from the contents of f…]'
    '--add_empty_section[An empty section named sectname in the segment segname.]'
    '--add_ast_path[The linker will add a N_AST stab symbol to the output file where the string i…]'
    '--filelist[Specifies that the linker should link the files listed in file.]'
    '--dtrace[Enables dtrace static probes when producing a final linked image.]'
    '--dead_strip[Remove functions and data that are unreachable by the entry point or exported…]'
    '--order_file[Alters the order in which functions and data are laid out.]'
    '--no_order_inits[When the -order_file option is not used, the linker lays out functions in obj…]'
    '--platform_version[This is set to indicate the platform, oldest supported version of that platfo…]'
    '--macos_version_min[This is set to indicate the oldest macOS version that that the output is to b…]'
    '--ios_version_min[This is set to indicate the oldest iOS version that that the output is to be …]'
    '--image_base[Specifies the preferred load address for a dylib or bundle.]'
    '--no_implicit_dylibs[When creating a two-level namespace final linked image, normally the linker w…]'
    '--no_zero_fill_sections[By default the linker moves all zero fill sections to the end of the __DATA s…]'
    '--merge_zero_fill_sections[Causes all zero-fill sections in the __DATA segment to be merged into one __z…]'
    '--no_branch_islands[Disables linker creation of branch islands which allows images to be created …]'
    '--install_name[Sets an internal "install path" (LC_ID_DYLIB) in a dynamic library.]'
    '--mark_dead_strippable_dylib[Specifies that the dylib being built can be dead strip by any client.]'
    '--compatibility_version[Specifies the compatibility version number of the library.]'
    '--current_version[Specifies the current version number of the library.]'
    '--pie[This makes a special kind of main executable that is position independent (PI…]'
    '--no_pie[Do not make a position independent executable (PIE).]'
    '--pagezero_size[By default the linker creates an unreadable segment starting at address zero …]'
    '--stack_size[Specifies the maximum stack size for the main thread in a program.]'
    '--allow_stack_execute[Marks executable so that all stacks in the task will be given stack execution…]'
    '--export_dynamic[Preserves all global symbols in main executables during LTO.]'
    '--bundle_loader[This specifies the executable that will be loading the bundle output file bei…]'
    '--keep_private_externs[Don\t turn private external (aka visibility=hidden) symbols into static symbo…]'
    '-d[Force definition of common symbols.]'
    '--exported_symbols_list[The specified filename contains a list of global symbol names that will remai…]'
    '--exported_symbol[The specified symbol is added to the list of global symbols names that will r…]'
    '--no_exported_symbols[Useful for main executable that don\t have plugins and thus need no symbol ex…]'
    '--unexported_symbols_list[The specified filename contains a list of global symbol names that will not r…]'
    '--unexported_symbol[The specified symbol is added to the list of global symbols names that will n…]'
    '--reexported_symbols_list[The specified filename contains a list of symbol names that are implemented i…]'
    '--alias[Create an alias named alternate_symbol_name for the symbol symbol_name.]'
    '--alias_list[The specified filename contains a list of aliases.]'
    '--flat_namespace[Alters how symbols are resolved at build time and runtime.]'
    '-u[Specified that symbol symbol_name must be defined for the link to succeed.]'
    '-U[Specified that it is ok for symbol_name to have no definition.]'
    '--undefined[Specifies how undefined symbols are to be treated.]'
    '--rpath[Add path to the runpath search path list for image being created.]'
    '--commons[Specifies how commons (aka tentative definitions) are resolved with respect t…]'
    '--why_load[Log why each object file in a static library is loaded.]'
    '--why_live[Logs a chain of references to symbol_name. Only applicable with -dead_strip .]'
    '--print_statistics[Logs information about the amount of memory and time the linker used.]'
    '-t[Logs each file (object, archive, or dylib) the linker loads.]'
    '--order_file_statistics[Logs information about the processing of a -order_file.]'
    '--map[Writes a map file to the specified path which details all symbols and their a…]'
    '-S[Do not put debug information (STABS or DWARF) in the output file.]'
    '-x[Do not put non-global symbols in the output file\s symbol table.]'
    '--non_global_symbols_strip_list[The specified filename contains a list of non-global symbol names that should…]'
    '--non_global_symbols_no_strip_list[The specified filename contains a list of non-global symbol names that should…]'
    '--oso_prefix[When generating the debug map, the linker will remove the specified prefix-pa…]'
    '--bitcode_bundle[Generates an embedded bitcode bundle in the output binary.]'
    '--bitcode_hide_symbols[Specifies this option together with -bitcode_bundle to hide all non-exported …]'
    '--bitcode_symbol_map[Specifies the output for bitcode symbol reverse mapping (. bcsymbolmap).]'
    '-v[Prints the version of the linker.]'
    '--adhoc_codesign[Directs the linker to add an ad-hoc codesignature to the output file.]'
    '--no_adhoc_codesign[Directs the linker to not add ad-hoc codesignature to the output file, even f…]'
    '--data_const[By default the linker moves some data sections into __DATA_CONST if it knows …]'
    '--no_data_const[By default the linker moves some data sections into __DATA_CONST if it knows …]'
    '--const_selrefs[By default the linker moves __objc_selrefs section into __DATA_CONST if it kn…]'
    '--no_const_selrefs[By default the linker moves __objc_selrefs section into __DATA_CONST if it kn…]'
    '--version_details[Prints the version info about the linker in JSON.]'
    '--no_weak_imports[Error if any symbols are weak imports (i. e.]'
    '--no_deduplicate[Don\t run deduplication pass in linker.]'
    '--verbose_deduplicate[Prints names of functions that are eliminated by deduplication and total code…]'
    '--no_inits[Error if the output contains any static initializers.]'
    '--no_warn_inits[Do not warn if the output contains any static initializers.]'
    '--debug_variant[Do not warn about issues that are only problems for binaries shipping to cust…]'
    '--unaligned_pointers[Specifies how unaligned pointers in __DATA segments should be handled.]'
    '--dirty_data_list[Specifies a file containing the names of data symbols likely to be dirtied.]'
    '--max_default_common_align[Any common symbols (aka tentative definitions, or uninitialized (zeroed) vari…]'
    '--move_to_rw_segment[Moves data symbols to another segment.]'
    '--move_to_ro_segment[Moves code symbols to another segment.]'
    '--rename_section[Renames section orgSegment/orgSection to newSegment/newSection.]'
    '--rename_segment[Renames all sections with orgSegment segment name to have newSegment segment …]'
    '--trace_symbol_layout[For using in debugging -rename_section, -rename_segment, -move_to_ro_segment,…]'
    '--section_order[Only for use with -preload.]'
    '--segment_order[Only for use with -preload.]'
    '--allow_heap_execute[Normally i386 main executables will be marked so that the Mac OS X 10.]'
    '--application_extension[Specifies that the code is being linked for use in an application extension.]'
    '--no_application_extension[Specifies that the code is being linked is not safe for use in an application…]'
    '--fatal_warnings[Causes the linker to exit with a non-zero value if any warnings were emitted.]'
    '--no_eh_labels[Normally in -r mode, the linker produces .]'
    '--warn_compact_unwind[When producing a final linked image, the linker processes the __eh_frame sect…]'
    '--warn_weak_exports[Issue a warning if the resulting final linked image contains weak external sy…]'
    '--no_weak_exports[Issue an erro if the resulting final linked image contains weak external symb…]'
    '--warn_unused_dylibs[Warn about dylibs that are linked by no symbols are used from them.]'
    '--no_warn_unused_dylibs[Don\t warn about dylibs that are linked by no symbols are used from them.]'
    '--dead_strip_dylibs[Remove dylibs that are unreachable by the entry point or exported symbols.]'
    '--allow_sub_type_mismatches[Normally the linker considers different cpu-subtype for ARM (e. g.]'
    '--no_uuid[Do not generate an LC_UUID load command in the output file.]'
    '--random_uuid[Generate a random LC_UUID load command in the output file.]'
    '--root_safe[Sets the MH_ROOT_SAFE bit in the mach header of the output file.]'
    '--setuid_safe[Sets the MH_SETUID_SAFE bit in the mach header of the output file.]'
    '--interposable[Indirects access to all to exported symbols when creating a dynamic library.]'
    '--init[The specified symbol_name will be run as the first initializer.]'
    '--sub_library[The specified dylib will be re-exported.]'
    '--sub_umbrella[The specified framework will be re-exported.]'
    '--allowable_client[Restricts what can link against the dynamic library being created.]'
    '--client_name[Enables a bundle to link against a dylib that was built with -allowable_clien…]'
    '--umbrella[Specifies that the dylib being linked is re-exported through an umbrella fram…]'
    '--headerpad[Specifies the minimum space for future expansion of the load commands.]'
    '--headerpad_max_install_names[Automatically adds space for future expansion of load commands such that all …]'
    '--bind_at_load[Sets a bit in the mach header of the resulting binary which tells dyld to bin…]'
    '--force_flat_namespace[Sets a bit in the mach header of the resulting binary which tells dyld to not…]'
    '--sectalign[The section named sectname in the segment segname will have its alignment set…]'
    '--stack_addr[Specifies the initial address of the stack pointer value, where value is a he…]'
    '--segprot[Specifies the maximum and initial virtual memory protection of the named segm…]'
    '--seg_addr_table[Specifies a file containing base addresses for dynamic libraries.]'
    '--segs_read_write_addr[Allows a dynamic library to be built where the read-only and read-write segme…]'
    '--segs_read_only_addr[Allows a dynamic library to be built where the read-only and read-write segme…]'
    '--segaddr[Specifies the starting address of the segment named name to be address.]'
    '--seg_page_size[Specifies the page size used by the specified segment.]'
    '--dylib_file[Specifies that a dynamic shared library is in a different location than its s…]'
    '--prebind[The created output file will be in the prebound format.]'
    '--weak_reference_mismatches[Specifies what to do if a symbol is weak-imported in one object file but not …]'
    '--read_only_relocs[Enables the use of relocations which will cause dyld to modify (copy-on-write…]'
    '--force_cpusubtype_ALL[The is only applicable with -arch ppc.]'
    '--dylinker_install_name[Only used when building dyld.]'
    '--no_arch_warnings[Suppresses warning messages about files that have the wrong architecture for …]'
    '--arch_errors_fatal[Turns into errors, warnings about files that have the wrong architecture for …]'
    '-e[Specifies the entry point of a main executable.]'
    '-w[Suppress all warning messages.]'
    '--final_output[Specifies the install name of a dylib if -install_name is not used.]'
    '--arch_multiple[Specifies that the linker should augment error and warning messages with the …]'
    '--twolevel_namespace_hints[Specifies that hints should be added to the resulting binary that can help sp…]'
    '--dot[Create a file at the specified path containing a graph of symbol dependencies.]'
    '--keep_relocs[Add section based relocation records to a final linked image.]'
    '--warn_stabs[Print a warning when the linker cannot do a BINCL/EINCL optimization because …]'
    '--warn_commons[Print a warning whenever a tentative definition in an object file is found an…]'
    '--read_only_stubs[\[i386 only\] Makes the __IMPORT segment of a final linked images read-only.]'
    '--slow_stubs[\[i386 only\] Instead of using single JMP instruction stubs, the linker create…]'
    '--interposable_list[The specified filename contains a list of global symbol names that should alw…]'
    '--no_function_starts[By default the linker creates a compress table of function start addresses in…]'
    '--no_objc_category_merging[By default when producing final linked image, the linker will optimize Object…]'
    '--objc_relative_method_lists[By default when producing final linked image, if targeting a new enough OS ve…]'
    '--no_objc_relative_method_lists[By default when producing final linked image, if targeting a new enough OS ve…]'
    '--object_path_lto[When performing Link Time Optimization (LTO) and a temporary mach-o object fi…]'
    '--lto_library[When performing Link Time Optimization (LTO), the linker normally loads libLT…]'
    '--cache_path_lto[When performing Incremental Link Time Optimization (LTO), use this directory …]'
    '--prune_interval_lto[When performing Incremental Link Time Optimization (LTO), the cache will prun…]'
    '--prune_after_lto[When pruning the cache for Incremental Link Time Optimization (LTO), the cach…]'
    '--max_relative_cache_size_lto[When performing Incremental Link Time Optimization (LTO), the cache will be p…]'
    '--fixup_chains_section[For use with -static or -preload when -pie is used.]'
    '--fixup_chains_section_vm[Same as -fixup_chains_section but fixes a bug.]'
    '--threaded_starts_section[For arm64e only. For use with -static or -preload when -pie is used.]'
    '--page_align_data_atoms[During development, this option can be used to space out all global variables…]'
    '--not_for_dyld_shared_cache[Normally, the linker will add extra info to dylibs with -install_name startin…]'
    '--search_in_sparse_frameworks[For use when linking against versioned frameworks that do not have a normal v…]'
    '--ld_classic[Override the choice of linker, and force the use of ld-classic to link the bi…]'
    '--segalign[All segments must be page aligned.]'
    '--seglinkedit[Object files (MH_OBJECT) with a LINKEDIT segment are no longer supported.]'
    '--noseglinkedit[This is the default. This option is obsolete.]'
    '--fvmlib[Fixed VM shared libraries (MH_FVMLIB) are no longer supported.]'
    '--sectobjectsymbols[Adding a local label at a section start is no longer supported.]'
    '--nofixprebinding[The MH_NOFIXPREBINDING bit of mach_headers has been ignored since Mac OS X 10.]'
    '--noprebind_all_twolevel_modules[Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …]'
    '--prebind_all_twolevel_modules[Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …]'
    '--prebind_allow_overlap[When using -prebind, the linker allows overlapping by default, so this option…]'
    '--noprebind[LD_PREBIND is no longer supported as a way to force on prebinding, so there n…]'
    '--sect_diff_relocs[This option was an attempt to warn about linking .]'
    '--run_init_lazily[This option was removed in Mac OS X 10. 2.]'
    '--single_module[This is now the default so does not need to be specified.]'
    '--multi_module[Multi-modules in dynamic libraries have been ignored at runtime since Mac OS …]'
    '--no_dead_strip_inits_and_terms[The linker never dead strips initialization and termination routines.]'
    '-A[Obsolete incremental load format. This option is obsolete.]'
    '-b[Used with -A option to strip base file\s symbols. This option is obsolete.]'
    '--Sn[Don\t strip any symbols. This is the default. This option is obsolete.]'
    '--Si[Optimize stabs debug symbols to remove duplicates. This is the default.]'
    '--Sp[Write minimal stabs which causes the debugger to open and read the original .]'
    '-X[Strip local symbols that begin with \L\. This is the default.]'
    '-s[Completely strip the output, including removing the symbol table.]'
    '-m[Don\t treat multiple definitions as an error. This is no longer supported.]'
    '-y[Display each file in which symbol is used.]'
    '-Y[Used to control how many occurrences of each symbol specified with -y would b…]'
    '--nomultidefs[Only used when linking an umbrella framework.]'
    '--multiply_defined_unused[Previously provided a way to warn or error if any of the symbol definitions i…]'
    '--multiply_defined[Previously provided a way to warn or error if any of the symbols used from a …]'
    '--private_bundle[Previously prevented errors when -flat_namespace, -bundle, and -bundle_loader…]'
    '--noall_load[This is the default. This option is obsolete.]'
    '--seg_addr_table_filename[Use path instead of the install name of the library for matching an entry in …]'
    '--sectorder[Replaced by more general -order_file option.]'
    '--sectorder_detail[Produced extra logging about which entries from a sectorder entries were used.]'
    '--lazy_framework[This is the same as the -framework name\[,suffix\] except that the linker will …]'
    '--lazy-l[This is the same as the -lx but it is only for shared libraries and the linke…]'
    '--lazy_library[This is the same as listing a file name path to a shared library on the link …]'
    '*:filename:_files'
)
_arguments -s $arguments
