#compdef clang-3

# Autogenerated from man page /usr/share/man/man1/clang-3.5.1.gz

local arguments

arguments=(
    '-E[Run the preprocessor stage.]'
    '--fsyntax-only[Run the preprocessor, parser and type checking stages.]'
    '-S[Run the previous stages as well as \\s-1LLVM\\s0 generation and optimization st…]'
    '-c[Run all of the above, plus the assembler, generating a target \\*(L".]'
    '-x[Treat subsequent input files as having type language.]:language'
    '--std[Specify the language standard to compile for.]:language'
    '--stdlib[Specify the \\*(C+ standard library to use; supported options are libstdc++ an…]:library'
    '--ansi[Same as -std=c89.]'
    '--ObjC++[Treat source input files as Objective-\\*(C+ inputs.]'
    '--ObjC[Treat source input files as Objective-C inputs.]'
    '--trigraphs[Enable trigraphs.]'
    '--ffreestanding[Indicate that the file should be compiled for a freestanding, not a hosted, e…]'
    '--fno-builtin[Disable special handling and optimizations of builtin functions like strlen a…]'
    '--fmath-errno[Indicate that math functions should be treated as updating errno.]'
    '--fpascal-strings[Enable support for Pascal-style strings with \\*(L"pfoo\\*(R".]'
    '--fms-extensions[Enable support for Microsoft extensions.]'
    '--fmsc-version[Set _MSC_VER. Defaults to 1300 on Windows. Not set otherwise.]'
    '--fborland-extensions[Enable support for Borland extensions.]'
    '--fwritable-strings[Make all string literals default to writable.]'
    '--flax-vector-conversions[Allow loose type checking rules for implicit vector conversions.]'
    '--fblocks[Enable the \\*(L"Blocks\\*(R" language feature.]'
    '--fobjc-gc-only[Indicate that Objective-C code should be compiled in GC-only mode, which only…]'
    '--fobjc-gc[Indicate that Objective-C code should be compiled in hybrid-GC mode, which wo…]'
    '--fobjc-abi-version[Select the Objective-C \\s-1ABI\\s0 version to use.]:version'
    '--fobjc-nonfragile-abi-version[Select the Objective-C non-fragile \\s-1ABI\\s0 version to use by default.]:version'
    '--fobjc-nonfragile-abi[Enable use of the Objective-C non-fragile \\s-1ABI.]'
    '--arch[Specify the architecture to build for.]:architecture'
    '--mmacosx-version-min[When building for Mac \\s-1OS X,\\s0 specify the minimum version supported by y…]:version'
    '--miphoneos-version-min[When building for iPhone \\s-1OS,\\s0 specify the minimum version supported by …]'
    '--march[Specify that Clang should generate code for a specific processor family membe…]:cpu'
    {--O0,--O1,--O2,--O3,--Ofast,--Os,--Oz,-O,--O4}'[Specify which optimization level to use: . RS 4.]'
    '-g[Generate debug information.]'
    {--fstandalone-debug,--fno-standalone-debug}'[Clang supports a number of optimizations to reduce the size of debug informat…]'
    '--fexceptions[Enable generation of unwind information, this allows exceptions to be thrown …]'
    '--ftrapv[Generate code to catch integer overflow errors.]'
    '--fvisibility[This flag sets the default visibility level.]'
    '--fcommon[This flag specifies that variables without initializers get common linkage.]'
    '--ftls-model[Set the default thread-local storage (\\s-1TLS\\s0) model to use for thread-loc…]'
    {--flto,--emit-llvm}'[Generate output files in \\s-1LLVM\\s0 formats, suitable for link time optimiza…]'
    '--###[Print (but do not run) the commands to run for this compilation.]'
    '--help[Display available options.]'
    '--Qunused-arguments[Don\t emit warning for unused driver arguments.]'
    '--Wa[Pass the comma separated arguments in args to the assembler.]'
    '--Wl[Pass the comma separated arguments in args to the linker.]'
    '--Wp[Pass the comma separated arguments in args to the preprocessor.]'
    '--Xanalyzer[Pass arg to the static analyzer.]:arg'
    '--Xassembler[Pass arg to the assembler.]:arg'
    '--Xlinker[Pass arg to the linker.]:arg'
    '--Xpreprocessor[Pass arg to the preprocessor.]:arg'
    '-o[Write output to file.]:file'
    '--print-file-name[Print the full library path of file.]:file'
    '--print-libgcc-file-name[Print the library path for \\*(L"libgcc. a\\*(R".]'
    '--print-prog-name[Print the full program path of name.]:name'
    '--print-search-dirs[Print the paths used for finding libraries and programs.]'
    '--save-temps[Save intermediate compilation results.]'
    {--integrated-as,--no-integrated-as}'[Used to enable and disable, respectively, the use of the integrated assembler.]'
    '--time[Time individual commands.]'
    '--ftime-report[Print timing summary of each stage of compilation.]'
    '-v[Show commands to run and use verbose output. SS "Diagnostics Options".]'
    {--fshow-column,--fshow-source-location,--fcaret-diagnostics,--fdiagnostics-fixit-info,--fdiagnostics-parseable-fixits,--fdiagnostics-print-source-range-info,--fprint-source-range-info,--fdiagnostics-show-option,--fmessage-length}'[These options control how Clang prints out information about diagnostics (err…]'
    '--Dmacroname[Adds an implicit #define into the predefines buffer which is read before the …]:value'
    '--Umacroname[Adds an implicit #undef into the predefines buffer which is read before the s…]'
    '--include[Adds an implicit #include into the predefines buffer which is read before the…]:filename'
    '--Idirectory[Add the specified directory to the search path for include files.]'
    '--Fdirectory[Add the specified directory to the search path for framework include files.]'
    '--nostdinc[Do not search the standard system directories or compiler builtin directories…]'
    '--nostdlibinc[Do not search the standard system directories for include files, but do searc…]'
    '*:filename:_files'
)
_arguments -s $arguments
