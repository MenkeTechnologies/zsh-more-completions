#compdef context

# Autogenerated from man page /usr/share/man/man1/context.1.gz

local arguments

arguments=(
    '--run[process (one or more) files (default action).]'
    '--make[create context formats.]'
    '--ctx[use ctx file (process management specification).]:name'
    '--noctx[ignore ctx directives and flags.]'
    '--interface[use specified user interface (default: en).]'
    '--autopdf[close pdf file in viewer and start pdf viewer afterwards.]'
    '--purge[purge files either or not after a run (--pattern=. ).]'
    '--purgeall[purge all files either or not after a run (--pattern=. ).]'
    '--usemodule[load the given module or style, normally part of the distribution.]:list'
    '--environment[load the given environment file first (document styles).]:list'
    '--mode[enable given the modes (conditional processing in styles).]:list'
    '--path[also consult the given paths when files are looked for.]:list'
    '--arguments[set variables that can be consulted during a run (key/value pairs).]:list'
    '--randomseed[set the randomseed.]:number'
    '--result[rename the resulting output to the given name.]:name'
    '--trackers[set tracker variables (show list with --showtrackers).]:list'
    '--directives[set directive variables (show list with --showdirectives).]:list'
    '--silent[disable logcatgories (show list with --showlogcategories).]:list'
    '--noconsole[disable logging to the console (logfile only).]'
    '--purgeresult[purge result file before run.]'
    '--forcexml[force xml stub.]'
    '--forcecld[force cld (context lua document) stub.]'
    '--forcelua[force lua stub (like texlua).]'
    '--forcemp[force mp stub.]'
    '--arrange[run extra imposition pass, given that the style sets up imposition.]'
    '--noarrange[ignore imposition specifications in the style.]'
    '--jit[use luajittex with jit turned off (only use the faster virtual machine).]'
    '--jiton[use luajittex with jit turned on (in most cases not faster, even slower).]'
    '--once[only run once (no multipass data file is produced).]'
    '--runs[process at most this many times.]'
    '--forcedruns[process this many times (permits for optimization trial runs).]'
    '--batchmode[run without stopping and do not show messages on the console.]'
    '--nonstopmode[run without stopping.]'
    '--synctex[run with synctex enabled (optional value: zipped, unzipped, 1, -1, context).]'
    '--syncttx[a shortcut for --synctex=context.]'
    '--nodates[omit runtime dates in pdf file (optional value: a number (this 1970 offset ti…]'
    '--nocompression[forcefully turns off compression in the backend.]'
    '--trailerid[alternative trailer id (or constant one).]'
    '--generate[generate file database etc. (as luatools does).]'
    '--paranoid[do not descend to . and . /.]'
    '--version[report installed context version.]'
    '--global[assume given file present elsewhere.]'
    '--nofile[use dummy file as jobname OPTIONS: EXPERT.]'
    '--touch[update context version number (also provide --expert, optionally provide --ba…]'
    '--nostatistics[omit runtime statistics at the end of the run.]'
    '--update[update context from website (not to be confused with contextgarden).]'
    '--profile[profile job (use: mtxrun --script profile --analyze).]'
    '--timing[generate timing and statistics overview.]'
    '--keeptuc[keep previous tuc files (jobname-tuc-\[run\]. tmp).]'
    '--keeplog[keep previous log files (jobname-log-\[run\]. tmp).]'
    '--extra[process extra (mtx-context-. in distribution).]:name'
    '--extras[show extras OPTIONS: SPECIAL.]'
    '--pdftex[process file with texexec using pdftex.]'
    '--xetex[process file with texexec using xetex.]'
    '--mkii[process file with texexec.]'
    '--pipe[do not check for file and enter scroll mode (--dummyfile=whatever. tmp).]'
    '--sandbox[process file in a limited environment AUTHOR More information about ConTeXt a…]'
    '*:filename:_files'
)
_arguments -s $arguments
