#compdef firewall-offline-cmd

# Autogenerated from man page /usr/share/man/man1/firewall-offline-cmd.1.gz

local arguments

arguments=(
    '(- * :)'{-h,--help}'[Prints a short help text and exists.]'
    {-V,--version}'[Prints the version string of firewalld and exits.]'
    {-q,--quiet}'[Do not print status messages.]'
    '--enabled[Enable the firewall.]'
    '--disabled[Disable the firewall by disabling the firewalld service.]'
    '--migrate-system-config-firewall[Migrate system-config-firewall configuration from the given file. No further.]:file'
    '--addmodule[This option will result in a warning message and will be ignored.]:module'
    '--removemodule[This option will result in a warning message and will be ignored.]'
    '--remove-service[Remove a service from the default zone.]:service'
    {-s,--service}'[Add a service to the default zone.]'
    {-p,--port}'[Add the port to the default zone.]'
    {-t,--trust}'[This option will result in a warning message. sp Mark an interface as trusted.]'
    {-m,--masq}'[This option will result in a warning message.]'
    '--custom-rules[This option will result in a warning message and will be ignored.]:type:table:filename'
    '--forward-port[This option will result in a warning message.]'
    '--block-icmp[This option will result in a warning message.]:icmptype'
    '--get-log-denied[Print the log denied setting.]'
    '--set-log-denied[Add logging rules right before reject and drop rules in the INPUT, FORWARD an…]:value'
    '--get-automatic-helpers[Print the automatic helpers setting.]'
    '--set-automatic-helpers[For the secure use of iptables and connection tracking helpers it is recommen…]:value'
    '--get-default-zone[Print default zone for connections and interfaces.]'
    '--set-default-zone[Set default zone for connections and interfaces where no zone has been select…]:zone'
    '--get-zones[Print predefined zones as a space separated list.]'
    '--get-services[Print predefined services as a space separated list.]'
    '--get-icmptypes[Print predefined icmptypes as a space separated list.]'
    '--get-zone-of-interface[Print the name of the zone the interface is bound to or no zone.]:interface'
    '--get-zone-of-source[Print the name of the zone the source is bound to or no zone.]:sourcemask|MAC|ipset:ipset'
    '--info-zone[Print information about the zone zone. The output format is: . sp . if n \\{\\.]:zone'
    '--list-all-zones[List everything added for or enabled in all zones. The output format is: .]'
    '--new-zone[Add a new permanent zone.]:zone'
    {--new-zone-from-file,--name}'[Add a new permanent zone from a prepared zone file with an optional name over…]'
    '--path-zone[Print path of the zone configuration file.]:zone'
    '--delete-zone[Delete an existing permanent zone.]:zone'
    {--zone,--set-description}'[Set new description to zone.]'
    '--get-description[Print description for zone.]'
    '--set-short[Set short description to zone.]'
    '--get-short[Print short description for zone.]'
    '--get-target[Get the target of a permanent zone.]'
    '--set-target[Set the target of a permanent zone.]'
    '--list-all[List everything added for or enabled in zone.]'
    '--list-services[List services added for zone as a space separated list.]'
    '--add-service[Add a service for zone. If zone is omitted, default zone will be used.]'
    '--remove-service-from-zone[Remove a service from zone. This option can be specified multiple times.]'
    '--query-service[Return whether service has been added for zone.]'
    '--list-ports[List ports added for zone as a space separated list.]'
    '--add-port[Add the port for zone. If zone is omitted, default zone will be used.]'
    '--remove-port[Remove the port from zone. If zone is omitted, default zone will be used.]'
    '--query-port[Return whether the port has been added for zone.]'
    '--list-protocols[List protocols added for zone as a space separated list.]'
    '--add-protocol[Add the protocol for zone. If zone is omitted, default zone will be used.]'
    '--remove-protocol[Remove the protocol from zone. If zone is omitted, default zone will be used.]'
    '--query-protocol[Return whether the protocol has been added for zone.]'
    '--list-icmp-blocks[List Internet Control Message Protocol (ICMP) type blocks added for zone as a…]'
    '--add-icmp-block[Add an ICMP block for icmptype for zone.]'
    '--remove-icmp-block[Remove the ICMP block for icmptype from zone.]'
    '--query-icmp-block[Return whether an ICMP block for icmptype has been added for zone.]'
    '--list-forward-ports[List IPv4 forward ports added for zone as a space separated list.]'
    '--add-forward-port[Add the IPv4 forward port for zone.]'
    '--remove-forward-port[Remove the IPv4 forward port from zone.]'
    '--query-forward-port[Return whether the IPv4 forward port has been added for zone.]'
    '--list-source-ports[List source ports added for zone as a space separated list.]'
    '--add-source-port[Add the source port for zone. If zone is omitted, default zone will be used.]'
    '--remove-source-port[Remove the source port from zone.]'
    '--query-source-port[Return whether the source port has been added for zone.]'
    '--add-masquerade[Enable IPv4 masquerade for zone.]'
    '--remove-masquerade[Disable IPv4 masquerade for zone.]'
    '--query-masquerade[Return whether IPv4 masquerading has been enabled for zone.]'
    '--list-rich-rules[List rich language rules added for zone as a newline separated list.]'
    '--add-rich-rule[Add rich language rule \\*(Aqrule\\*(Aq for zone.]'
    '--remove-rich-rule[Remove rich language rule \\*(Aqrule\\*(Aq from zone.]'
    '--query-rich-rule[Return whether a rich language rule \\*(Aqrule\\*(Aq has been added for zone.]'
    '--list-interfaces[List interfaces that are bound to zone zone as a space separated list.]'
    '--add-interface[Bind interface interface to zone zone.]'
    '--change-interface[Change zone the interface interface is bound to to zone zone.]'
    '--query-interface[Query whether interface interface is bound to zone zone.]'
    '--remove-interface[Remove binding of interface interface from zone zone.]'
    '--list-sources[List sources that are bound to zone zone as a space separated list.]'
    '--add-source[Bind the source to zone zone. If zone is omitted, default zone will be used.]'
    '--change-source[Change zone the source is bound to to zone zone.]'
    '--query-source[Query whether the source is bound to the zone zone.]'
    '--remove-source[Remove binding of the source from zone zone.]'
    {--new-ipset,--type,--option}'[Add a new permanent ipset with specifying the type and optional options.]'
    '--new-ipset-from-file[Add a new permanent ipset from a prepared ipset file with an optional name ov…]'
    '--delete-ipset[Delete an existing permanent ipset.]:ipset'
    '--info-ipset[Print information about the ipset ipset. The output format is: . sp .]:ipset'
    '--get-ipsets[Print predefined ipsets as a space separated list.]'
    {--ipset,--add-entry}'[Add a new entry to the ipset.]'
    '--remove-entry[Remove an entry from the ipset.]'
    '--query-entry[Return whether the entry has been added to an ipset.]'
    '--get-entries[List all entries of the ipset.]'
    '--add-entries-from-file[Add a new entries to the ipset from the file.]'
    '--remove-entries-from-file[Remove existing entries from the ipset from the file.]'
    '--path-ipset[Print path of the ipset configuration file.]:ipset'
    '--info-service[Print information about the service service. The output format is: . sp .]:service'
    '--new-service[Add a new permanent service.]:service'
    '--new-service-from-file[Add a new permanent service from a prepared service file with an optional nam…]'
    '--delete-service[Delete an existing permanent service.]:service'
    '--path-service[Print path of the service configuration file.]:service'
    '--get-ports[List ports added to the permanent service.]'
    '--get-protocols[List protocols added to the permanent service.]'
    '--get-source-ports[List source ports added to the permanent service.]'
    '--add-module[Add a new module to the permanent service.]'
    '--remove-module[Remove a module from the permanent service.]'
    '--query-module[Return wether the module has been added to the permanent service.]'
    '--get-modules[List modules added to the permanent service.]'
    '--set-destination[Set destination for ipv to address\[/mask\] in the permanent service.]'
    '--remove-destination[Remove the destination for ipv from the permanent service.]'
    '--query-destination[Return wether the destination ipv to address\[/mask\] has been set in the perma…]'
    '--get-destinations[List destinations added to the permanent service.]'
    '--info-helper[Print information about the helper helper. The output format is: . sp .]:helper'
    {--new-helper,--module,--family}'[Add a new permanent helper with module and optionally family defined.]'
    '--new-helper-from-file[Add a new permanent helper from a prepared helper file with an optional name …]'
    '--delete-helper[Delete an existing permanent helper.]:helper'
    '--load-helper-defaults[Load helper default settings or report NO_DEFAULTS error.]:helper'
    '--path-helper[Print path of the helper configuration file.]:helper'
    '--get-helpers[Print predefined helpers as a space separated list.]'
    '--helper[Set new description to helper.]'
    '--set-module[Set module description for helper.]'
    '--get-module[Print module description for helper.]'
    '--set-family[Set family description for helper.]'
    '--get-family[Print family description of helper.]'
    '--info-icmptype[Print information about the icmptype icmptype. The output format is: . sp .]:icmptype'
    '--new-icmptype[Add a new permanent icmptype.]:icmptype'
    '--new-icmptype-from-file[Add a new permanent icmptype from a prepared icmptype file with an optional n…]'
    '--delete-icmptype[Delete an existing permanent icmptype.]:icmptype'
    '--icmptype[Set new description to icmptype.]'
    '--add-destination[Enable destination for ipv in permanent icmptype. ipv is one of ipv4 or ipv6.]'
    '--path-icmptype[Print path of the icmptype configuration file.]:icmptype'
    {--direct,--get-all-chains}'[Get all chains added to all tables.]'
    '--get-chains[Get all chains added to table table as a space separated list.]'
    '--add-chain[Add a new chain with name chain to table table.]'
    '--remove-chain[Remove the chain with name chain from table table.]'
    '--query-chain[Return whether a chain with name chain exists in table table.]'
    '--get-all-rules[Get all rules added to all chains in all tables as a newline separated list o…]'
    '--get-rules[Get all rules added to chain chain in table table as a newline separated list…]'
    '--add-rule[Add a rule with the arguments args to chain chain in table table with priorit…]'
    '--remove-rule[Remove a rule with priority and the arguments args from chain chain in table …]'
    '--remove-rules[Remove all rules in the chain with name chain exists in table table.]'
    '--query-rule[Return whether a rule with priority and the arguments args exists in chain ch…]'
    '--get-all-passthroughs[Get all permanent passthrough as a newline separated list of the ipv value an…]'
    '--get-passthroughs[Get all permanent passthrough rules for the ipv value as a newline separated …]'
    '--add-passthrough[Add a permanent passthrough rule with the arguments args for the ipv value.]'
    '--remove-passthrough[Remove a permanent passthrough rule with the arguments args for the ipv value.]'
    '--query-passthrough[Return whether a permanent passthrough rule with the arguments args exists fo…]'
    '--lockdown-on[Enable lockdown.]'
    '--lockdown-off[Disable lockdown.]'
    '--query-lockdown[Query whether lockdown is enabled.]'
    '--list-lockdown-whitelist-commands[List all command lines that are on the whitelist.]'
    '--add-lockdown-whitelist-command[Add the command to the whitelist.]:command'
    '--remove-lockdown-whitelist-command[Remove the command from the whitelist.]:command'
    '--query-lockdown-whitelist-command[Query whether the command is on the whitelist.]:command'
    '--list-lockdown-whitelist-contexts[List all contexts that are on the whitelist.]'
    '--add-lockdown-whitelist-context[Add the context context to the whitelist.]:context'
    '--remove-lockdown-whitelist-context[Remove the context from the whitelist.]:context'
    '--query-lockdown-whitelist-context[Query whether the context is on the whitelist.]:context'
    '--list-lockdown-whitelist-uids[List all user ids that are on the whitelist.]'
    '--add-lockdown-whitelist-uid[Add the user id uid to the whitelist.]:uid'
    '--remove-lockdown-whitelist-uid[Remove the user id uid from the whitelist.]:uid'
    '--query-lockdown-whitelist-uid[Query whether the user id uid is on the whitelist.]:uid'
    '--list-lockdown-whitelist-users[List all user names that are on the whitelist.]'
    '--add-lockdown-whitelist-user[Add the user name user to the whitelist.]:user'
    '--remove-lockdown-whitelist-user[Remove the user name user from the whitelist.]:user'
    '--query-lockdown-whitelist-user[Query whether the user name user is on the whitelist.]:user'
    '--policy-server[Change Polkit actions to \\*(Aqserver\\*(Aq (more restricted).]'
    '--policy-desktop[Change Polkit actions to \\*(Aqdesktop\\*(Aq (less restricted).]'
    '*:filename:_files'
)
_arguments -s $arguments
