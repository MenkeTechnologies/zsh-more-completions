#compdef rndc

local curcontext="$curcontext" state line

# Autogenerated from man page /usr/share/man/man8/rndc.8.gz

function __rndc_addzone() {
  _values querylog on off
}

function __rndc_delzone() {
  _values querylog on off
}

function __rndc_dnssec() {
  _values querylog on off
}

function __rndc_dnstap() {
  _values querylog on off
}

function __rndc_dumpdb() {
  _values querylog on off
}

function __rndc_flush() {
}

function __rndc_flushname() {
  _values querylog on off
}

function __rndc_flushtree() {
  _values querylog on off
}

function __rndc_freeze() {
  _values querylog on off
}

function __rndc_halt() {
  _values -- stop '-p'
}

function __rndc_loadkeys() {
  _values querylog on off
}

function __rndc_managed-keys() {
  _values keys status refresh sync destroy
}

function __rndc_modzone() {
  _values querylog on off
}

function __rndc_notify() {
  _values querylog on off
}

function __rndc_notrace() {
  _values querylog on off
}

function __rndc_nta() {
  _values querylog on off
}

function __rndc_querylog() {
  _values querylog on off
}

function __rndc_reconfig() {
}

function __rndc_recursing() {
}

function __rndc_refresh() {
  _values querylog on off
}

function __rndc_reload() {
}

function __rndc_retransfer() {
  _values querylog on off
}

function __rndc_scan() {
  _message level
}

function __rndc_secroots() {
  _message level
}

function __rndc_serve-stale() {
  _message level
}

function __rndc_showzone() {
  _message level
}

function __rndc_sign() {
  _message level
}

function __rndc_signing() {
  _message level
}

function __rndc_stats() {
}

function __rndc_status() {
}

function __rndc_stop() {
  _values -- stop '-p'
}

function __rndc_sync() {
  _message level
}

function __rndc_tcp-timeouts() {
  _values timeout initial idle keepalive advertised
}

function __rndc_thaw() {
  _message level
}

function __rndc_trace() {
  _message level
}

function __rndc_tsig-delete() {
  _message level
}

function __rndc_tsig-list() {
  _message level
}

function __rndc_validation() {
  _values validation on off status view
}

function __rndc_zonestatus() {
  _message level
}

__rndc_commands=(
    "addzone:Add zone to given view. Requires allow-new-zones option"
    "delzone:Removes zone from given view"
    "dnssec:Show the DNSSEC signing state for the specified zone."
    "dnstap:Close, truncate and re-open the DNSTAP output file."
    "dumpdb:Dump cache(s) to the dump file (named_dump.db)."
    "flush:Flushes all of the server's caches."
    "flushname:Flush the given name from the server's cache(s)"
    "flushtree:Flush all names under the given name from the server's cache(s)"
    "freeze:Suspend updates to all dynamic zones."
    "halt:Stop the server without saving pending updates."
    "loadkeys:Update keys without signing immediately."
    "managed-keys:Check trust anchor for RFC 5011 key changes"
    "modzone:Modify a zone's configuration. Requires allow-new-zones option."
    "notify:Resend NOTIFY messages for the zone."
    "notrace:Set debugging level to 0."
    "nta:List all negative trust anchors."
    "querylog:Enable / disable query logging."
    "reconfig:Reload configuration file and new zones only."
    "recursing:Dump the queries that are currently recursing (named.recursing)"
    "refresh:Schedule immediate maintenance for a zone."
    "reload:Reload configuration file and zones."
    "retransfer:Retransfer a single zone without checking serial number."
    "scan:Scan available network interfaces for changes."
    "secroots:Write security roots to the secroots file."
    "serve-stale:Control whether stale answers are returned"
    "showzone:Print a zone's configuration."
    "sign:Update zone keys, and sign as needed."
    "signing:Remove the private records for all keys that have finished signing the given zone."
    "stats:Write server statistics to the statistics file."
    "status:Display status of the server."
    "stop:Save pending updates to master files and stop the server."
    "sync:Dump changes to all dynamic zones to disk, and optionally remove their journal files."
    "tcp-timeouts:Display the tcp-*-timeout option values"
    "thaw:Enable updates to all dynamic zones and reload them."
    "trace:Increment debugging level by one."
    "tsig-delete:Delete a TKEY-negotiated TSIG key."
    "tsig-list:List all currently active TSIG keys, including both statically configured and TKEY-negotiated keys."
    "validation:Enable / disable DNSSEC validation."
    "zonestatus:Display the current status of a zone."
    )


    #addzone zone [class [view]] { zone-options }
		#Add zone to given view. Requires allow-new-zones option.
  #delzone [-clean] zone [class [view]]
		#Removes zone from given view.
  #dnssec -status zone [class [view]]
		#Show the DNSSEC signing state for the specified zone.
		#Requires the zone to have a dnssec-policy.
  #dnstap -reopen
		#Close, truncate and re-open the DNSTAP output file.
  #dnstap -roll count
		#Close, rename and re-open the DNSTAP output file(s).
  #dumpdb [-all|-cache|-zones|-adb|-bad|-fail] [view ...]
		#Dump cache(s) to the dump file (named_dump.db).
  #flush 	Flushes all of the server's caches.
  #flush [view]	Flushes the server's cache for a view.
  #flushname name [view]
		#Flush the given name from the server's cache(s)
  #flushtree name [view]
		#Flush all names under the given name from the server's cache(s)
  #freeze	Suspend updates to all dynamic zones.
  #freeze zone [class [view]]
		#Suspend updates to a dynamic zone.
  #halt		Stop the server without saving pending updates.
  #halt -p	Stop the server without saving pending updates reporting
		#process id.
  #loadkeys zone [class [view]]
		#Update keys without signing immediately.
  #managed-keys refresh [class [view]]
		#Check trust anchor for RFC 5011 key changes
  #managed-keys status [class [view]]
		#Display RFC 5011 managed keys information
  #managed-keys sync [class [view]]
		#Write RFC 5011 managed keys to disk
  #modzone zone [class [view]] { zone-options }
		#Modify a zone's configuration.
		#Requires allow-new-zones option.
  #notify zone [class [view]]
		#Resend NOTIFY messages for the zone.
  #notrace	Set debugging level to 0.
  #nta -dump
		#List all negative trust anchors.
  #nta [-lifetime duration] [-force] domain [view]
		#Set a negative trust anchor, disabling DNSSEC validation
		#for the given domain.
		#Using -lifetime specifies the duration of the NTA, up
		#to one week.
		#Using -force prevents the NTA from expiring before its
		#full lifetime, even if the domain can validate sooner.
  #nta -remove domain [view]
		#Remove a negative trust anchor, re-enabling validation
		#for the given domain.
  #querylog [ on | off ]
		#Enable / disable query logging.
  #reconfig	Reload configuration file and new zones only.
  #recursing	Dump the queries that are currently recursing (named.recursing)
  #refresh zone [class [view]]
		#Schedule immediate maintenance for a zone.
  #reload	Reload configuration file and zones.
  #reload zone [class [view]]
		#Reload a single zone.
  #retransfer zone [class [view]]
		#Retransfer a single zone without checking serial number.
  #scan		Scan available network interfaces for changes.
  #secroots [view ...]
		#Write security roots to the secroots file.
  #serve-stale [ on | off | reset | status ] [class [view]]
		#Control whether stale answers are returned
  #showzone zone [class [view]]
		#Print a zone's configuration.
  #sign zone [class [view]]
		#Update zone keys, and sign as needed.
  #signing -clear all zone [class [view]]
		#Remove the private records for all keys that have
		#finished signing the given zone.
  #signing -clear <keyid>/<algorithm> zone [class [view]]
		#Remove the private record that indicating the given key
		#has finished signing the given zone.
  #signing -list zone [class [view]]
		#List the private records showing the state of DNSSEC
		#signing in the given zone.
  #signing -nsec3param hash flags iterations salt zone [class [view]]
		#Add NSEC3 chain to zone if already signed.
		#Prime zone with NSEC3 chain if not yet signed.
  #signing -nsec3param none zone [class [view]]
		#Remove NSEC3 chains from zone.
  #signing -serial <value> zone [class [view]]
		#Set the zones's serial to <value>.
  #stats		Write server statistics to the statistics file.
  #status	Display status of the server.
  #stop		Save pending updates to master files and stop the server.
  #stop -p	Save pending updates to master files and stop the server
		#reporting process id.
  #sync [-clean]	Dump changes to all dynamic zones to disk, and optionally
		#remove their journal files.
  #sync [-clean] zone [class [view]]
		#Dump a single zone's changes to disk, and optionally
		#remove its journal file.
  #tcp-timeouts	Display the tcp-*-timeout option values
  #tcp-timeouts initial idle keepalive advertised
		#Update the tcp-*-timeout option values
  #thaw		Enable updates to all dynamic zones and reload them.
  #thaw zone [class [view]]
		#Enable updates to a frozen dynamic zone and reload it.
  #trace		Increment debugging level by one.
  #trace level	Change the debugging level.
  #tsig-delete keyname [view]
		#Delete a TKEY-negotiated TSIG key.
  #tsig-list	List all currently active TSIG keys, including both statically
		#configured and TKEY-negotiated keys.
  #validation [ on | off | status ] [view]
		#Enable / disable DNSSEC validation.
  #zonestatus zone [class [view]]
		#Display the current status of a zone.
local arguments

arguments=(
    '-b[Use source-address as the source address for the connection to the server.]:source-address'
    '-c[Use config-file as the configuration file instead of the default, /etc/rndc.conf]:config-file'
    '-k[Use key-file as the key file instead of the default, /etc/rndc. key.]:key-file'
    '-s[server is the name or address of the server which matches a server statement …]:server:_hosts'
    '-p[Send commands to TCP port port instead of BIND 9\\*(Aqs default control channe…]:port:_ports'
    '-q[Quiet mode: Message text returned by the server will not be printed except wh…]'
    '-r[Instructs rndc to print the result code returned by named after executing the…]'
    '-V[Enable verbose logging.]'
    '-y[Use the key key_id from the configuration file.]:key_id'
    '-4[Use IPv4 only.]'
    '-6[Use IPv6 only.]'
    '1: :->verb'
    '*:: :->args'
)
_arguments -s $arguments && return 0

if (( CURRENT >= 1 )); then
        case $state in
            verb)
                _describe -t rndc-command "rndc command" __rndc_commands
                ;;
            args)
                verb=$words[1]
                curcontext="${curcontext%:*:*}:rndc-$verb:"
                __rndc_$verb

                ;;
        esac
fi
