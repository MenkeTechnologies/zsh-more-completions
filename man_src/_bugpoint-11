#compdef bugpoint-11

local arguments

arguments=(
  '--color[- Use colors in output (default=autodetect)]'
  '--O1[- Optimization level 1. Identical to opt -O1]'
  '--O2[- Optimization level 2. Identical to opt -O2]'
  '--O3[- Optimization level 3. Identical to opt -O3]'
  '--Os[- Like -O2 with extra optimizations for size. Similar to clang -Os]'
  '--Oz[- Like -Os but reduces code size further. Similar to clang -Oz]'
  '--Xlinker[- Additional arguments to pass to the linker]'
  '--aarch64-neon-syntax[- Choose style of NEON code to emit from AArch64 backend:]'
  '--abs-tolerance[- Absolute error tolerated]'
  '--additional-so[- Additional shared objects to load into executing programs]'
  '--amdgpu-bypass-slow-div[- Skip 64-bit divide for dynamic 32-bit values]'
  '--amdgpu-disable-loop-alignment[- Do not align and prefetch loops]'
  '--amdgpu-disable-power-sched[- Disable scheduling to minimize mAI power bursts]'
  '--amdgpu-dpp-combine[- Enable DPP combiner]'
  '--amdgpu-dump-hsa-metadata[- Dump AMDGPU HSA Metadata]'
  '--amdgpu-enable-global-sgpr-addr[- Enable use of SGPR regs for GLOBAL LOAD/STORE instructions]'
  '--amdgpu-enable-merge-m0[- Merge and hoist M0 initializations]'
  '--amdgpu-promote-alloca-to-vector-limit[- Maximum byte size to consider promote alloca to vector]'
  '--amdgpu-reserve-vgpr-for-sgpr-spill[- Allocates one VGPR for future SGPR Spill]'
  '--amdgpu-sdwa-peephole[- Enable SDWA peepholer]'
  '--amdgpu-verify-hsa-metadata[- Verify AMDGPU HSA Metadata]'
  '--amdgpu-vgpr-index-mode[- Use GPR indexing mode instead of movrel for vector indexing]'
  '--append-exit-code[- Append the exit code to the output so it gets diffd too]'
  '--args[...                                 - <program arguments>...]'
  '--arm-add-build-attributes[-]'
  '--arm-implicit-it[- Allow conditional instructions outdside of an IT block]'
  '--atomic-counter-update-promoted[- Do counter update using atomic fetch add  for promoted counters only]'
  '--atomic-first-counter[- Use atomic fetch add for first counter in a function (usually the entry counter)]'
  '--bounds-checking-single-trap[- Use one trap block per function]'
  '--cfg-hide-deoptimize-paths[-]'
  '--cfg-hide-unreachable-paths[-]'
  '--compile-command[- Command to compile the bitcode (use with -compile-custom) (default: llc)]'
  '--cost-kind[- Target cost kind]'
  '--cvp-dont-add-nowrap-flags[-]'
  '--debugify-level[- Kind of debug info to add]'
  '--debugify-quiet[- Suppress verbose debugify output]'
  '--disable-attribute-remove[- Do not remove function attributes]'
  '--disable-block-extraction[- Dont extract blocks when searching for miscompilations]'
  '--disable-dce[- Do not use the -dce pass to reduce testcases]'
  '--disable-global-remove[- Do not remove global variables]'
  '--disable-loop-extraction[- Dont extract loops when searching for miscompilations]'
  '--disable-namedmd-remove[- Do not remove global named metadata]'
  '--disable-pass-list-reduction[- Skip pass list reduction steps]'
  '--disable-promote-alloca-to-lds[- Disable promote alloca to LDS]'
  '--disable-promote-alloca-to-vector[- Disable promote alloca to vector]'
  '--disable-simplifycfg[- Do not use the -simplifycfg pass to reduce testcases]'
  '--disable-strip-debug-types[- Do not strip debug type info metadata]'
  '--disable-strip-debuginfo[- Do not strip debug info metadata]'
  '--do-counter-promotion[- Do counter register promotion]'
  '--emscripten-cxx-exceptions-allowed[- The list of function names in which Emscripten-style exception handling is enabled (see emscripten EMSCRIPTEN_CATCHING_ALLOWED options)]'
  '--enable-cse-in-irtranslator[- Should enable CSE in irtranslator]'
  '--enable-cse-in-legalizer[- Should enable CSE in Legalizer]'
  '--enable-emscripten-cxx-exceptions[- WebAssembly Emscripten-style exception handling]'
  '--enable-emscripten-sjlj[- WebAssembly Emscripten-style setjmp/longjmp handling]'
  '--enable-gvn-hoist[- Enable the GVN hoisting pass (default = off)]'
  '--enable-gvn-memdep[-]'
  '--enable-gvn-sink[- Enable the GVN sinking pass (default = off)]'
  '--enable-load-in-loop-pre[-]'
  '--enable-load-pre[-]'
  '--enable-loop-simplifycfg-term-folding[-]'
  '--enable-name-compression[- Enable name/filename string compression]'
  '--enable-valgrind[- Run optimizations through valgrind]'
  '--exec-command[- Command to execute the bitcode (use with -run-custom) (default: simulate)]'
  '--find-bugs[- Run many different optimization sequences on program to find bugs]'
  '--gcc[- The gcc binary to use.]'
  '--gcc-tool-args[...                        - <gcc-tool arguments>...]'
  '--gpsize[- Global Pointer Addressing Size.  The default size is 8.]'
  '--hash-based-counter-split[- Rename counter variable of a comdat function based on cfg hash]'
  '--hot-cold-split[- Enable hot-cold splitting pass]'
  '--import-all-index[- Import all external functions in index.]'
  '--aa[- Function Alias Analysis Results]'
  '--aa-eval[- Exhaustive Alias Analysis Precision Evaluator]'
  '--adce[- Aggressive Dead Code Elimination]'
  '--add-discriminators[- Add DWARF path discriminators]'
  '--aggressive-instcombine[- Combine pattern based expressions]'
  '--alignment-from-assumptions[- Alignment from assumptions]'
  '--always-inline[- Inliner for always_inline functions]'
  '--argpromotion[- Promote by reference arguments to scalars]'
  '--asan[- AddressSanitizer: detects use-after-free and out-of-bounds bugs.]'
  '--asan-globals-md[- Read metadata to mark which globals should be instrumented when running ASan.]'
  '--asan-module[- AddressSanitizer: detects use-after-free and out-of-bounds bugs.ModulePass]'
  '--assume-builder[- Assume Builder]'
  '--assume-simplify[- Assume Simplify]'
  '--assumption-cache-tracker[- Assumption Cache Tracker]'
  '--attributor[- Deduce and propagate attributes]'
  '--attributor-cgscc[- Deduce and propagate attributes (CGSCC pass)]'
  '--barrier[- A No-Op Barrier Pass]'
  '--basic-aa[- Basic Alias Analysis (stateless AA impl)]'
  '--basiccg[- CallGraph Construction]'
  '--bdce[- Bit-Tracking Dead Code Elimination]'
  '--block-freq[- Block Frequency Analysis]'
  '--bounds-checking[- Run-time bounds checking]'
  '--branch-prob[- Branch Probability Analysis]'
  '--break-crit-edges[- Break critical edges in CFG]'
  '--called-value-propagation[- Called Value Propagation]'
  '--callsite-splitting[- Call-site splitting]'
  '--canon-freeze[- Canonicalize Freeze Instructions in Loops]'
  '--canonicalize-aliases[- Canonicalize aliases]'
  '--cfl-anders-aa[- Inclusion-Based CFL Alias Analysis]'
  '--cfl-steens-aa[- Unification-Based CFL Alias Analysis]'
  '--cg-profile[- Call Graph Profile]'
  '--check-debugify[- Check debug info from -debugify]'
  '--check-debugify-function[- Check debug info from -debugify-function]'
  '--chr[- Reduce control height in the hot paths]'
  '--consthoist[- Constant Hoisting]'
  '--constmerge[- Merge Duplicate Global Constants]'
  '--constprop[- Simple constant propagation]'
  '--correlated-propagation[- Value Propagation]'
  '--cost-model[- Cost Model Analysis]'
  '--cross-dso-cfi[- Cross-DSO CFI]'
  '--da[- Dependence Analysis]'
  '--dce[- Dead Code Elimination]'
  '--deadargelim[- Dead Argument Elimination]'
  '--deadarghaX0r[- Dead Argument Hacking (BUGPOINT USE ONLY; DO NOT USE)]'
  '--debugify[- Attach debug info to everything]'
  '--debugify-function[- Attach debug info to a function]'
  '--delinearize[- Delinearization]'
  '--demanded-bits[- Demanded bits analysis]'
  '--dfsan[- DataFlowSanitizer: dynamic data flow analysis.]'
  '--die[- Dead Instruction Elimination]'
  '--div-rem-pairs[- Hoist/decompose integer division and remainder]'
  '--divergence[- Legacy Divergence Analysis]'
  '--domfrontier[- Dominance Frontier Construction]'
  '--domtree[- Dominator Tree Construction]'
  '--dot-callgraph[- Print call graph to dot file]'
  '--dot-cfg[- Print CFG of function to dot file]'
  '--dot-cfg-only[- Print CFG of function to dot file (with no function bodies)]'
  '--dot-dom[- Print dominance tree of function to dot file]'
  '--dot-dom-only[- Print dominance tree of function to dot file (with no function bodies)]'
  '--dot-postdom[- Print postdominance tree of function to dot file]'
  '--dot-postdom-only[- Print postdominance tree of function to dot file (with no function bodies)]'
  '--dot-regions[- Print regions of function to dot file]'
  '--dot-regions-only[- Print regions of function to dot file (with no function bodies)]'
  '--dot-scops[- Polly - Print Scops of function]'
  '--dot-scops-only[- Polly - Print Scops of function (with no function bodies)]'
  '--dse[- Dead Store Elimination]'
  '--early-cse[- Early CSE]'
  '--early-cse-memssa[- Early CSE w/ MemorySSA]'
  '--ee-instrument[- Instrument function entry/exit with calls to e.g. mcount() (pre inlining)]'
  '--elim-avail-extern[- Eliminate Available Externally Globals]'
  '--external-aa[- External Alias Analysis]'
  '--extract-blocks[- Extract basic blocks from module]'
  '--fix-irreducible[- Convert irreducible control-flow into natural loops]'
  '--flattencfg[- Flatten the CFG]'
  '--float2int[- Float to int]'
  '--forceattrs[- Force set function attributes]'
  '--function-import[- Summary Based Function Import]'
  '--functionattrs[- Deduce function attributes]'
  '--globaldce[- Dead Global Elimination]'
  '--globalopt[- Global Variable Optimizer]'
  '--globals-aa[- Globals Alias Analysis]'
  '--globalsplit[- Global splitter]'
  '--guard-widening[- Widen guards]'
  '--gvn[- Global Value Numbering]'
  '--gvn-hoist[- Early GVN Hoisting of Expressions]'
  '--gvn-sink[- Early GVN sinking of Expressions]'
  '--hotcoldsplit[- Hot Cold Splitting]'
  '--hwasan[- HWAddressSanitizer: detect memory bugs using tagged addressing.]'
  '--indvars[- Induction Variable Simplification]'
  '--infer-address-spaces[- Infer address spaces]'
  '--inferattrs[- Infer set function attributes]'
  '--inject-tli-mappings[- Inject TLI Mappings]'
  '--inline[- Function Integration/Inlining]'
  '--insert-gcov-profiling[- Insert instrumentation for GCOV profiling]'
  '--instcombine[- Combine redundant instructions]'
  '--instcount[- Counts the various types of Instructions]'
  '--instnamer[- Assign names to anonymous instructions]'
  '--instrorderfile[- Instrumentation for Order File]'
  '--instrprof[- Frontend instrumentation-based coverage lowering.]'
  '--instsimplify[- Remove redundant instructions]'
  '--internalize[- Internalize Global Symbols]'
  '--intervals[- Interval Partition Construction]'
  '--ipconstprop[- Interprocedural constant propagation]'
  '--ipsccp[- Interprocedural Sparse Conditional Constant Propagation]'
  '--irce[- Inductive range check elimination]'
  '--iv-users[- Induction Variable Users]'
  '--jump-threading[- Jump Threading]'
  '--lazy-block-freq[- Lazy Block Frequency Analysis]'
  '--lazy-branch-prob[- Lazy Branch Probability Analysis]'
  '--lazy-value-info[- Lazy Value Information Analysis]'
  '--lcssa[- Loop-Closed SSA Form Pass]'
  '--lcssa-verification[- LCSSA Verifier]'
  '--libcalls-shrinkwrap[- Conditionally eliminate dead library calls]'
  '--licm[- Loop Invariant Code Motion]'
  '--lint[- Statically lint-checks LLVM IR]'
  '--load-store-vectorizer[- Vectorize load and store instructions]'
  '--loop-accesses[- Loop Access Analysis]'
  '--loop-data-prefetch[- Loop Data Prefetch]'
  '--loop-deletion[- Delete dead loops]'
  '--loop-distribute[- Loop Distribution]'
  '--loop-extract[- Extract loops into new functions]'
  '--loop-extract-single[- Extract at most one loop into a new function]'
  '--loop-fusion[- Loop Fusion]'
  '--loop-guard-widening[- Widen guards (within a single loop, as a loop pass)]'
  '--loop-idiom[- Recognize loop idioms]'
  '--loop-instsimplify[- Simplify instructions in loops]'
  '--loop-interchange[- Interchanges loops for cache reuse]'
  '--loop-load-elim[- Loop Load Elimination]'
  '--loop-predication[- Loop predication]'
  '--loop-reduce[- Loop Strength Reduction]'
  '--loop-reroll[- Reroll loops]'
  '--loop-rotate[- Rotate Loops]'
  '--loop-simplify[- Canonicalize natural loops]'
  '--loop-simplifycfg[- Simplify loop CFG]'
  '--loop-sink[- Loop Sink]'
  '--loop-unroll[- Unroll loops]'
  '--loop-unroll-and-jam[- Unroll and Jam loops]'
  '--loop-unswitch[- Unswitch loops]'
  '--loop-vectorize[- Loop Vectorization]'
  '--loop-versioning[- Loop Versioning]'
  '--loop-versioning-licm[- Loop Versioning For LICM]'
  '--loops[- Natural Loop Information]'
  '--lower-constant-intrinsics[- Lower constant intrinsics]'
  '--lower-expect[- Lower expect Intrinsics]'
  '--lower-guard-intrinsic[- Lower the guard intrinsic to normal control flow]'
  '--lower-matrix-intrinsics[- Lower the matrix intrinsics]'
  '--lower-widenable-condition[- Lower the widenable condition to default true value]'
  '--loweratomic[- Lower atomic intrinsics to non-atomic form]'
  '--lowerinvoke[- Lower invoke and unwind, for unwindless code generators]'
  '--lowerswitch[- Lower SwitchInsts to branches]'
  '--lowertypetests[- Lower type metadata]'
  '--make-guards-explicit[- Lower the guard intrinsic to explicit control flow form]'
  '--mem2reg[- Promote Memory to Register]'
  '--memcpyopt[- MemCpy Optimization]'
  '--memdep[- Memory Dependence Analysis]'
  '--memoryssa[- Memory SSA]'
  '--mergefunc[- Merge Functions]'
  '--mergeicmps[- Merge contiguous icmps into a memcmp]'
  '--mergereturn[- Unify function exit nodes]'
  '--metarenamer[- Assign new names to everything]'
  '--mldst-motion[- MergedLoadStoreMotion]'
  '--module-debuginfo[- Decodes module-level debug info]'
  '--module-summary-analysis[- Module Summary Analysis]'
  '--module-summary-info[- Module summary info]'
  '--msan[- MemorySanitizer: detects uninitialized reads.]'
  '--name-anon-globals[- Provide a name to nameless globals]'
  '--nary-reassociate[- Nary reassociation]'
  '--newgvn[- Global Value Numbering]'
  '--objc-arc[- ObjC ARC optimization]'
  '--objc-arc-aa[- ObjC-ARC-Based Alias Analysis]'
  '--objc-arc-apelim[- ObjC ARC autorelease pool elimination]'
  '--objc-arc-contract[- ObjC ARC contraction]'
  '--objc-arc-expand[- ObjC ARC expansion]'
  '--openmpopt[- OpenMP specific optimizations]'
  '--opt-remark-emitter[- Optimization Remark Emitter]'
  '--pa-eval[- Evaluate ProvenanceAnalysis on all pairs]'
  '--partial-inliner[- Partial Inliner]'
  '--partially-inline-libcalls[- Partially inline calls to library functions]'
  '--pgo-icall-prom[- Use PGO instrumentation profile to promote indirect calls to direct calls.]'
  '--pgo-instr-gen[- PGO instrumentation.]'
  '--pgo-instr-use[- Read PGO instrumentation profile.]'
  '--pgo-memop-opt[- Optimize memory intrinsic using its size value profile]'
  '--phi-values[- Phi Values Analysis]'
  '--place-backedge-safepoints-impl[- Place Backedge Safepoints]'
  '--place-safepoints[- Place Safepoints]'
  '--polly-ast[- Polly - Generate an AST from the SCoP (isl)]'
  '--polly-canonicalize[- Polly - Run canonicalization passes]'
  '--polly-cleanup[- Polly - Cleanup after code generation]'
  '--polly-codegen[- Polly - Create LLVM-IR from SCoPs]'
  '--polly-dce[- Polly - Remove dead iterations]'
  '--polly-delicm[- Polly - DeLICM/DePRE]'
  '--polly-dependences[- Polly - Calculate dependences]'
  '--polly-detect[- Polly - Detect static control parts (SCoPs)]'
  '--polly-dump-module[- Polly - Dump Module]'
  '--polly-export-jscop[- Polly - Export Scops as JSON (Writes a .jscop file for each Scop)]'
  '--polly-flatten-schedule[- Polly - Flatten schedule]'
  '--polly-function-dependences[- Polly - Calculate dependences for all the SCoPs of a function]'
  '--polly-function-scops[- Polly - Create polyhedral description of all Scops of a function]'
  '--polly-import-jscop[- Polly - Import Scops from JSON (Reads a .jscop file for each Scop)]'
  '--polly-mse[- Polly - Maximal static expansion of SCoP]'
  '--polly-opt-isl[- Polly - Optimize schedule of SCoP]'
  '--polly-optree[- Polly - Forward operand tree]'
  '--polly-prepare[- Polly - Prepare code for polly]'
  '--polly-prune-unprofitable[- Polly - Prune unprofitable SCoPs]'
  '--polly-rewrite-byref-params[- Polly - Rewrite by reference parameters]'
  '--polly-scop-inliner[- inline functions based on how much of the function is a scop.]'
  '--polly-scops[- Polly - Create polyhedral description of Scops]'
  '--polly-simplify[- Polly - Simplify]'
  '--polyhedral-info[- Polly - Interface to polyhedral analysis engine]'
  '--post-inline-ee-instrument[- Instrument function entry/exit with calls to e.g. mcount() (post inlining)]'
  '--postdomtree[- Post-Dominator Tree Construction]'
  '--print-alias-sets[- Alias Set Printer]'
  '--print-callgraph[- Print a call graph]'
  '--print-function[- Print function to stderr]'
  '--print-lazy-value-info[- Lazy Value Info Printer Pass]'
  '--print-memdeps[- Print MemDeps of function]'
  '--print-memderefs[- Memory Dereferenciblity of pointers in function]'
  '--print-memoryssa[- Memory SSA Printer]'
  '--print-module[- Print module to stderr]'
  '--print-must-be-executed-contexts[- print the must-be-executed-contexed for all instructions]'
  '--print-mustexecute[- Instructions which execute on loop entry]'
  '--print-predicateinfo[- PredicateInfo Printer]'
  '--profile-summary-info[- Profile summary info]'
  '--prune-eh[- Remove unused exception handling info]'
  '--reassociate[- Reassociate expressions]'
  '--redundant-dbg-inst-elim[- Redundant Dbg Instruction Elimination]'
  '--reg2mem[- Demote all values to stack slots]'
  '--regions[- Detect single entry single exit regions]'
  '--rewrite-statepoints-for-gc[- Make relocations explicit at statepoints]'
  '--rpo-functionattrs[- Deduce function attributes in RPO]'
  '--sample-profile[- Sample Profile loader]'
  '--sancov[- Pass for instrumenting coverage on functions]'
  '--scalar-evolution[- Scalar Evolution Analysis]'
  '--scalarizer[- Scalarize vector operations]'
  '--sccp[- Sparse Conditional Constant Propagation]'
  '--scev-aa[- ScalarEvolution-based Alias Analysis]'
  '--scoped-noalias[- Scoped NoAlias Alias Analysis]'
  '--separate-const-offset-from-gep[- Split GEPs to a variadic base and a constant offset for better CSE]'
  '--simple-loop-unswitch[- Simple unswitch loops]'
  '--simplifycfg[- Simplify the CFG]'
  '--sink[- Code sinking]'
  '--slp-vectorizer[- SLP Vectorizer]'
  '--slsr[- Straight line strength reduction]'
  '--speculative-execution[- Speculatively execute instructions]'
  '--sroa[- Scalar Replacement Of Aggregates]'
  '--stack-safety[- Stack Safety Analysis]'
  '--stack-safety-local[- Stack Safety Local Analysis]'
  '--strip[- Strip all symbols from a module]'
  '--strip-dead-debug-info[- Strip debug info for unused symbols]'
  '--strip-dead-prototypes[- Strip Unused Function Prototypes]'
  '--strip-debug-declare[- Strip all llvm.dbg.declare intrinsics]'
  '--strip-gc-relocates[- Strip gc.relocates inserted through RewriteStatepointsForGC]'
  '--strip-nondebug[- Strip all symbols, except dbg symbols, from a module]'
  '--strip-nonlinetable-debuginfo[- Strip all debug info except linetables]'
  '--structurizecfg[- Structurize the CFG]'
  '--tailcallelim[- Tail Call Elimination]'
  '--targetlibinfo[- Target Library Information]'
  '--tbaa[- Type-Based Alias Analysis]'
  '--transform-warning[- Warn about non-applied transformations]'
  '--tsan[- ThreadSanitizer: detects data races.]'
  '--tti[- Target Transform Information]'
  '--unify-loop-exits[- Fixup each natural loop to have a single exit block]'
  '--unique-internal-linkage-names[- Uniqueify Internal linkage names]'
  '--vector-combine[- Optimize scalar/vector ops]'
  '--verify[- Module Verifier]'
  '--verify-safepoint-ir[- Safepoint IR Verifier]'
  '--view-callgraph[- View call graph]'
  '--view-cfg[- View CFG of function]'
  '--view-cfg-only[- View CFG of function (with no function bodies)]'
  '--view-dom[- View dominance tree of function]'
  '--view-dom-only[- View dominance tree of function (with no function bodies)]'
  '--view-postdom[- View postdominance tree of function]'
  '--view-postdom-only[- View postdominance tree of function (with no function bodies)]'
  '--view-regions[- View regions of function]'
  '--view-regions-only[- View regions of function (with no function bodies)]'
  '--view-scops[- Polly - View Scops of function]'
  '--view-scops-only[- Polly - View Scops of function (with no function bodies)]'
  '--wholeprogramdevirt[- Whole program devirtualization]'
  '--input[- Filename to pipe in as stdin (default: /dev/null)]'
  '--instcombine-code-sinking[- Enable code sinking]'
  '--instcombine-guard-widening-window[- How wide an instruction window to bypass looking for another guard]'
  '--instcombine-max-iterations[- Limit the maximum number of instruction combining iterations]'
  '--instcombine-max-num-phis[- Maximum number phis to handle in intptr/ptrint folding]'
  '--instcombine-maxarray-size[- Maximum array size considered when doing a combine]'
  '--instcombine-negator-enabled[- Should we attempt to sink negations?]'
  '--instcombine-negator-max-depth[- What is the maximal lookup depth when trying to check for viability of negation sinking.]'
  '--instrprof-atomic-counter-update-all[- Make all profile counter updates atomic (for testing only)]'
  '--internalize-public-api-file[- A file containing list of symbol names to preserve]'
  '--internalize-public-api-list[- A list of symbol names to preserve]'
  '--iterative-counter-promotion[- Allow counter promotion across the whole loop nest.]'
  '--keep-main[- Force function reduction to keep main]'
  '--load[- Load the specified plugin]'
  '--lto-embed-bitcode[- Embed LLVM bitcode in object files produced by LTO]'
  '--lto-pass-remarks-filter[- Only record optimization remarks from passes whose names match the given regular expression]'
  '--lto-pass-remarks-format[- The format used for serializing remarks (default: YAML)]'
  '--lto-pass-remarks-output[- Output filename for pass remarks]'
  '--matrix-default-layout[- Sets the default matrix layout]'
  '--max-counter-promotions[- Max number of allowed counter promotions]'
  '--max-counter-promotions-per-loop[- Max number counter promotions per loop to avoid increasing register pressure too much]'
  '--memop-size-large[- Set large value thresthold in memory intrinsic size profiling. Value of 0 disables the large value profiling.]'
  '--memop-size-range[- Set the range of size in memory intrinsic calls to be profiled precisely, in a format of <start_val>:<end_val>]'
  '--merror-missing-parenthesis[- Error for missing parenthesis around predicate registers]'
  '--merror-noncontigious-register[- Error for register names that arent contigious]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mips-compact-branches[- MIPS Specific: Compact branch policy.]'
  '--mips16-constant-islands[- Enable mips16 constant islands.]'
  '--mips16-hard-float[- Enable mips16 hard float.]'
  '--mir-strip-debugify-only[- Should mir-strip-debug only strip debug info from debugified modules by default]'
  '--mlimit[- Maximum amount of memory to use. 0 disables check. Defaults to 400MB (800MB under valgrind, 0 with sanitizers).]'
  '--mno-compound[- Disable looking for compound instructions for Hexagon]'
  '--mno-fixup[- Disable fixing up resolved relocations for Hexagon]'
  '--mno-ldc1-sdc1[- Expand double precision loads and stores to their single precision counterparts]'
  '--mno-pairing[- Disable looking for duplex instructions for Hexagon]'
  '--mtriple[- Override target triple for module]'
  '--mwarn-missing-parenthesis[- Warn for missing parenthesis around predicate registers]'
  '--mwarn-noncontigious-register[- Warn for register names that arent contigious]'
  '--mwarn-sign-mismatch[- Warn for mismatching a signed and unsigned value]'
  '--no-discriminators[- Disable generation of discriminator information.]'
  '--nvptx-sched4reg[- NVPTX Specific: schedule for register pressue]'
  '--opt-args[...                             - <opt arguments>...]'
  '--opt-command[- Path to opt. (default: search path for opt.)]'
  '--output[- Specify a reference program output (for miscompilation detection)]'
  '--output-prefix[- Prefix to use for outputs (default: bugpoint)]'
  '--poison-checking-function-local[- Check that returns are non-poison (for testing)]'
  '--r600-ir-structurize[- Use StructurizeCFG IR pass]'
  '--rdf-dump[-]'
  '--rdf-limit[-]'
  '--rel-tolerance[- Relative error tolerated]'
  '--remote-client[- Remote execution client (rsh/ssh)]'
  '--remote-extra-options[- Remote execution (rsh/ssh) extra options]'
  '--remote-host[- Remote execution (rsh/ssh) host]'
  '--remote-port[- Remote execution (rsh/ssh) port]'
  '--remote-user[- Remote execution (rsh/ssh) user id]'
  '--replace-funcs-with-null[- When stubbing functions, replace all uses will null]'
  '--auto[- Use best guess]'
  '--run-int[- Execute with the interpreter]'
  '--run-jit[- Execute with JIT]'
  '--run-llc[- Compile with LLC]'
  '--run-llc-ia[- Compile with LLC with integrated assembler]'
  '--llc-safe[- Use LLC for all]'
  '--compile-custom[- Use -compile-command to define a command to compile the bitcode. Useful to avoid linking.]'
  '--run-custom[- Use -exec-command to define a command to execute the bitcode. Useful for cross-compilation.]'
  '--runtime-counter-relocation[- Enable relocating counters at runtime.]'
  '--safe-path[- Specify the path to the "safe" backend program]'
  '--safe-auto[- Use best guess]'
  '--safe-run-llc[- Compile with LLC]'
  '--safe-run-custom[- Use -exec-command to define a command to execute the bitcode. Useful for cross-compilation.]'
  '--safe-tool-args[...                       - <safe-tool arguments>...]'
  '--safepoint-ir-verifier-print-only[-]'
  '--sample-profile-check-record-coverage[- Emit a warning if less than N% of records in the input profile are matched to the IR.]'
  '--sample-profile-check-sample-coverage[- Emit a warning if less than N% of samples in the input profile are matched to the IR.]'
  '--sample-profile-max-propagate-iterations[- Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.]'
  '--save-temps[- Save temporary files]'
  '--silence-passes[- Suppress output of running passes (both stdout and stderr)]'
  '--speculative-counter-promotion-max-exiting[- The max number of exiting blocks of a loop to allow  speculative counter promotion]'
  '--speculative-counter-promotion-to-loop[- When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region.]'
  '--std-link-opts[- Include the standard link time optimizations]'
  '--summary-file[- The summary file to use for function importing.]'
  '--tail-predication[- MVE tail-predication options]'
  '--threads[-]'
  '--timeout[- Number of seconds program is allowed to run before it is killed (default is 300s), 0 disables timeout]'
  '--tool-args[...                            - <tool arguments>...]'
  '--verbose-errors[- Print the output of crashing program]'
  '--verify-region-info[- Verify region info (time consuming)]'
  '--vp-counters-per-site[- The average number of profile counters allocated per value profiling site.]'
  '--vp-static-alloc[- Do static counter allocation for value profiler]'
  '--x86-align-branch[- Specify types of branches to align (plus separated list of types):]'
  '--x86-align-branch-boundary[- Control how the assembler should align branches with NOP. If the boundarys size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches.]'
  '--x86-branches-within-32B-boundaries[- Align selected instructions to mitigate negative performance impact of Intels micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution.]'
  '--x86-pad-max-prefix-size[- Maximum number of prefixes to use for padding]'
  '--help[- Display available options (--help-hidden for more)]'
  '--help-list[- Display list of available options (--help-list-hidden for more)]'
  '--version[- Display the version of this program]'
  '--polly[- Enable the polly optimizer (only at -O3)]'
  '--polly-2nd-level-tiling[- Enable a 2nd level loop of loop tiling]'
  '--polly-ast-print-accesses[- Print memory access functions]'
  '--polly-context[parameter set>                - Provide additional constraints on the context parameters]'
  '--polly-dce-precise-steps[- The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.]'
  '--polly-delicm-max-ops[- Maximum number of isl operations to invest for lifetime analysis; 0=no limit]'
  '--polly-detect-full-functions[- Allow the detection of full functions]'
  '--polly-dump-after[- Dump module after Polly transformations into a file suffixed with "-after"]'
  '--polly-dump-after-file[- Dump module after Polly transformations to the given file]'
  '--polly-dump-before[- Dump module before Polly transformations into a file suffixed with "-before"]'
  '--polly-dump-before-file[- Dump module before Polly transformations to the given file]'
  '--polly-enable-simplify[- Simplify SCoP after optimizations]'
  '--polly-ignore-func[- Ignore functions that match a regex. Multiple regexes can be comma separated. Scop detection will ignore all functions that match ANY of the regexes provided.]'
  '--polly-isl-arg[- Option passed to ISL]'
  '--polly-on-isl-error-abort[- Abort if an isl error is encountered]'
  '--polly-only-func[- Only run on functions that match a regex. Multiple regexes can be comma separated. Scop detection will run on all functions that match ANY of the regexes provided.]'
  '--polly-only-region[- Only run on certain regions (The provided identifier must appear in the name of the regions entry block]'
  '--polly-only-scop-detection[- Only run scop detection, but no other optimizations]'
  '--polly-optimized-scops[- Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree]'
  '--polly-parallel[- Generate thread parallel code (isl codegen only)]'
  '--polly-parallel-force[- Force generation of thread parallel code ignoring any cost model]'
  '--polly-pattern-matching-based-opts[- Perform optimizations based on pattern matching]'
  '--polly-process-unprofitable[- Process scops that are unlikely to benefit from Polly optimizations.]'
  '--polly-register-tiling[- Enable register tiling]'
  '--polly-report[- Print information about the activities of Polly]'
  '--polly-show[- Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)]'
  '--polly-show-only[- Highlight the code regions that will be optimized in a (CFG only BBs)]'
  '--polly-stmt-granularity[- Algorithm to use for splitting basic blocks into multiple statements]'
  '--polly-target[- The hardware to target]'
  '--polly-tiling[- Enable loop tiling]'
  '--polly-vectorizer[- Select the vectorization strategy]'
  '*:filename:_files'
)

_arguments -s $arguments
