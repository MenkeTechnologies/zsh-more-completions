#compdef lli-10

local arguments

arguments=(
  '--color[- Use colors in output (default=autodetect)]'
  '-O[- Optimization level. \[-O0, -O1, -O2, or -O3\] (default = -O2)]'
  '--aarch64-neon-syntax[- Choose style of NEON code to emit from AArch64 backend:]'
  '--addrsig[- Emit an address-significance table]'
  '--amdgpu-disable-loop-alignment[- Do not align and prefetch loops]'
  '--amdgpu-disable-power-sched[- Disable scheduling to minimize mAI power bursts]'
  '--amdgpu-dpp-combine[- Enable DPP combiner]'
  '--amdgpu-dump-hsa-metadata[- Dump AMDGPU HSA Metadata]'
  '--amdgpu-enable-global-sgpr-addr[- Enable use of SGPR regs for GLOBAL LOAD/STORE instructions]'
  '--amdgpu-enable-merge-m0[- Merge and hoist M0 initializations]'
  '--amdgpu-sdwa-peephole[- Enable SDWA peepholer]'
  '--amdgpu-verify-hsa-metadata[- Verify AMDGPU HSA Metadata]'
  '--amdgpu-vgpr-index-mode[- Use GPR indexing mode instead of movrel for vector indexing]'
  '--arm-add-build-attributes[-]'
  '--arm-implicit-it[- Allow conditional instructions outdside of an IT block]'
  '--asm-show-inst[- Emit internal instruction representation to assembly file]'
  '--atomic-counter-update-promoted[- Do counter update using atomic fetch add  for promoted counters only]'
  '--bounds-checking-single-trap[- Use one trap block per function]'
  '--code-model[- Choose code model]'
  '--compile-threads[- Choose the number of compile threads (jit-kind=orc-lazy only)]'
  '--cost-kind[- Target cost kind]'
  '--cvp-dont-add-nowrap-flags[-]'
  '--data-sections[- Emit data into separate sections]'
  '--debug-entry-values[- Emit debug info about parameters entry values]'
  '--debugger-tune[- Tune debug info for a particular debugger]'
  '--debugify-quiet[- Suppress verbose debugify output]'
  '--denormal-fp-math[- Select which denormal numbers the code is permitted to require]'
  '--disable-lazy-compilation[- Disable JIT lazy compilation]'
  '--disable-promote-alloca-to-lds[- Disable promote alloca to LDS]'
  '--disable-promote-alloca-to-vector[- Disable promote alloca to vector]'
  '--disable-tail-calls[- Never emit tail calls]'
  '--do-counter-promotion[- Do counter register promotion]'
  '--dwarf-version[- Dwarf version]'
  '--emscripten-cxx-exceptions-whitelist[- The list of function names in which Emscripten-style exception handling is enabled (see emscripten EMSCRIPTEN_CATCHING_WHITELIST options)]'
  '--emulated-tls[- Use emulated TLS model]'
  '--enable-cache-manager[- Use cache manager to save/load modules]'
  '--enable-cse-in-irtranslator[- Should enable CSE in irtranslator]'
  '--enable-cse-in-legalizer[- Should enable CSE in Legalizer]'
  '--enable-emscripten-cxx-exceptions[- WebAssembly Emscripten-style exception handling]'
  '--enable-emscripten-sjlj[- WebAssembly Emscripten-style setjmp/longjmp handling]'
  '--enable-gvn-memdep[-]'
  '--enable-load-pre[-]'
  '--enable-loop-simplifycfg-term-folding[-]'
  '--enable-name-compression[- Enable name string compression]'
  '--enable-no-infs-fp-math[- Enable FP math optimizations that assume no +-Infs]'
  '--enable-no-nans-fp-math[- Enable FP math optimizations that assume no NaNs]'
  '--enable-no-signed-zeros-fp-math[- Enable FP math optimizations that assume the sign of 0 is insignificant]'
  '--enable-no-trapping-fp-math[- Enable setting the FP exceptions build attribute not to use exceptions]'
  '--enable-unsafe-fp-math[- Enable optimizations that may decrease FP precision]'
  '--entry-function[- Specify the entry function (default = main) of the executable]'
  '--exception-model[- exception model]'
  '--expensive-combines[- Enable expensive instruction combines]'
  '--extra-archive[archive>                     - Extra archive files to be loaded]'
  '--extra-module[bitcode>                      - Extra modules to be loaded]'
  '--extra-object[object>                       - Extra object files to be loaded]'
  '--fake-argv0[- Override the argv\[0\] value passed into the executing program]'
  '--fatal-warnings[- Treat warnings as errors]'
  '--filetype[- Choose a file type (not all types are supported by all targets):]'
  '--float-abi[- Choose float ABI type]'
  '--force-dwarf-frame-section[- Always emit a debug frame section.]'
  '--force-interpreter[- Force interpretation: disable JIT]'
  '--fp-contract[- Enable aggressive formation of fused FP ops]'
  '--frame-pointer[- Specify frame pointer elimination optimization]'
  '--function-sections[- Emit functions into separate sections]'
  '--gpsize[- Global Pointer Addressing Size.  The default size is 8.]'
  '--hash-based-counter-split[- Rename counter variable of a comdat function based on cfg hash]'
  '--import-all-index[- Import all external functions in index.]'
  '--incremental-linker-compatible[- When used with filetype=obj, emit an object file which can be used with an incremental linker]'
  '--instcombine-code-sinking[- Enable code sinking]'
  '--instcombine-guard-widening-window[- How wide an instruction window to bypass looking for another guard]'
  '--instcombine-max-iterations[- Limit the maximum number of instruction combining iterations]'
  '--instcombine-max-num-phis[- Maximum number phis to handle in intptr/ptrint folding]'
  '--instcombine-maxarray-size[- Maximum array size considered when doing a combine]'
  '--instrprof-atomic-counter-update-all[- Make all profile counter updates atomic (for testing only)]'
  '--internalize-public-api-file[- A file containing list of symbol names to preserve]'
  '--internalize-public-api-list[- A list of symbol names to preserve]'
  '--iterative-counter-promotion[- Allow counter promotion across the whole loop nest.]'
  '--jd[- Specifies the JITDylib to be used for any subsequent -extra-module arguments.]'
  '--jit-kind[- Choose underlying JIT kind.]'
  '--load[- Load the specified plugin]'
  '--lto-embed-bitcode[- Embed LLVM bitcode in object files produced by LTO]'
  '--lto-pass-remarks-filter[- Only record optimization remarks from passes whose names match the given regular expression]'
  '--lto-pass-remarks-format[- The format used for serializing remarks (default: YAML)]'
  '--lto-pass-remarks-output[- Output filename for pass remarks]'
  '--march[- Architecture to generate code for (see --version)]'
  '--matrix-propagate-shape[-]'
  '--mattr[1,+a2,-a3,...>                            - Target specific attributes (-mattr=help for details)]'
  '--max-counter-promotions[- Max number of allowed counter promotions]'
  '--max-counter-promotions-per-loop[- Max number counter promotions per loop to avoid increasing register pressure too much]'
  '--mc-relax-all[- When used with filetype=obj, relax all fixups in the emitted object file]'
  '--mcjit-remote-process[- Specify the filename of the process to launch for remote MCJIT execution.  If none is specified]'
  '--mcpu[- Target a specific cpu type (-mcpu=help for details)]'
  '--meabi[- Set EABI type (default depends on triple):]'
  '--memop-size-large[- Set large value thresthold in memory intrinsic size profiling. Value of 0 disables the large value profiling.]'
  '--memop-size-range[- Set the range of size in memory intrinsic calls to be profiled precisely, in a format of <start_val>:<end_val>]'
  '--merror-missing-parenthesis[- Error for missing parenthesis around predicate registers]'
  '--merror-noncontigious-register[- Error for register names that arent contigious]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mhvx[- Enable Hexagon Vector eXtensions]'
  '--mips-compact-branches[- MIPS Specific: Compact branch policy.]'
  '--mips16-constant-islands[- Enable mips16 constant islands.]'
  '--mips16-hard-float[- Enable mips16 hard float.]'
  '--mno-compound[- Disable looking for compound instructions for Hexagon]'
  '--mno-fixup[- Disable fixing up resolved relocations for Hexagon]'
  '--mno-ldc1-sdc1[- Expand double precision loads and stores to their single precision counterparts]'
  '--mno-pairing[- Disable looking for duplex instructions for Hexagon]'
  '--mtriple[- Override target triple for module]'
  '--mwarn-missing-parenthesis[- Warn for missing parenthesis around predicate registers]'
  '--mwarn-noncontigious-register[- Warn for register names that arent contigious]'
  '--mwarn-sign-mismatch[- Warn for mismatching a signed and unsigned value]'
  '--no-deprecated-warn[- Suppress all deprecated warnings]'
  '--no-discriminators[- Disable generation of discriminator information.]'
  '--no-process-syms[- Do not resolve lli process symbols in JITd code]'
  '--no-warn[- Suppress all warnings]'
  '--nozero-initialized-in-bss[- Dont place zero-initialized symbols into bss section]'
  '--nvptx-sched4reg[- NVPTX Specific: schedule for register pressue]'
  '--object-cache-dir[- Directory to store cached object files (must be user writable)]'
  '--per-module-lazy[- Performs lazy compilation on whole module boundaries rather than individual functions]'
  '--poison-checking-function-local[- Check that returns are non-poison (for testing)]'
  '--r600-ir-structurize[- Use StructurizeCFG IR pass]'
  '--rdf-dump[-]'
  '--rdf-limit[-]'
  '--relax-elf-relocations[- Emit GOTPCRELX/REX_GOTPCRELX instead of GOTPCREL on x86-64 ELF]'
  '--relocation-model[- Choose relocation model]'
  '--remote-mcjit[- Execute MCJITed code in a separate process.]'
  '--safepoint-ir-verifier-print-only[-]'
  '--sample-profile-check-record-coverage[- Emit a warning if less than N% of records in the input profile are matched to the IR.]'
  '--sample-profile-check-sample-coverage[- Emit a warning if less than N% of samples in the input profile are matched to the IR.]'
  '--sample-profile-max-propagate-iterations[- Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.]'
  '--soft-float[- Generate software floating point library calls]'
  '--speculative-counter-promotion-max-exiting[- The max number of exiting blocks of a loop to allow  speculative counter promotion]'
  '--speculative-counter-promotion-to-loop[- When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region.]'
  '--stack-alignment[- Override default stack alignment]'
  '--stack-size-section[- Emit a section containing stack size metadata]'
  '--stack-symbol-ordering[- Order local stack symbols.]'
  '--stackrealign[- Force align the stack to the minimum alignment]'
  '--summary-file[- The summary file to use for function importing.]'
  '--tailcallopt[- Turn fastcc calls into tail calls by (potentially) changing ABI.]'
  '--thread-entry[- calls the given entry-point on a new thread (jit-kind=orc-lazy only)]'
  '--thread-model[- Choose threading model]'
  '--threads[-]'
  '--tls-size[- Bit size of immediate TLS offsets]'
  '--unique-section-names[- Give unique names to every section]'
  '--use-ctors[- Use .ctors instead of .init_array.]'
  '--verify-region-info[- Verify region info (time consuming)]'
  '--vp-counters-per-site[- The average number of profile counters allocated per value profiling site.]'
  '--vp-static-alloc[- Do static counter allocation for value profiler]'
  '--x86-align-branch[(plus separated list of types)> - Specify types of branches to align. The branchess types are combination of jcc, fused, jmp, call, ret, indirect. jcc indicates conditional jumps, fused indicates fused conditional jumps, jmp indicates unconditional jumps, call indicates direct and indirect calls, ret indicates rets, indirect indicates indirect jumps.]'
  '--x86-align-branch-boundary[- Control how the assembler should align branches with NOP. If the boundarys size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches.]'
  '--x86-branches-within-32B-boundaries[- Align selected instructions to mitigate negative performance impact of Intels micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution.]'
  '--help[- Display available options (--help-hidden for more)]'
  '--help-list[- Display list of available options (--help-list-hidden for more)]'
  '--version[- Display the version of this program]'
  '--polly[- Enable the polly optimizer (only at -O3)]'
  '--polly-2nd-level-tiling[- Enable a 2nd level loop of loop tiling]'
  '--polly-ast-print-accesses[- Print memory access functions]'
  '--polly-context[parameter set>                 - Provide additional constraints on the context parameters]'
  '--polly-dce-precise-steps[- The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.]'
  '--polly-delicm-max-ops[- Maximum number of isl operations to invest for lifetime analysis; 0=no limit]'
  '--polly-detect-full-functions[- Allow the detection of full functions]'
  '--polly-dump-after[- Dump module after Polly transformations into a file suffixed with "-after"]'
  '--polly-dump-after-file[- Dump module after Polly transformations to the given file]'
  '--polly-dump-before[- Dump module before Polly transformations into a file suffixed with "-before"]'
  '--polly-dump-before-file[- Dump module before Polly transformations to the given file]'
  '--polly-enable-simplify[- Simplify SCoP after optimizations]'
  '--polly-ignore-func[- Ignore functions that match a regex. Multiple regexes can be comma separated. Scop detection will ignore all functions that match ANY of the regexes provided.]'
  '--polly-on-isl-error-abort[- Abort if an isl error is encountered]'
  '--polly-only-func[- Only run on functions that match a regex. Multiple regexes can be comma separated. Scop detection will run on all functions that match ANY of the regexes provided.]'
  '--polly-only-region[- Only run on certain regions (The provided identifier must appear in the name of the regions entry block]'
  '--polly-only-scop-detection[- Only run scop detection, but no other optimizations]'
  '--polly-optimized-scops[- Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree]'
  '--polly-parallel[- Generate thread parallel code (isl codegen only)]'
  '--polly-parallel-force[- Force generation of thread parallel code ignoring any cost model]'
  '--polly-pattern-matching-based-opts[- Perform optimizations based on pattern matching]'
  '--polly-process-unprofitable[- Process scops that are unlikely to benefit from Polly optimizations.]'
  '--polly-register-tiling[- Enable register tiling]'
  '--polly-report[- Print information about the activities of Polly]'
  '--polly-show[- Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)]'
  '--polly-show-only[- Highlight the code regions that will be optimized in a (CFG only BBs)]'
  '--polly-stmt-granularity[- Algorithm to use for splitting basic blocks into multiple statements]'
  '--polly-target[- The hardware to target]'
  '--polly-tiling[- Enable loop tiling]'
  '--polly-vectorizer[- Select the vectorization strategy]'
  '*:filename:_files'
)

_arguments -s $arguments
