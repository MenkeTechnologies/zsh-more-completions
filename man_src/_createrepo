#compdef createrepo

local arguments

arguments=(
  {-h,--help}'[show help options]'
  '--help-all[show all help options]'
  '--help-expert[expert (risky) options]'
  {-V,--version}'[show programs version number and exit.]'
  {-q,--quiet}'[run quietly.]'
  {-v,--verbose}'[run verbosely.]'
  {-x,--excludes}'[path patterns to exclude, can be specified multiple times.]'
  '--basedir[basedir for path to directories.]'
  {-u,--baseurl}'[optional base URL location for all files.]'
  {-g,--groupfile}'[path to groupfile to include in metadata.]'
  {-s,--checksum}'[choose the checksum type used in repomd.xml and for packages in the metadata. The default is now "sha256".]'
  {-p,--pretty}'[make sure all xml generated is formatted (default)]'
  {-d,--database}'[generate sqlite databases for use with yum.]'
  '--no-database[do not generate sqlite databases in the repository.]'
  '--update[if metadata already exists in the outputdir and an rpm is unchanged (based on file size and mtime) since the metadata was generated, reuse the existing metadata rather than recalculating it. In the case of a large repository with only a few new or modified rpms this can significantly reduce I/O and processing time.]'
  '--update-md-path[existing metadata from this path are loaded and reused in addition to those present in the outputdir (works only with --update). Can be specified multiple times.]'
  '--skip-stat[skip the stat() call on a --update, assumes if the filename is the same then the file is still the same (only use this if youre fairly trusting or gullible).]'
  '--split[run in split media mode. Rather than pass a single directory, take a set ofdirectories corresponding to different volumes in a media set. Meta data is created in the first given directory]'
  {-i,--pkglist}'[specify a text file which contains the complete list of files to include in the repository from the set found in the directory. File format is one package per line, no wildcards or globs.]'
  {-n,--includepkg}'[specify pkgs to include on the command line. Takes urls as well as local paths.]'
  {-o,--outputdir}'[optional output directory.]'
  {-S,--skip-symlinks}'[ignore symlinks of packages.]'
  '--changelog-limit[only import the last N changelog entries, from each rpm, into the metadata.]'
  '--unique-md-filenames[include the files checksum in the metadata filename, helps HTTP caching (default).]'
  '--simple-md-filenames[do not include the files checksum in the metadata filename.]'
  '--retain-old-md[specify NUM to 0 to remove all repodata present in old repomd.xml or any other positive number to keep all old repodata. Use --compatibility flag to get the behavior of original createrepo: Keep around the latest (by timestamp) NUM copies of the old repodata (works only for primary, filelists, other and their DB variants).]'
  '--distro[distro tag and optional cpeid: --distrocpeid,textname.]'
  '--content[tags for the content in the repository.]'
  '--repo[tags to describe the repository itself.]'
  '--revision[user-specified revision for this repository.]'
  '--set-timestamp-to-revision[set timestamp fields in repomd.xml and last modification times of created repodata to a value given with --revision. This requires --revision to be a timestamp formatted in date +%s format.]'
  '--read-pkgs-list[output the paths to the pkgs actually read useful with --update.]'
  '--workers[number of workers to spawn to read rpms.]'
  '--xz[use xz for repodata compression.]'
  '--compress-type[which compression type to use.]'
  '--general-compress-type[which compression type to use (even for primary, filelists and other xml).]'
  '--zck[generate zchunk files as well as the standard repodata.]'
  '--zck-dict-dir[directory containing compression dictionaries for use by zchunk]'
  '--keep-all-metadata[keep all additional metadata (not primary, filelists and other xml or sqlite files, nor their compressed variants) from source repository during update.]'
  '--compatibility[enforce maximal compatibility with classical createrepo (Affects only: --retain-old-md).]'
  '--retain-old-md-by-age[during --update, remove all files in repodata/ which are older then the specified period of time. (e.g. 2h, 30d, ...). Available units (m - minutes, h - hours, d - days)]'
  {-c,--cachedir}'[.                     Set path to cache dir]'
  '--deltas[tells createrepo to generate deltarpms and the delta metadata.]'
  '--oldpackagedirs[paths to look for older pkgs to delta against. Can be specified multiple times.]'
  '--num-deltas[the number of older versions to make deltas against. Defaults to 1.]'
  '--max-delta-rpm-size[max size of an rpm that to run deltarpm against (in bytes).]'
  '--local-sqlite[gen sqlite DBs locally (into a directory for temporary files). Sometimes, sqlite has a trouble to gen DBs on a NFS mount, use this option in such cases. This option could lead to a higher memory consumption if TMPDIR is set to /tmp or not set at all, because then the /tmp is used and /tmp dir is often a ramdisk.]'
  '--cut-dirs[ignore NUM of directory components in location_href during repodata generation]'
  '--location-prefix[append this prefix before location_href in output repodata]'
  '--repomd-checksum[checksum type to be used in repomd.xml]'
  '--error-exit-val[exit with retval 2 if there were any errors during processing]'
  '--recycle-pkglist[read the list of packages from old metadata directory and re-use it.  This option is only useful with --update (complements --pkglist and friends).]'
  '*:filename:_files'
)

_arguments -s $arguments
