#compdef valgrind.bin

local arguments

arguments=(
  '--tool[use the Valgrind tool named <name> \[memcheck\]]'
  {-h,--help}'[show this message]'
  '--help-debug[show this message, plus debugging options]'
  '--help-dyn-options[show the dynamically changeable options]'
  '--version[show version]'
  {-q,--quiet}'[run silently; only print error msgs]'
  {-v,--verbose}'[be more verbose -- show misc extra info]'
  '--trace-children[valgrind-ise child processes (follow execve)? \[no\]]'
  '--trace-children-skip[1,patt2,...    specifies a list of executables]'
  '--trace-children-skip-by-arg[1,patt2,...   same as --trace-children-skip]'
  '--child-silent-after-fork[omit child output between fork & exec? \[no\]]'
  '--vgdb[activate gdbserver? \[yes\]]'
  '--vgdb-error[invoke gdbserver after <number> errors \[999999999\]]'
  '--vgdb-stop-at[1,event2,... invoke gdbserver for given events \[none\]]'
  '--track-fds[track open file descriptors? \[no\]]'
  '--time-stamp[add timestamps to log messages? \[no\]]'
  '--log-fd[log messages to file descriptor \[2=stderr\]]'
  '--log-file[log messages to <file>]'
  '--log-socket[log messages to socket ipaddr:port]'
  '--xml[emit error output in XML (some tools only)]'
  '--xml-fd[XML output to file descriptor]'
  '--xml-file[XML output to <file>]'
  '--xml-socket[XML output to socket ipaddr:port]'
  '--xml-user-comment[copy STR verbatim into XML output]'
  '--demangle[automatically demangle C++ names? \[yes\]]'
  '--num-callers[show <number> callers in stack traces \[12\]]'
  '--error-limit[stop showing new errors if too many? \[yes\]]'
  '--exit-on-first-error[exit code on the first error found? \[no\]]'
  '--error-exitcode[exit code to return if errors found \[0=disable\]]'
  '--error-markers[<end> add lines with begin/end markers before/after]'
  '--show-error-list[show detected errors list and]'
  '-s[same as --show-error-list=yes]'
  '--keep-debuginfo[keep symbols etc for unloaded code \[no\]]'
  '--show-below-main[continue stack traces below main() \[no\]]'
  '--default-suppressions[load default suppressions \[yes\]]'
  '--suppressions[suppress errors described in <filename>]'
  '--gen-suppressions[print suppressions for errors? \[no\]]'
  '--input-fd[file descriptor for input \[0=stdin\]]'
  '--dsymutil[run dsymutil on Mac OS X when helpful? \[yes\]]'
  '--max-stackframe[assume stack switch for SP changes larger]'
  '--main-stacksize[set size of main threads stack (in bytes)]'
  '--alignment[set minimum alignment of heap allocations \[16\]]'
  '--redzone-size[set minimum size of redzones added before/after]'
  '--xtree-memory[profile heap memory in an xtree \[none\]]'
  '--xtree-memory-file[xtree memory report file \[xtmemory.kcg.%p\]]'
  '--fullpath-after[(with nothing after the =)]'
  '--fullpath-after[like --fullpath-after=, but only show the]'
  '--extra-debuginfo-path[absolute path to search for additional]'
  '--debuginfo-server[also query this server]'
  '--allow-mismatched-debuginfo[\[no\]]'
  '--smc-check[\[all-non-file\]]'
  '--read-inline-info[read debug info about inlined function calls]'
  '--read-var-info[read debug info on stack and global variables]'
  '--vgdb-poll[gdbserver poll max every <number> basic blocks \[5000\]]'
  '--vgdb-shadow-registers[let gdb see the shadow registers \[no\]]'
  '--vgdb-prefix[prefix for vgdb FIFOs \[/tmp/vgdb-pipe\]]'
  '--run-libc-freeres[free up glibc memory at exit on Linux? \[yes\]]'
  '--run-cxx-freeres[free up libstdc++ memory at exit on Linux]'
  '--sim-hints[1,hint2,...  activate unusual sim behaviours \[none\]]'
  '--fair-sched[schedule threads fairly on multicore systems \[no\]]'
  '--kernel-variant[1,variant2,...]'
  '--merge-recursive-frames[merge frames between identical]'
  '--num-transtab-sectors[size of translated code cache \[32\]]'
  '--avg-transtab-entry-size[avg size in bytes of a translated]'
  '--aspace-minaddr[avoid mapping memory below 0xPP \[guessed\]]'
  '--valgrind-stacksize[size of valgrind (host) threads stack]'
  '--show-emwarns[show warnings about emulation limits? \[no\]]'
  '--require-text-symbol[abort run if the]'
  '--soname-synonyms[1=pattern1,syn2=pattern2,... synonym soname]'
  '--sigill-diagnostics[warn about illegal instructions? \[yes\]]'
  '--unw-stack-scan-thresh[enable stack-scan unwind if fewer]'
  '--unw-stack-scan-frames[max number of frames that can be]'
  '--resync-filter[\[yes on MacOS, no on other OSes\]]'
  '--max-threads[maximum number of threads that valgrind can]'
  '--leak-check[search for memory leaks at exit?  \[summary\]]'
  '--leak-resolution[differentiation of leak stack traces \[high\]]'
  '--show-leak-kinds[1,kind2,.. which leak kinds to show?]'
  '--errors-for-leak-kinds[1,kind2,..  which leak kinds are errors?]'
  '--leak-check-heuristics[1,heur2,... which heuristics to use for]'
  '--show-reachable[same as --show-leak-kinds=all]'
  {--show-reachable,--show-possibly-lost}'[same as --show-leak-kinds=definite,possible]'
  {--show-reachable,--show-possibly-lost}'[same as --show-leak-kinds=definite]'
  '--xtree-leak[output leak result in xtree format? \[no\]]'
  '--xtree-leak-file[xtree leak report file \[xtleak.kcg.%p\]]'
  '--undef-value-errors[check for undefined value errors \[yes\]]'
  '--track-origins[show origins of undefined values? \[no\]]'
  '--partial-loads-ok[too hard to explain here; see manual \[yes\]]'
  '--expensive-definedness-checks[use extra-precise definedness tracking \[auto\]]'
  '--freelist-vol[volume of freed blocks queue     \[20000000\]]'
  '--freelist-big-blocks[releases first blocks with size>= \[1000000\]]'
  '--workaround-gcc296-bugs[self explanatory \[no\].  Deprecated.]'
  '--ignore-ranges[0xQQ\[,0xRR-0xSS\]   assume given addresses are OK]'
  '--ignore-range-below-sp[do not report errors for]'
  '--malloc-fill[fill mallocd areas with given value]'
  '--free-fill[fill freed areas with given value]'
  '--keep-stacktraces[stack trace(s) to keep for mallocd/freed areas       \[alloc-and-free\]]'
  '--show-mismatched-frees[show frees that dont match the allocator? \[yes\]]'
  '*:filename:_files'
)

_arguments -s $arguments
